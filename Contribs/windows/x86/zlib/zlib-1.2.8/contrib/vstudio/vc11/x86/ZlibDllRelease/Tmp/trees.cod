; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.61030.0 

	TITLE	C:\Trunk2012\Contribs\windows\x86\zlib\zlib-1.2.8\trees.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	__dist_code
PUBLIC	__length_code
_static_bl_desc DD 00H
	DD	FLAT:_extra_blbits
	DD	00H
	DD	013H
	DD	07H
_static_d_desc DD FLAT:_static_dtree
	DD	FLAT:_extra_dbits
	DD	00H
	DD	01eH
	DD	0fH
_static_l_desc DD FLAT:_static_ltree
	DD	FLAT:_extra_lbits
	DD	0101H
	DD	011eH
	DD	0fH
__dist_code DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	00H
	DB	00H
	DB	010H
	DB	011H
	DB	012H
	DB	012H
	DB	013H
	DB	013H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
__length_code DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	0aH
	DB	0aH
	DB	0bH
	DB	0bH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01cH
_static_dtree DW 00H
	DW	05H
	DW	010H
	DW	05H
	DW	08H
	DW	05H
	DW	018H
	DW	05H
	DW	04H
	DW	05H
	DW	014H
	DW	05H
	DW	0cH
	DW	05H
	DW	01cH
	DW	05H
	DW	02H
	DW	05H
	DW	012H
	DW	05H
	DW	0aH
	DW	05H
	DW	01aH
	DW	05H
	DW	06H
	DW	05H
	DW	016H
	DW	05H
	DW	0eH
	DW	05H
	DW	01eH
	DW	05H
	DW	01H
	DW	05H
	DW	011H
	DW	05H
	DW	09H
	DW	05H
	DW	019H
	DW	05H
	DW	05H
	DW	05H
	DW	015H
	DW	05H
	DW	0dH
	DW	05H
	DW	01dH
	DW	05H
	DW	03H
	DW	05H
	DW	013H
	DW	05H
	DW	0bH
	DW	05H
	DW	01bH
	DW	05H
	DW	07H
	DW	05H
	DW	017H
	DW	05H
_static_ltree DW 0cH
	DW	08H
	DW	08cH
	DW	08H
	DW	04cH
	DW	08H
	DW	0ccH
	DW	08H
	DW	02cH
	DW	08H
	DW	0acH
	DW	08H
	DW	06cH
	DW	08H
	DW	0ecH
	DW	08H
	DW	01cH
	DW	08H
	DW	09cH
	DW	08H
	DW	05cH
	DW	08H
	DW	0dcH
	DW	08H
	DW	03cH
	DW	08H
	DW	0bcH
	DW	08H
	DW	07cH
	DW	08H
	DW	0fcH
	DW	08H
	DW	02H
	DW	08H
	DW	082H
	DW	08H
	DW	042H
	DW	08H
	DW	0c2H
	DW	08H
	DW	022H
	DW	08H
	DW	0a2H
	DW	08H
	DW	062H
	DW	08H
	DW	0e2H
	DW	08H
	DW	012H
	DW	08H
	DW	092H
	DW	08H
	DW	052H
	DW	08H
	DW	0d2H
	DW	08H
	DW	032H
	DW	08H
	DW	0b2H
	DW	08H
	DW	072H
	DW	08H
	DW	0f2H
	DW	08H
	DW	0aH
	DW	08H
	DW	08aH
	DW	08H
	DW	04aH
	DW	08H
	DW	0caH
	DW	08H
	DW	02aH
	DW	08H
	DW	0aaH
	DW	08H
	DW	06aH
	DW	08H
	DW	0eaH
	DW	08H
	DW	01aH
	DW	08H
	DW	09aH
	DW	08H
	DW	05aH
	DW	08H
	DW	0daH
	DW	08H
	DW	03aH
	DW	08H
	DW	0baH
	DW	08H
	DW	07aH
	DW	08H
	DW	0faH
	DW	08H
	DW	06H
	DW	08H
	DW	086H
	DW	08H
	DW	046H
	DW	08H
	DW	0c6H
	DW	08H
	DW	026H
	DW	08H
	DW	0a6H
	DW	08H
	DW	066H
	DW	08H
	DW	0e6H
	DW	08H
	DW	016H
	DW	08H
	DW	096H
	DW	08H
	DW	056H
	DW	08H
	DW	0d6H
	DW	08H
	DW	036H
	DW	08H
	DW	0b6H
	DW	08H
	DW	076H
	DW	08H
	DW	0f6H
	DW	08H
	DW	0eH
	DW	08H
	DW	08eH
	DW	08H
	DW	04eH
	DW	08H
	DW	0ceH
	DW	08H
	DW	02eH
	DW	08H
	DW	0aeH
	DW	08H
	DW	06eH
	DW	08H
	DW	0eeH
	DW	08H
	DW	01eH
	DW	08H
	DW	09eH
	DW	08H
	DW	05eH
	DW	08H
	DW	0deH
	DW	08H
	DW	03eH
	DW	08H
	DW	0beH
	DW	08H
	DW	07eH
	DW	08H
	DW	0feH
	DW	08H
	DW	01H
	DW	08H
	DW	081H
	DW	08H
	DW	041H
	DW	08H
	DW	0c1H
	DW	08H
	DW	021H
	DW	08H
	DW	0a1H
	DW	08H
	DW	061H
	DW	08H
	DW	0e1H
	DW	08H
	DW	011H
	DW	08H
	DW	091H
	DW	08H
	DW	051H
	DW	08H
	DW	0d1H
	DW	08H
	DW	031H
	DW	08H
	DW	0b1H
	DW	08H
	DW	071H
	DW	08H
	DW	0f1H
	DW	08H
	DW	09H
	DW	08H
	DW	089H
	DW	08H
	DW	049H
	DW	08H
	DW	0c9H
	DW	08H
	DW	029H
	DW	08H
	DW	0a9H
	DW	08H
	DW	069H
	DW	08H
	DW	0e9H
	DW	08H
	DW	019H
	DW	08H
	DW	099H
	DW	08H
	DW	059H
	DW	08H
	DW	0d9H
	DW	08H
	DW	039H
	DW	08H
	DW	0b9H
	DW	08H
	DW	079H
	DW	08H
	DW	0f9H
	DW	08H
	DW	05H
	DW	08H
	DW	085H
	DW	08H
	DW	045H
	DW	08H
	DW	0c5H
	DW	08H
	DW	025H
	DW	08H
	DW	0a5H
	DW	08H
	DW	065H
	DW	08H
	DW	0e5H
	DW	08H
	DW	015H
	DW	08H
	DW	095H
	DW	08H
	DW	055H
	DW	08H
	DW	0d5H
	DW	08H
	DW	035H
	DW	08H
	DW	0b5H
	DW	08H
	DW	075H
	DW	08H
	DW	0f5H
	DW	08H
	DW	0dH
	DW	08H
	DW	08dH
	DW	08H
	DW	04dH
	DW	08H
	DW	0cdH
	DW	08H
	DW	02dH
	DW	08H
	DW	0adH
	DW	08H
	DW	06dH
	DW	08H
	DW	0edH
	DW	08H
	DW	01dH
	DW	08H
	DW	09dH
	DW	08H
	DW	05dH
	DW	08H
	DW	0ddH
	DW	08H
	DW	03dH
	DW	08H
	DW	0bdH
	DW	08H
	DW	07dH
	DW	08H
	DW	0fdH
	DW	08H
	DW	013H
	DW	09H
	DW	0113H
	DW	09H
	DW	093H
	DW	09H
	DW	0193H
	DW	09H
	DW	053H
	DW	09H
	DW	0153H
	DW	09H
	DW	0d3H
	DW	09H
	DW	01d3H
	DW	09H
	DW	033H
	DW	09H
	DW	0133H
	DW	09H
	DW	0b3H
	DW	09H
	DW	01b3H
	DW	09H
	DW	073H
	DW	09H
	DW	0173H
	DW	09H
	DW	0f3H
	DW	09H
	DW	01f3H
	DW	09H
	DW	0bH
	DW	09H
	DW	010bH
	DW	09H
	DW	08bH
	DW	09H
	DW	018bH
	DW	09H
	DW	04bH
	DW	09H
	DW	014bH
	DW	09H
	DW	0cbH
	DW	09H
	DW	01cbH
	DW	09H
	DW	02bH
	DW	09H
	DW	012bH
	DW	09H
	DW	0abH
	DW	09H
	DW	01abH
	DW	09H
	DW	06bH
	DW	09H
	DW	016bH
	DW	09H
	DW	0ebH
	DW	09H
	DW	01ebH
	DW	09H
	DW	01bH
	DW	09H
	DW	011bH
	DW	09H
	DW	09bH
	DW	09H
	DW	019bH
	DW	09H
	DW	05bH
	DW	09H
	DW	015bH
	DW	09H
	DW	0dbH
	DW	09H
	DW	01dbH
	DW	09H
	DW	03bH
	DW	09H
	DW	013bH
	DW	09H
	DW	0bbH
	DW	09H
	DW	01bbH
	DW	09H
	DW	07bH
	DW	09H
	DW	017bH
	DW	09H
	DW	0fbH
	DW	09H
	DW	01fbH
	DW	09H
	DW	07H
	DW	09H
	DW	0107H
	DW	09H
	DW	087H
	DW	09H
	DW	0187H
	DW	09H
	DW	047H
	DW	09H
	DW	0147H
	DW	09H
	DW	0c7H
	DW	09H
	DW	01c7H
	DW	09H
	DW	027H
	DW	09H
	DW	0127H
	DW	09H
	DW	0a7H
	DW	09H
	DW	01a7H
	DW	09H
	DW	067H
	DW	09H
	DW	0167H
	DW	09H
	DW	0e7H
	DW	09H
	DW	01e7H
	DW	09H
	DW	017H
	DW	09H
	DW	0117H
	DW	09H
	DW	097H
	DW	09H
	DW	0197H
	DW	09H
	DW	057H
	DW	09H
	DW	0157H
	DW	09H
	DW	0d7H
	DW	09H
	DW	01d7H
	DW	09H
	DW	037H
	DW	09H
	DW	0137H
	DW	09H
	DW	0b7H
	DW	09H
	DW	01b7H
	DW	09H
	DW	077H
	DW	09H
	DW	0177H
	DW	09H
	DW	0f7H
	DW	09H
	DW	01f7H
	DW	09H
	DW	0fH
	DW	09H
	DW	010fH
	DW	09H
	DW	08fH
	DW	09H
	DW	018fH
	DW	09H
	DW	04fH
	DW	09H
	DW	014fH
	DW	09H
	DW	0cfH
	DW	09H
	DW	01cfH
	DW	09H
	DW	02fH
	DW	09H
	DW	012fH
	DW	09H
	DW	0afH
	DW	09H
	DW	01afH
	DW	09H
	DW	06fH
	DW	09H
	DW	016fH
	DW	09H
	DW	0efH
	DW	09H
	DW	01efH
	DW	09H
	DW	01fH
	DW	09H
	DW	011fH
	DW	09H
	DW	09fH
	DW	09H
	DW	019fH
	DW	09H
	DW	05fH
	DW	09H
	DW	015fH
	DW	09H
	DW	0dfH
	DW	09H
	DW	01dfH
	DW	09H
	DW	03fH
	DW	09H
	DW	013fH
	DW	09H
	DW	0bfH
	DW	09H
	DW	01bfH
	DW	09H
	DW	07fH
	DW	09H
	DW	017fH
	DW	09H
	DW	0ffH
	DW	09H
	DW	01ffH
	DW	09H
	DW	00H
	DW	07H
	DW	040H
	DW	07H
	DW	020H
	DW	07H
	DW	060H
	DW	07H
	DW	010H
	DW	07H
	DW	050H
	DW	07H
	DW	030H
	DW	07H
	DW	070H
	DW	07H
	DW	08H
	DW	07H
	DW	048H
	DW	07H
	DW	028H
	DW	07H
	DW	068H
	DW	07H
	DW	018H
	DW	07H
	DW	058H
	DW	07H
	DW	038H
	DW	07H
	DW	078H
	DW	07H
	DW	04H
	DW	07H
	DW	044H
	DW	07H
	DW	024H
	DW	07H
	DW	064H
	DW	07H
	DW	014H
	DW	07H
	DW	054H
	DW	07H
	DW	034H
	DW	07H
	DW	074H
	DW	07H
	DW	03H
	DW	08H
	DW	083H
	DW	08H
	DW	043H
	DW	08H
	DW	0c3H
	DW	08H
	DW	023H
	DW	08H
	DW	0a3H
	DW	08H
	DW	063H
	DW	08H
	DW	0e3H
	DW	08H
_extra_dbits DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	04H
	DD	04H
	DD	05H
	DD	05H
	DD	06H
	DD	06H
	DD	07H
	DD	07H
	DD	08H
	DD	08H
	DD	09H
	DD	09H
	DD	0aH
	DD	0aH
	DD	0bH
	DD	0bH
	DD	0cH
	DD	0cH
	DD	0dH
	DD	0dH
_base_length DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	05H
	DD	06H
	DD	07H
	DD	08H
	DD	0aH
	DD	0cH
	DD	0eH
	DD	010H
	DD	014H
	DD	018H
	DD	01cH
	DD	020H
	DD	028H
	DD	030H
	DD	038H
	DD	040H
	DD	050H
	DD	060H
	DD	070H
	DD	080H
	DD	0a0H
	DD	0c0H
	DD	0e0H
	DD	00H
	ORG $+4
_extra_blbits DD 00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	02H
	DD	03H
	DD	07H
	ORG $+4
_extra_lbits DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	04H
	DD	04H
	DD	04H
	DD	04H
	DD	05H
	DD	05H
	DD	05H
	DD	05H
	DD	00H
_bl_order DB	010H
	DB	011H
	DB	012H
	DB	00H
	DB	08H
	DB	07H
	DB	09H
	DB	06H
	DB	0aH
	DB	05H
	DB	0bH
	DB	04H
	DB	0cH
	DB	03H
	DB	0dH
	DB	02H
	DB	0eH
	DB	01H
	DB	0fH
	ORG $+1
_base_dist DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	06H
	DD	08H
	DD	0cH
	DD	010H
	DD	018H
	DD	020H
	DD	030H
	DD	040H
	DD	060H
	DD	080H
	DD	0c0H
	DD	0100H
	DD	0180H
	DD	0200H
	DD	0300H
	DD	0400H
	DD	0600H
	DD	0800H
	DD	0c00H
	DD	01000H
	DD	01800H
	DD	02000H
	DD	03000H
	DD	04000H
	DD	06000H
PUBLIC	__tr_init
PUBLIC	__tr_flush_block
PUBLIC	__tr_align
PUBLIC	__tr_stored_block
PUBLIC	__tr_flush_bits
; Function compile flags: /Ogtp
; File c:\trunk2012\contribs\windows\x86\zlib\zlib-1.2.8\trees.c
;	COMDAT __tr_flush_bits
_TEXT	SEGMENT
__tr_flush_bits PROC					; COMDAT
; _s$ = ecx

; 885  :     bi_flush(s);

  00000	e9 00 00 00 00	 jmp	 _bi_flush
__tr_flush_bits ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\trunk2012\contribs\windows\x86\zlib\zlib-1.2.8\trees.c
;	COMDAT __tr_stored_block
_TEXT	SEGMENT
_stored_len$ = 8					; size = 4
_last$ = 12						; size = 4
__tr_stored_block PROC					; COMDAT
; _s$ = ecx
; _buf$ = edx

; 870  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx
  00007	8b da		 mov	 ebx, edx

; 871  :     send_bits(s, (STORED_BLOCK<<1)+last, 3);    /* send block type */

  00009	8b 8f bc 16 00
	00		 mov	 ecx, DWORD PTR [edi+5820]
  0000f	83 f9 0d	 cmp	 ecx, 13			; 0000000dH
  00012	7e 51		 jle	 SHORT $LN2@tr_stored_
  00014	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  00017	56		 push	 esi
  00018	8b 75 0c	 mov	 esi, DWORD PTR _last$[ebp]
  0001b	66 8b c6	 mov	 ax, si
  0001e	66 d3 e0	 shl	 ax, cl
  00021	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00024	66 09 87 b8 16
	00 00		 or	 WORD PTR [edi+5816], ax
  0002b	0f b6 87 b8 16
	00 00		 movzx	 eax, BYTE PTR [edi+5816]
  00032	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00035	ff 47 14	 inc	 DWORD PTR [edi+20]
  00038	0f b6 87 b9 16
	00 00		 movzx	 eax, BYTE PTR [edi+5817]
  0003f	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00042	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00045	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00048	8b 87 bc 16 00
	00		 mov	 eax, DWORD PTR [edi+5820]
  0004e	ff 47 14	 inc	 DWORD PTR [edi+20]
  00051	b1 10		 mov	 cl, 16			; 00000010H
  00053	2a c8		 sub	 cl, al
  00055	66 d3 ee	 shr	 si, cl
  00058	83 c0 f3	 add	 eax, -13		; fffffff3H
  0005b	66 89 b7 b8 16
	00 00		 mov	 WORD PTR [edi+5816], si
  00062	5e		 pop	 esi
  00063	eb 11		 jmp	 SHORT $LN5@tr_stored_
$LN2@tr_stored_:
  00065	66 8b 45 0c	 mov	 ax, WORD PTR _last$[ebp]
  00069	66 d3 e0	 shl	 ax, cl
  0006c	66 09 87 b8 16
	00 00		 or	 WORD PTR [edi+5816], ax
  00073	8d 41 03	 lea	 eax, DWORD PTR [ecx+3]
$LN5@tr_stored_:

; 872  : #ifdef DEBUG
; 873  :     s->compressed_len = (s->compressed_len + 3 + 7) & (ulg)~7L;
; 874  :     s->compressed_len += (stored_len + 4) << 3;
; 875  : #endif
; 876  :     copy_block(s, buf, (unsigned)stored_len, 1); /* with header */

  00076	51		 push	 ecx
  00077	ff 75 08	 push	 DWORD PTR _stored_len$[ebp]
  0007a	8b d3		 mov	 edx, ebx
  0007c	8b cf		 mov	 ecx, edi
  0007e	89 87 bc 16 00
	00		 mov	 DWORD PTR [edi+5820], eax
  00084	e8 00 00 00 00	 call	 _copy_block
  00089	83 c4 08	 add	 esp, 8
  0008c	5f		 pop	 edi
  0008d	5b		 pop	 ebx

; 877  : }

  0008e	5d		 pop	 ebp
  0008f	c3		 ret	 0
__tr_stored_block ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\trunk2012\contribs\windows\x86\zlib\zlib-1.2.8\trees.c
;	COMDAT __tr_align
_TEXT	SEGMENT
__tr_align PROC						; COMDAT
; _s$ = ecx

; 894  : {

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 895  :     send_bits(s, STATIC_TREES<<1, 3);

  00003	8b 8f bc 16 00
	00		 mov	 ecx, DWORD PTR [edi+5820]
  00009	83 f9 0d	 cmp	 ecx, 13			; 0000000dH
  0000c	7e 52		 jle	 SHORT $LN4@tr_align
  0000e	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  00011	56		 push	 esi
  00012	be 02 00 00 00	 mov	 esi, 2
  00017	8b c6		 mov	 eax, esi
  00019	66 d3 e0	 shl	 ax, cl
  0001c	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  0001f	66 09 87 b8 16
	00 00		 or	 WORD PTR [edi+5816], ax
  00026	0f b6 87 b8 16
	00 00		 movzx	 eax, BYTE PTR [edi+5816]
  0002d	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00030	ff 47 14	 inc	 DWORD PTR [edi+20]
  00033	0f b6 87 b9 16
	00 00		 movzx	 eax, BYTE PTR [edi+5817]
  0003a	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  0003d	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00040	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00043	8b 87 bc 16 00
	00		 mov	 eax, DWORD PTR [edi+5820]
  00049	ff 47 14	 inc	 DWORD PTR [edi+20]
  0004c	b1 10		 mov	 cl, 16			; 00000010H
  0004e	2a c8		 sub	 cl, al
  00050	66 d3 ee	 shr	 si, cl
  00053	83 c0 f3	 add	 eax, -13		; fffffff3H
  00056	66 89 b7 b8 16
	00 00		 mov	 WORD PTR [edi+5816], si
  0005d	5e		 pop	 esi
  0005e	eb 12		 jmp	 SHORT $LN9@tr_align
$LN4@tr_align:
  00060	b8 02 00 00 00	 mov	 eax, 2
  00065	66 d3 e0	 shl	 ax, cl
  00068	66 09 87 b8 16
	00 00		 or	 WORD PTR [edi+5816], ax
  0006f	8d 41 03	 lea	 eax, DWORD PTR [ecx+3]
$LN9@tr_align:

; 896  :     send_code(s, END_BLOCK, static_ltree);

  00072	8b c8		 mov	 ecx, eax
  00074	89 87 bc 16 00
	00		 mov	 DWORD PTR [edi+5820], eax
  0007a	33 c0		 xor	 eax, eax
  0007c	66 d3 e0	 shl	 ax, cl
  0007f	66 09 87 b8 16
	00 00		 or	 WORD PTR [edi+5816], ax
  00086	83 f9 09	 cmp	 ecx, 9
  00089	7e 4d		 jle	 SHORT $LN2@tr_align
  0008b	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  0008e	0f b6 87 b8 16
	00 00		 movzx	 eax, BYTE PTR [edi+5816]
  00095	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  00098	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0009b	ff 47 14	 inc	 DWORD PTR [edi+20]
  0009e	0f b6 87 b9 16
	00 00		 movzx	 eax, BYTE PTR [edi+5817]
  000a5	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  000a8	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  000ab	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  000ae	8b 97 bc 16 00
	00		 mov	 edx, DWORD PTR [edi+5820]
  000b4	ff 47 14	 inc	 DWORD PTR [edi+20]
  000b7	b1 10		 mov	 cl, 16			; 00000010H
  000b9	2a ca		 sub	 cl, dl
  000bb	33 c0		 xor	 eax, eax
  000bd	66 d3 e8	 shr	 ax, cl

; 897  : #ifdef DEBUG
; 898  :     s->compressed_len += 10L; /* 3 for block type, 7 for EOB */
; 899  : #endif
; 900  :     bi_flush(s);

  000c0	8b cf		 mov	 ecx, edi
  000c2	66 89 87 b8 16
	00 00		 mov	 WORD PTR [edi+5816], ax
  000c9	8d 42 f7	 lea	 eax, DWORD PTR [edx-9]
  000cc	89 87 bc 16 00
	00		 mov	 DWORD PTR [edi+5820], eax
  000d2	5f		 pop	 edi
  000d3	e9 00 00 00 00	 jmp	 _bi_flush
$LN2@tr_align:

; 896  :     send_code(s, END_BLOCK, static_ltree);

  000d8	8d 41 07	 lea	 eax, DWORD PTR [ecx+7]
  000db	89 87 bc 16 00
	00		 mov	 DWORD PTR [edi+5820], eax

; 897  : #ifdef DEBUG
; 898  :     s->compressed_len += 10L; /* 3 for block type, 7 for EOB */
; 899  : #endif
; 900  :     bi_flush(s);

  000e1	8b cf		 mov	 ecx, edi
  000e3	5f		 pop	 edi
  000e4	e9 00 00 00 00	 jmp	 _bi_flush
__tr_align ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\trunk2012\contribs\windows\x86\zlib\zlib-1.2.8\trees.c
;	COMDAT __tr_flush_block
_TEXT	SEGMENT
_max_blindex$1$ = -8					; size = 4
_buf$1$ = -4						; size = 4
_stored_len$ = 8					; size = 4
_last$ = 12						; size = 4
__tr_flush_block PROC					; COMDAT
; _s$ = ecx
; _buf$ = edx

; 912  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 913  :     ulg opt_lenb, static_lenb; /* opt_len and static_len in bytes */
; 914  :     int max_blindex = 0;  /* index of last bit length code of non zero freq */
; 915  : 
; 916  :     /* Build the Huffman trees unless a stored block is forced */
; 917  :     if (s->level > 0) {

  00008	8b 75 08	 mov	 esi, DWORD PTR _stored_len$[ebp]
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	8b da		 mov	 ebx, edx
  00010	83 bf 84 00 00
	00 00		 cmp	 DWORD PTR [edi+132], 0
  00017	89 5d fc	 mov	 DWORD PTR _buf$1$[ebp], ebx
  0001a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _max_blindex$1$[ebp], 0
  00021	7e 55		 jle	 SHORT $LN14@tr_flush_b

; 918  : 
; 919  :         /* Check if the file is binary or text */
; 920  :         if (s->strm->data_type == Z_UNKNOWN)

  00023	8b 1f		 mov	 ebx, DWORD PTR [edi]
  00025	83 7b 2c 02	 cmp	 DWORD PTR [ebx+44], 2
  00029	75 08		 jne	 SHORT $LN13@tr_flush_b

; 921  :             s->strm->data_type = detect_data_type(s);

  0002b	e8 00 00 00 00	 call	 _detect_data_type
  00030	89 43 2c	 mov	 DWORD PTR [ebx+44], eax
$LN13@tr_flush_b:

; 922  : 
; 923  :         /* Construct the literal and distance trees */
; 924  :         build_tree(s, (tree_desc *)(&(s->l_desc)));

  00033	8d 97 18 0b 00
	00		 lea	 edx, DWORD PTR [edi+2840]
  00039	8b cf		 mov	 ecx, edi
  0003b	e8 00 00 00 00	 call	 _build_tree

; 925  :         Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
; 926  :                 s->static_len));
; 927  : 
; 928  :         build_tree(s, (tree_desc *)(&(s->d_desc)));

  00040	8d 97 24 0b 00
	00		 lea	 edx, DWORD PTR [edi+2852]
  00046	8b cf		 mov	 ecx, edi
  00048	e8 00 00 00 00	 call	 _build_tree

; 929  :         Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
; 930  :                 s->static_len));
; 931  :         /* At this point, opt_len and static_len are the total bit lengths of
; 932  :          * the compressed block data, excluding the tree representations.
; 933  :          */
; 934  : 
; 935  :         /* Build the bit length tree for the above two trees, and get the index
; 936  :          * in bl_order of the last bit length code to send.
; 937  :          */
; 938  :         max_blindex = build_bl_tree(s);

  0004d	8b cf		 mov	 ecx, edi
  0004f	e8 00 00 00 00	 call	 _build_bl_tree

; 939  : 
; 940  :         /* Determine the best encoding. Compute the block lengths in bytes. */
; 941  :         opt_lenb = (s->opt_len+3+7)>>3;

  00054	8b 8f a8 16 00
	00		 mov	 ecx, DWORD PTR [edi+5800]

; 942  :         static_lenb = (s->static_len+3+7)>>3;

  0005a	8b 97 ac 16 00
	00		 mov	 edx, DWORD PTR [edi+5804]

; 943  : 
; 944  :         Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
; 945  :                 opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
; 946  :                 s->last_lit));
; 947  : 
; 948  :         if (static_lenb <= opt_lenb) opt_lenb = static_lenb;
; 949  : 
; 950  :     } else {

  00060	8b 5d fc	 mov	 ebx, DWORD PTR _buf$1$[ebp]
  00063	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00066	83 c2 0a	 add	 edx, 10			; 0000000aH
  00069	c1 e9 03	 shr	 ecx, 3
  0006c	c1 ea 03	 shr	 edx, 3
  0006f	89 45 f8	 mov	 DWORD PTR _max_blindex$1$[ebp], eax
  00072	3b d1		 cmp	 edx, ecx
  00074	77 07		 ja	 SHORT $LN11@tr_flush_b
  00076	eb 03		 jmp	 SHORT $LN20@tr_flush_b
$LN14@tr_flush_b:

; 951  :         Assert(buf != (char*)0, "lost buf");
; 952  :         opt_lenb = static_lenb = stored_len + 5; /* force a stored block */

  00078	8d 56 05	 lea	 edx, DWORD PTR [esi+5]
$LN20@tr_flush_b:
  0007b	8b ca		 mov	 ecx, edx
$LN11@tr_flush_b:

; 953  :     }
; 954  : 
; 955  : #ifdef FORCE_STORED
; 956  :     if (buf != (char*)0) { /* force stored block */
; 957  : #else
; 958  :     if (stored_len+4 <= opt_lenb && buf != (char*)0) {

  0007d	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00080	3b c1		 cmp	 eax, ecx
  00082	77 1b		 ja	 SHORT $LN10@tr_flush_b
  00084	85 db		 test	 ebx, ebx
  00086	74 17		 je	 SHORT $LN10@tr_flush_b

; 959  :                        /* 4: two words for the lengths */
; 960  : #endif
; 961  :         /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
; 962  :          * Otherwise we can't have processed more than WSIZE input bytes since
; 963  :          * the last block flush, because compression would have been
; 964  :          * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
; 965  :          * transform a block into a stored block.
; 966  :          */
; 967  :         _tr_stored_block(s, buf, stored_len, last);

  00088	8b 5d 0c	 mov	 ebx, DWORD PTR _last$[ebp]
  0008b	8b 55 fc	 mov	 edx, DWORD PTR _buf$1$[ebp]
  0008e	53		 push	 ebx
  0008f	56		 push	 esi
  00090	8b cf		 mov	 ecx, edi
  00092	e8 00 00 00 00	 call	 __tr_stored_block
  00097	83 c4 08	 add	 esp, 8
  0009a	e9 46 01 00 00	 jmp	 $LN4@tr_flush_b
$LN10@tr_flush_b:

; 968  : 
; 969  : #ifdef FORCE_STATIC
; 970  :     } else if (static_lenb >= 0) { /* force static trees */
; 971  : #else
; 972  :     } else if (s->strategy == Z_FIXED || static_lenb == opt_lenb) {

  0009f	83 bf 88 00 00
	00 04		 cmp	 DWORD PTR [edi+136], 4
  000a6	0f 84 b2 00 00
	00		 je	 $LN7@tr_flush_b
  000ac	3b d1		 cmp	 edx, ecx
  000ae	0f 84 aa 00 00
	00		 je	 $LN7@tr_flush_b

; 977  : #ifdef DEBUG
; 978  :         s->compressed_len += 3 + s->static_len;
; 979  : #endif
; 980  :     } else {
; 981  :         send_bits(s, (DYN_TREES<<1)+last, 3);

  000b4	8b 8f bc 16 00
	00		 mov	 ecx, DWORD PTR [edi+5820]
  000ba	8b 5d 0c	 mov	 ebx, DWORD PTR _last$[ebp]
  000bd	83 f9 0d	 cmp	 ecx, 13			; 0000000dH
  000c0	7e 4f		 jle	 SHORT $LN3@tr_flush_b
  000c2	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  000c5	8d 73 04	 lea	 esi, DWORD PTR [ebx+4]
  000c8	66 8b c6	 mov	 ax, si
  000cb	66 d3 e0	 shl	 ax, cl
  000ce	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  000d1	66 09 87 b8 16
	00 00		 or	 WORD PTR [edi+5816], ax
  000d8	0f b6 87 b8 16
	00 00		 movzx	 eax, BYTE PTR [edi+5816]
  000df	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  000e2	ff 47 14	 inc	 DWORD PTR [edi+20]
  000e5	0f b6 87 b9 16
	00 00		 movzx	 eax, BYTE PTR [edi+5817]
  000ec	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  000ef	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  000f2	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  000f5	8b 87 bc 16 00
	00		 mov	 eax, DWORD PTR [edi+5820]
  000fb	ff 47 14	 inc	 DWORD PTR [edi+20]
  000fe	b1 10		 mov	 cl, 16			; 00000010H
  00100	2a c8		 sub	 cl, al
  00102	66 d3 ee	 shr	 si, cl
  00105	83 c0 f3	 add	 eax, -13		; fffffff3H
  00108	66 89 b7 b8 16
	00 00		 mov	 WORD PTR [edi+5816], si
  0010f	eb 10		 jmp	 SHORT $LN18@tr_flush_b
$LN3@tr_flush_b:
  00111	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  00114	66 d3 e0	 shl	 ax, cl
  00117	66 09 87 b8 16
	00 00		 or	 WORD PTR [edi+5816], ax
  0011e	8d 41 03	 lea	 eax, DWORD PTR [ecx+3]
$LN18@tr_flush_b:

; 982  :         send_all_trees(s, s->l_desc.max_code+1, s->d_desc.max_code+1,
; 983  :                        max_blindex+1);

  00121	8b 97 1c 0b 00
	00		 mov	 edx, DWORD PTR [edi+2844]
  00127	89 87 bc 16 00
	00		 mov	 DWORD PTR [edi+5820], eax
  0012d	8b 45 f8	 mov	 eax, DWORD PTR _max_blindex$1$[ebp]
  00130	40		 inc	 eax
  00131	50		 push	 eax
  00132	8b 87 28 0b 00
	00		 mov	 eax, DWORD PTR [edi+2856]
  00138	40		 inc	 eax
  00139	50		 push	 eax
  0013a	42		 inc	 edx
  0013b	8b cf		 mov	 ecx, edi
  0013d	e8 00 00 00 00	 call	 _send_all_trees

; 984  :         compress_block(s, (const ct_data *)s->dyn_ltree,
; 985  :                        (const ct_data *)s->dyn_dtree);

  00142	8d 87 88 09 00
	00		 lea	 eax, DWORD PTR [edi+2440]
  00148	50		 push	 eax
  00149	8d 97 94 00 00
	00		 lea	 edx, DWORD PTR [edi+148]
  0014f	8b cf		 mov	 ecx, edi
  00151	e8 00 00 00 00	 call	 _compress_block
  00156	83 c4 0c	 add	 esp, 12			; 0000000cH
  00159	e9 87 00 00 00	 jmp	 $LN4@tr_flush_b
$LN7@tr_flush_b:

; 973  : #endif
; 974  :         send_bits(s, (STATIC_TREES<<1)+last, 3);

  0015e	8b 8f bc 16 00
	00		 mov	 ecx, DWORD PTR [edi+5820]
  00164	8b 5d 0c	 mov	 ebx, DWORD PTR _last$[ebp]
  00167	83 f9 0d	 cmp	 ecx, 13			; 0000000dH
  0016a	7e 4f		 jle	 SHORT $LN6@tr_flush_b
  0016c	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  0016f	8d 73 02	 lea	 esi, DWORD PTR [ebx+2]
  00172	66 8b c6	 mov	 ax, si
  00175	66 d3 e0	 shl	 ax, cl
  00178	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0017b	66 09 87 b8 16
	00 00		 or	 WORD PTR [edi+5816], ax
  00182	0f b6 87 b8 16
	00 00		 movzx	 eax, BYTE PTR [edi+5816]
  00189	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0018c	ff 47 14	 inc	 DWORD PTR [edi+20]
  0018f	0f b6 87 b9 16
	00 00		 movzx	 eax, BYTE PTR [edi+5817]
  00196	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00199	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0019c	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0019f	8b 87 bc 16 00
	00		 mov	 eax, DWORD PTR [edi+5820]
  001a5	ff 47 14	 inc	 DWORD PTR [edi+20]
  001a8	b1 10		 mov	 cl, 16			; 00000010H
  001aa	2a c8		 sub	 cl, al
  001ac	66 d3 ee	 shr	 si, cl
  001af	83 c0 f3	 add	 eax, -13		; fffffff3H
  001b2	66 89 b7 b8 16
	00 00		 mov	 WORD PTR [edi+5816], si
  001b9	eb 10		 jmp	 SHORT $LN19@tr_flush_b
$LN6@tr_flush_b:
  001bb	8d 43 02	 lea	 eax, DWORD PTR [ebx+2]
  001be	66 d3 e0	 shl	 ax, cl
  001c1	66 09 87 b8 16
	00 00		 or	 WORD PTR [edi+5816], ax
  001c8	8d 41 03	 lea	 eax, DWORD PTR [ecx+3]
$LN19@tr_flush_b:

; 975  :         compress_block(s, (const ct_data *)static_ltree,
; 976  :                        (const ct_data *)static_dtree);

  001cb	68 00 00 00 00	 push	 OFFSET _static_dtree
  001d0	ba 00 00 00 00	 mov	 edx, OFFSET _static_ltree
  001d5	8b cf		 mov	 ecx, edi
  001d7	89 87 bc 16 00
	00		 mov	 DWORD PTR [edi+5820], eax
  001dd	e8 00 00 00 00	 call	 _compress_block
  001e2	83 c4 04	 add	 esp, 4
$LN4@tr_flush_b:

; 986  : #ifdef DEBUG
; 987  :         s->compressed_len += 3 + s->opt_len;
; 988  : #endif
; 989  :     }
; 990  :     Assert (s->compressed_len == s->bits_sent, "bad compressed size");
; 991  :     /* The above check is made mod 2^32, for files larger than 512 MB
; 992  :      * and uLong implemented on 32 bits.
; 993  :      */
; 994  :     init_block(s);

  001e5	8b cf		 mov	 ecx, edi
  001e7	e8 00 00 00 00	 call	 _init_block

; 995  : 
; 996  :     if (last) {

  001ec	85 db		 test	 ebx, ebx
  001ee	74 05		 je	 SHORT $LN1@tr_flush_b

; 997  :         bi_windup(s);

  001f0	e8 00 00 00 00	 call	 _bi_windup
$LN1@tr_flush_b:
  001f5	5f		 pop	 edi
  001f6	5e		 pop	 esi
  001f7	5b		 pop	 ebx

; 998  : #ifdef DEBUG
; 999  :         s->compressed_len += 7;  /* align on byte boundary */
; 1000 : #endif
; 1001 :     }
; 1002 :     Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
; 1003 :            s->compressed_len-7*last));
; 1004 : }

  001f8	8b e5		 mov	 esp, ebp
  001fa	5d		 pop	 ebp
  001fb	c3		 ret	 0
__tr_flush_block ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\trunk2012\contribs\windows\x86\zlib\zlib-1.2.8\trees.c
;	COMDAT __tr_init
_TEXT	SEGMENT
__tr_init PROC						; COMDAT
; _s$ = ecx

; 384  :     tr_static_init();
; 385  : 
; 386  :     s->l_desc.dyn_tree = s->dyn_ltree;

  00000	8d 81 94 00 00
	00		 lea	 eax, DWORD PTR [ecx+148]
  00006	89 81 18 0b 00
	00		 mov	 DWORD PTR [ecx+2840], eax

; 387  :     s->l_desc.stat_desc = &static_l_desc;
; 388  : 
; 389  :     s->d_desc.dyn_tree = s->dyn_dtree;

  0000c	8d 81 88 09 00
	00		 lea	 eax, DWORD PTR [ecx+2440]
  00012	89 81 24 0b 00
	00		 mov	 DWORD PTR [ecx+2852], eax

; 390  :     s->d_desc.stat_desc = &static_d_desc;
; 391  : 
; 392  :     s->bl_desc.dyn_tree = s->bl_tree;

  00018	8d 81 7c 0a 00
	00		 lea	 eax, DWORD PTR [ecx+2684]
  0001e	89 81 30 0b 00
	00		 mov	 DWORD PTR [ecx+2864], eax

; 393  :     s->bl_desc.stat_desc = &static_bl_desc;
; 394  : 
; 395  :     s->bi_buf = 0;

  00024	33 c0		 xor	 eax, eax
  00026	c7 81 20 0b 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+2848], OFFSET _static_l_desc
  00030	c7 81 2c 0b 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+2860], OFFSET _static_d_desc
  0003a	c7 81 38 0b 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+2872], OFFSET _static_bl_desc
  00044	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax

; 396  :     s->bi_valid = 0;

  0004b	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax

; 397  : #ifdef DEBUG
; 398  :     s->compressed_len = 0L;
; 399  :     s->bits_sent = 0L;
; 400  : #endif
; 401  : 
; 402  :     /* Initialize the first block of the first file: */
; 403  :     init_block(s);

  00051	e9 00 00 00 00	 jmp	 _init_block
__tr_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\trunk2012\contribs\windows\x86\zlib\zlib-1.2.8\trees.c
;	COMDAT _tr_static_init
_TEXT	SEGMENT
_tr_static_init PROC					; COMDAT

; 236  : #if defined(GEN_TREES_H) || !defined(STDC)
; 237  :     static int static_init_done = 0;
; 238  :     int n;        /* iterates over tree elements */
; 239  :     int bits;     /* bit counter */
; 240  :     int length;   /* length value */
; 241  :     int code;     /* code value */
; 242  :     int dist;     /* distance index */
; 243  :     ush bl_count[MAX_BITS+1];
; 244  :     /* number of codes at each bit length for an optimal tree */
; 245  : 
; 246  :     if (static_init_done) return;
; 247  : 
; 248  :     /* For some embedded targets, global variables are not initialized: */
; 249  : #ifdef NO_INIT_GLOBAL_POINTERS
; 250  :     static_l_desc.static_tree = static_ltree;
; 251  :     static_l_desc.extra_bits = extra_lbits;
; 252  :     static_d_desc.static_tree = static_dtree;
; 253  :     static_d_desc.extra_bits = extra_dbits;
; 254  :     static_bl_desc.extra_bits = extra_blbits;
; 255  : #endif
; 256  : 
; 257  :     /* Initialize the mapping length (0..255) -> length code (0..28) */
; 258  :     length = 0;
; 259  :     for (code = 0; code < LENGTH_CODES-1; code++) {
; 260  :         base_length[code] = length;
; 261  :         for (n = 0; n < (1<<extra_lbits[code]); n++) {
; 262  :             _length_code[length++] = (uch)code;
; 263  :         }
; 264  :     }
; 265  :     Assert (length == 256, "tr_static_init: length != 256");
; 266  :     /* Note that the length 255 (match length 258) can be represented
; 267  :      * in two different ways: code 284 + 5 bits or code 285, so we
; 268  :      * overwrite length_code[255] to use the best encoding:
; 269  :      */
; 270  :     _length_code[length-1] = (uch)code;
; 271  : 
; 272  :     /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
; 273  :     dist = 0;
; 274  :     for (code = 0 ; code < 16; code++) {
; 275  :         base_dist[code] = dist;
; 276  :         for (n = 0; n < (1<<extra_dbits[code]); n++) {
; 277  :             _dist_code[dist++] = (uch)code;
; 278  :         }
; 279  :     }
; 280  :     Assert (dist == 256, "tr_static_init: dist != 256");
; 281  :     dist >>= 7; /* from now on, all distances are divided by 128 */
; 282  :     for ( ; code < D_CODES; code++) {
; 283  :         base_dist[code] = dist << 7;
; 284  :         for (n = 0; n < (1<<(extra_dbits[code]-7)); n++) {
; 285  :             _dist_code[256 + dist++] = (uch)code;
; 286  :         }
; 287  :     }
; 288  :     Assert (dist == 256, "tr_static_init: 256+dist != 512");
; 289  : 
; 290  :     /* Construct the codes of the static literal tree */
; 291  :     for (bits = 0; bits <= MAX_BITS; bits++) bl_count[bits] = 0;
; 292  :     n = 0;
; 293  :     while (n <= 143) static_ltree[n++].Len = 8, bl_count[8]++;
; 294  :     while (n <= 255) static_ltree[n++].Len = 9, bl_count[9]++;
; 295  :     while (n <= 279) static_ltree[n++].Len = 7, bl_count[7]++;
; 296  :     while (n <= 287) static_ltree[n++].Len = 8, bl_count[8]++;
; 297  :     /* Codes 286 and 287 do not exist, but we must include them in the
; 298  :      * tree construction to get a canonical Huffman tree (longest code
; 299  :      * all ones)
; 300  :      */
; 301  :     gen_codes((ct_data *)static_ltree, L_CODES+1, bl_count);
; 302  : 
; 303  :     /* The static distance tree is trivial: */
; 304  :     for (n = 0; n < D_CODES; n++) {
; 305  :         static_dtree[n].Len = 5;
; 306  :         static_dtree[n].Code = bi_reverse((unsigned)n, 5);
; 307  :     }
; 308  :     static_init_done = 1;
; 309  : 
; 310  : #  ifdef GEN_TREES_H
; 311  :     gen_trees_header();
; 312  : #  endif
; 313  : #endif /* defined(GEN_TREES_H) || !defined(STDC) */
; 314  : }

  00000	c3		 ret	 0
_tr_static_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\trunk2012\contribs\windows\x86\zlib\zlib-1.2.8\trees.c
;	COMDAT _init_block
_TEXT	SEGMENT
_init_block PROC					; COMDAT
; _s$ = ecx

; 412  :     int n; /* iterates over tree elements */
; 413  : 
; 414  :     /* Initialize the trees. */
; 415  :     for (n = 0; n < L_CODES;  n++) s->dyn_ltree[n].Freq = 0;

  00000	8d 81 94 00 00
	00		 lea	 eax, DWORD PTR [ecx+148]
  00006	ba 1e 01 00 00	 mov	 edx, 286		; 0000011eH
  0000b	56		 push	 esi
  0000c	8d 64 24 00	 npad	 4
$LL9@init_block:
  00010	33 f6		 xor	 esi, esi
  00012	66 89 30	 mov	 WORD PTR [eax], si
  00015	8d 40 04	 lea	 eax, DWORD PTR [eax+4]
  00018	4a		 dec	 edx
  00019	75 f5		 jne	 SHORT $LL9@init_block

; 416  :     for (n = 0; n < D_CODES;  n++) s->dyn_dtree[n].Freq = 0;

  0001b	8d 81 88 09 00
	00		 lea	 eax, DWORD PTR [ecx+2440]
  00021	ba 1e 00 00 00	 mov	 edx, 30			; 0000001eH
$LL6@init_block:
  00026	33 f6		 xor	 esi, esi
  00028	66 89 30	 mov	 WORD PTR [eax], si
  0002b	8d 40 04	 lea	 eax, DWORD PTR [eax+4]
  0002e	4a		 dec	 edx
  0002f	75 f5		 jne	 SHORT $LL6@init_block

; 417  :     for (n = 0; n < BL_CODES; n++) s->bl_tree[n].Freq = 0;

  00031	8d 81 7c 0a 00
	00		 lea	 eax, DWORD PTR [ecx+2684]
  00037	ba 13 00 00 00	 mov	 edx, 19			; 00000013H
  0003c	8d 64 24 00	 npad	 4
$LL3@init_block:
  00040	33 f6		 xor	 esi, esi
  00042	66 89 30	 mov	 WORD PTR [eax], si
  00045	8d 40 04	 lea	 eax, DWORD PTR [eax+4]
  00048	4a		 dec	 edx
  00049	75 f5		 jne	 SHORT $LL3@init_block

; 418  : 
; 419  :     s->dyn_ltree[END_BLOCK].Freq = 1;

  0004b	b8 01 00 00 00	 mov	 eax, 1

; 420  :     s->opt_len = s->static_len = 0L;

  00050	89 b1 ac 16 00
	00		 mov	 DWORD PTR [ecx+5804], esi
  00056	89 b1 a8 16 00
	00		 mov	 DWORD PTR [ecx+5800], esi

; 421  :     s->last_lit = s->matches = 0;

  0005c	89 b1 b0 16 00
	00		 mov	 DWORD PTR [ecx+5808], esi
  00062	89 b1 a0 16 00
	00		 mov	 DWORD PTR [ecx+5792], esi
  00068	66 89 81 94 04
	00 00		 mov	 WORD PTR [ecx+1172], ax
  0006f	5e		 pop	 esi

; 422  : }

  00070	c3		 ret	 0
_init_block ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\trunk2012\contribs\windows\x86\zlib\zlib-1.2.8\trees.c
;	COMDAT _pqdownheap
_TEXT	SEGMENT
tv287 = -8						; size = 4
_tree$1$ = -4						; size = 4
_v$1$ = 8						; size = 4
_k$ = 8							; size = 4
_pqdownheap PROC					; COMDAT
; _s$ = ecx
; _tree$ = edx

; 457  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 458  :     int v = s->heap[k];
; 459  :     int j = k << 1;  /* left son of k */
; 460  :     while (j <= s->heap_len) {

  00006	8b 81 50 14 00
	00		 mov	 eax, DWORD PTR [ecx+5200]
  0000c	53		 push	 ebx
  0000d	8b 5d 08	 mov	 ebx, DWORD PTR _k$[ebp]
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	8b bc 99 5c 0b
	00 00		 mov	 edi, DWORD PTR [ecx+ebx*4+2908]
  00019	8d 34 1b	 lea	 esi, DWORD PTR [ebx+ebx]
  0001c	89 55 fc	 mov	 DWORD PTR _tree$1$[ebp], edx
  0001f	89 7d 08	 mov	 DWORD PTR _v$1$[ebp], edi
  00022	3b f0		 cmp	 esi, eax
  00024	0f 8f 91 00 00
	00		 jg	 $LN15@pqdownheap
  0002a	8d 14 ba	 lea	 edx, DWORD PTR [edx+edi*4]
  0002d	89 55 f8	 mov	 DWORD PTR tv287[ebp], edx
$LN18@pqdownheap:

; 461  :         /* Set j to the smallest of the two sons: */
; 462  :         if (j < s->heap_len &&
; 463  :             smaller(tree, s->heap[j+1], s->heap[j], s->depth)) {

  00030	7d 42		 jge	 SHORT $LN4@pqdownheap
  00032	8b bc b1 60 0b
	00 00		 mov	 edi, DWORD PTR [ecx+esi*4+2912]
  00039	8b 45 fc	 mov	 eax, DWORD PTR _tree$1$[ebp]
  0003c	8b 94 b1 5c 0b
	00 00		 mov	 edx, DWORD PTR [ecx+esi*4+2908]
  00043	0f b7 04 b8	 movzx	 eax, WORD PTR [eax+edi*4]
  00047	8b 7d fc	 mov	 edi, DWORD PTR _tree$1$[ebp]
  0004a	0f b7 14 97	 movzx	 edx, WORD PTR [edi+edx*4]
  0004e	8b bc b1 60 0b
	00 00		 mov	 edi, DWORD PTR [ecx+esi*4+2912]
  00055	66 3b c2	 cmp	 ax, dx
  00058	72 19		 jb	 SHORT $LN3@pqdownheap
  0005a	75 18		 jne	 SHORT $LN4@pqdownheap
  0005c	8b 94 b1 5c 0b
	00 00		 mov	 edx, DWORD PTR [ecx+esi*4+2908]
  00063	8a 84 0f 58 14
	00 00		 mov	 al, BYTE PTR [edi+ecx+5208]
  0006a	3a 84 0a 58 14
	00 00		 cmp	 al, BYTE PTR [edx+ecx+5208]
  00071	77 01		 ja	 SHORT $LN4@pqdownheap
$LN3@pqdownheap:

; 464  :             j++;

  00073	46		 inc	 esi
$LN4@pqdownheap:

; 465  :         }
; 466  :         /* Exit if v is smaller than both sons */
; 467  :         if (smaller(tree, v, s->heap[j], s->depth)) break;

  00074	8b 94 b1 5c 0b
	00 00		 mov	 edx, DWORD PTR [ecx+esi*4+2908]
  0007b	8b 45 f8	 mov	 eax, DWORD PTR tv287[ebp]
  0007e	8b 7d fc	 mov	 edi, DWORD PTR _tree$1$[ebp]
  00081	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00084	0f b7 3c 97	 movzx	 edi, WORD PTR [edi+edx*4]
  00088	66 3b c7	 cmp	 ax, di
  0008b	72 3c		 jb	 SHORT $LN14@pqdownheap
  0008d	8b 7d 08	 mov	 edi, DWORD PTR _v$1$[ebp]
  00090	75 10		 jne	 SHORT $LN2@pqdownheap
  00092	8a 84 0f 58 14
	00 00		 mov	 al, BYTE PTR [edi+ecx+5208]
  00099	3a 84 0a 58 14
	00 00		 cmp	 al, BYTE PTR [edx+ecx+5208]
  000a0	76 19		 jbe	 SHORT $LN15@pqdownheap
$LN2@pqdownheap:

; 468  : 
; 469  :         /* Exchange v with the smallest son */
; 470  :         s->heap[k] = s->heap[j];  k = j;

  000a2	89 94 99 5c 0b
	00 00		 mov	 DWORD PTR [ecx+ebx*4+2908], edx
  000a9	8b 81 50 14 00
	00		 mov	 eax, DWORD PTR [ecx+5200]
  000af	8b de		 mov	 ebx, esi

; 471  : 
; 472  :         /* And continue down the tree, setting j to the left son of k */
; 473  :         j <<= 1;

  000b1	03 f6		 add	 esi, esi
  000b3	3b f0		 cmp	 esi, eax
  000b5	0f 8e 75 ff ff
	ff		 jle	 $LN18@pqdownheap
$LN15@pqdownheap:

; 474  :     }
; 475  :     s->heap[k] = v;

  000bb	89 bc 99 5c 0b
	00 00		 mov	 DWORD PTR [ecx+ebx*4+2908], edi
  000c2	5f		 pop	 edi
  000c3	5e		 pop	 esi
  000c4	5b		 pop	 ebx

; 476  : }

  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	c3		 ret	 0
$LN14@pqdownheap:

; 474  :     }
; 475  :     s->heap[k] = v;

  000c9	8b 45 08	 mov	 eax, DWORD PTR _v$1$[ebp]
  000cc	5f		 pop	 edi
  000cd	5e		 pop	 esi
  000ce	89 84 99 5c 0b
	00 00		 mov	 DWORD PTR [ecx+ebx*4+2908], eax
  000d5	5b		 pop	 ebx

; 476  : }

  000d6	8b e5		 mov	 esp, ebp
  000d8	5d		 pop	 ebp
  000d9	c3		 ret	 0
_pqdownheap ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\trunk2012\contribs\windows\x86\zlib\zlib-1.2.8\trees.c
;	COMDAT _gen_bitlen
_TEXT	SEGMENT
tv640 = -52						; size = 4
_extra$1$ = -48						; size = 4
_s$1$ = -44						; size = 4
tv649 = -40						; size = 4
tv624 = -40						; size = 4
tv628 = -36						; size = 4
_stree$1$ = -32						; size = 4
_base$1$ = -28						; size = 4
_max_code$1$ = -24					; size = 4
_overflow$1$ = -20					; size = 4
tv643 = -16						; size = 4
_h$1$ = -12						; size = 4
_bits$3$ = -8						; size = 4
_tree$1$ = -4						; size = 4
_gen_bitlen PROC					; COMDAT
; _s$ = ecx
; _desc$ = edx

; 491  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H

; 492  :     ct_data *tree        = desc->dyn_tree;
; 493  :     int max_code         = desc->max_code;

  00006	53		 push	 ebx

; 494  :     const ct_data *stree = desc->stat_desc->static_tree;

  00007	56		 push	 esi

; 495  :     const intf *extra    = desc->stat_desc->extra_bits;
; 496  :     int base             = desc->stat_desc->extra_base;
; 497  :     int max_length       = desc->stat_desc->max_length;

  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx

; 506  : 
; 507  :     /* In a first pass, compute the optimal bit lengths (which may
; 508  :      * overflow in the case of the bit length tree).
; 509  :      */
; 510  :     tree[s->heap[s->heap_max]].Len = 0; /* root of the heap */

  0000b	89 7d d4	 mov	 DWORD PTR _s$1$[ebp], edi

; 492  :     ct_data *tree        = desc->dyn_tree;
; 493  :     int max_code         = desc->max_code;

  0000e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00011	8b 1a		 mov	 ebx, DWORD PTR [edx]
  00013	89 45 e8	 mov	 DWORD PTR _max_code$1$[ebp], eax

; 494  :     const ct_data *stree = desc->stat_desc->static_tree;

  00016	8b 42 08	 mov	 eax, DWORD PTR [edx+8]

; 495  :     const intf *extra    = desc->stat_desc->extra_bits;
; 496  :     int base             = desc->stat_desc->extra_base;
; 497  :     int max_length       = desc->stat_desc->max_length;

  00019	8b 70 10	 mov	 esi, DWORD PTR [eax+16]
  0001c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001e	89 4d e0	 mov	 DWORD PTR _stree$1$[ebp], ecx
  00021	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00024	89 4d d0	 mov	 DWORD PTR _extra$1$[ebp], ecx
  00027	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0002a	89 4d e4	 mov	 DWORD PTR _base$1$[ebp], ecx

; 498  :     int h;              /* heap index */
; 499  :     int n, m;           /* iterate over the tree elements */
; 500  :     int bits;           /* bit length */
; 501  :     int xbits;          /* extra bits */
; 502  :     ush f;              /* frequency */
; 503  :     int overflow = 0;   /* number of elements with bit length too large */
; 504  : 
; 505  :     for (bits = 0; bits <= MAX_BITS; bits++) s->bl_count[bits] = 0;

  0002d	33 c9		 xor	 ecx, ecx
  0002f	0f b7 c1	 movzx	 eax, cx
  00032	8b c8		 mov	 ecx, eax
  00034	c1 e0 10	 shl	 eax, 16			; 00000010H
  00037	0b c8		 or	 ecx, eax
  00039	89 8f 3c 0b 00
	00		 mov	 DWORD PTR [edi+2876], ecx
  0003f	89 8f 40 0b 00
	00		 mov	 DWORD PTR [edi+2880], ecx
  00045	89 8f 44 0b 00
	00		 mov	 DWORD PTR [edi+2884], ecx
  0004b	89 8f 48 0b 00
	00		 mov	 DWORD PTR [edi+2888], ecx
  00051	89 8f 4c 0b 00
	00		 mov	 DWORD PTR [edi+2892], ecx
  00057	89 8f 50 0b 00
	00		 mov	 DWORD PTR [edi+2896], ecx
  0005d	89 8f 54 0b 00
	00		 mov	 DWORD PTR [edi+2900], ecx
  00063	89 8f 58 0b 00
	00		 mov	 DWORD PTR [edi+2904], ecx

; 506  : 
; 507  :     /* In a first pass, compute the optimal bit lengths (which may
; 508  :      * overflow in the case of the bit length tree).
; 509  :      */
; 510  :     tree[s->heap[s->heap_max]].Len = 0; /* root of the heap */

  00069	8b cf		 mov	 ecx, edi
  0006b	33 d2		 xor	 edx, edx
  0006d	8b 81 54 14 00
	00		 mov	 eax, DWORD PTR [ecx+5204]
  00073	89 5d fc	 mov	 DWORD PTR _tree$1$[ebp], ebx
  00076	8b 84 81 5c 0b
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+2908]
  0007d	66 89 54 83 02	 mov	 WORD PTR [ebx+eax*4+2], dx

; 511  : 
; 512  :     for (h = s->heap_max+1; h < HEAP_SIZE; h++) {

  00082	8b 99 54 14 00
	00		 mov	 ebx, DWORD PTR [ecx+5204]
  00088	43		 inc	 ebx
  00089	89 75 f8	 mov	 DWORD PTR _bits$3$[ebp], esi
  0008c	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _overflow$1$[ebp], 0
  00093	81 fb 3d 02 00
	00		 cmp	 ebx, 573		; 0000023dH
  00099	0f 8d 9f 01 00
	00		 jge	 $LN5@gen_bitlen

; 506  : 
; 507  :     /* In a first pass, compute the optimal bit lengths (which may
; 508  :      * overflow in the case of the bit length tree).
; 509  :      */
; 510  :     tree[s->heap[s->heap_max]].Len = 0; /* root of the heap */

  0009f	8d 81 5c 0b 00
	00		 lea	 eax, DWORD PTR [ecx+2908]
  000a5	ba 3d 02 00 00	 mov	 edx, 573		; 0000023dH
  000aa	2b d3		 sub	 edx, ebx
  000ac	8d 04 98	 lea	 eax, DWORD PTR [eax+ebx*4]

; 511  : 
; 512  :     for (h = s->heap_max+1; h < HEAP_SIZE; h++) {

  000af	03 da		 add	 ebx, edx
  000b1	89 5d f4	 mov	 DWORD PTR _h$1$[ebp], ebx
  000b4	89 45 dc	 mov	 DWORD PTR tv628[ebp], eax
  000b7	89 55 d8	 mov	 DWORD PTR tv649[ebp], edx
  000ba	33 db		 xor	 ebx, ebx
  000bc	8d 64 24 00	 npad	 4
$LL20@gen_bitlen:

; 513  :         n = s->heap[h];

  000c0	8b 38		 mov	 edi, DWORD PTR [eax]

; 514  :         bits = tree[tree[n].Dad].Len + 1;

  000c2	8b 55 fc	 mov	 edx, DWORD PTR _tree$1$[ebp]
  000c5	8d 04 bd 00 00
	00 00		 lea	 eax, DWORD PTR [edi*4]
  000cc	89 45 f0	 mov	 DWORD PTR tv643[ebp], eax
  000cf	0f b7 44 10 02	 movzx	 eax, WORD PTR [eax+edx+2]
  000d4	0f b7 54 82 02	 movzx	 edx, WORD PTR [edx+eax*4+2]
  000d9	42		 inc	 edx

; 515  :         if (bits > max_length) bits = max_length, overflow++;

  000da	3b d6		 cmp	 edx, esi
  000dc	7e 06		 jle	 SHORT $LN17@gen_bitlen
  000de	43		 inc	 ebx
  000df	8b d6		 mov	 edx, esi
  000e1	89 5d ec	 mov	 DWORD PTR _overflow$1$[ebp], ebx
$LN17@gen_bitlen:

; 516  :         tree[n].Len = (ush)bits;

  000e4	8b 75 f0	 mov	 esi, DWORD PTR tv643[ebp]
  000e7	8b 45 fc	 mov	 eax, DWORD PTR _tree$1$[ebp]
  000ea	66 89 54 06 02	 mov	 WORD PTR [esi+eax+2], dx

; 517  :         /* We overwrite tree[n].Dad which is no longer needed */
; 518  : 
; 519  :         if (n > max_code) continue; /* not a leaf node */

  000ef	8b 75 f8	 mov	 esi, DWORD PTR _bits$3$[ebp]
  000f2	3b 7d e8	 cmp	 edi, DWORD PTR _max_code$1$[ebp]
  000f5	7f 58		 jg	 SHORT $LN19@gen_bitlen

; 520  : 
; 521  :         s->bl_count[bits]++;

  000f7	66 ff 84 51 3c
	0b 00 00	 inc	 WORD PTR [ecx+edx*2+2876]

; 522  :         xbits = 0;
; 523  :         if (n >= base) xbits = extra[n-base];

  000ff	3b 7d e4	 cmp	 edi, DWORD PTR _base$1$[ebp]
  00102	7c 0e		 jl	 SHORT $LN44@gen_bitlen
  00104	2b 7d e4	 sub	 edi, DWORD PTR _base$1$[ebp]
  00107	8b 75 d0	 mov	 esi, DWORD PTR _extra$1$[ebp]
  0010a	8b 3c be	 mov	 edi, DWORD PTR [esi+edi*4]
  0010d	8b 75 f8	 mov	 esi, DWORD PTR _bits$3$[ebp]
  00110	eb 02		 jmp	 SHORT $LN15@gen_bitlen
$LN44@gen_bitlen:
  00112	33 ff		 xor	 edi, edi
$LN15@gen_bitlen:

; 524  :         f = tree[n].Freq;

  00114	8b 5d f0	 mov	 ebx, DWORD PTR tv643[ebp]
  00117	0f b7 04 03	 movzx	 eax, WORD PTR [ebx+eax]

; 525  :         s->opt_len += (ulg)f * (bits + xbits);
; 526  :         if (stree) s->static_len += (ulg)f * (stree[n].Len + xbits);

  0011b	8b 5d ec	 mov	 ebx, DWORD PTR _overflow$1$[ebp]
  0011e	89 45 cc	 mov	 DWORD PTR tv640[ebp], eax
  00121	8d 04 17	 lea	 eax, DWORD PTR [edi+edx]
  00124	8b 55 cc	 mov	 edx, DWORD PTR tv640[ebp]
  00127	0f af c2	 imul	 eax, edx
  0012a	01 81 a8 16 00
	00		 add	 DWORD PTR [ecx+5800], eax
  00130	83 7d e0 00	 cmp	 DWORD PTR _stree$1$[ebp], 0
  00134	74 19		 je	 SHORT $LN19@gen_bitlen
  00136	8b 75 e0	 mov	 esi, DWORD PTR _stree$1$[ebp]
  00139	8b 45 f0	 mov	 eax, DWORD PTR tv643[ebp]
  0013c	0f b7 44 30 02	 movzx	 eax, WORD PTR [eax+esi+2]
  00141	8b 75 f8	 mov	 esi, DWORD PTR _bits$3$[ebp]
  00144	03 c7		 add	 eax, edi
  00146	0f af c2	 imul	 eax, edx
  00149	01 81 ac 16 00
	00		 add	 DWORD PTR [ecx+5804], eax
$LN19@gen_bitlen:

; 511  : 
; 512  :     for (h = s->heap_max+1; h < HEAP_SIZE; h++) {

  0014f	8b 45 dc	 mov	 eax, DWORD PTR tv628[ebp]
  00152	83 c0 04	 add	 eax, 4
  00155	ff 4d d8	 dec	 DWORD PTR tv649[ebp]
  00158	89 45 dc	 mov	 DWORD PTR tv628[ebp], eax
  0015b	0f 85 5f ff ff
	ff		 jne	 $LL20@gen_bitlen

; 527  :     }
; 528  :     if (overflow == 0) return;

  00161	85 db		 test	 ebx, ebx
  00163	0f 84 d5 00 00
	00		 je	 $LN5@gen_bitlen
  00169	8d 5e ff	 lea	 ebx, DWORD PTR [esi-1]
  0016c	81 c6 9e 05 00
	00		 add	 esi, 1438		; 0000059eH
  00172	8d 3c 71	 lea	 edi, DWORD PTR [ecx+esi*2]
  00175	8b 75 ec	 mov	 esi, DWORD PTR _overflow$1$[ebp]
  00178	89 7d d8	 mov	 DWORD PTR tv624[ebp], edi
  0017b	eb 03 8d 49 00	 npad	 5
$LL12@gen_bitlen:

; 529  : 
; 530  :     Trace((stderr,"\nbit length overflow\n"));
; 531  :     /* This happens for example on obj2 and pic of the Calgary corpus */
; 532  : 
; 533  :     /* Find the first bit length which could increase: */
; 534  :     do {
; 535  :         bits = max_length-1;

  00180	8b d3		 mov	 edx, ebx

; 536  :         while (s->bl_count[bits] == 0) bits--;

  00182	8d 81 3c 0b 00
	00		 lea	 eax, DWORD PTR [ecx+2876]
  00188	66 83 3c 50 00	 cmp	 WORD PTR [eax+edx*2], 0
  0018d	8d 04 50	 lea	 eax, DWORD PTR [eax+edx*2]
  00190	75 0a		 jne	 SHORT $LN8@gen_bitlen
$LL9@gen_bitlen:
  00192	8d 40 fe	 lea	 eax, DWORD PTR [eax-2]
  00195	4a		 dec	 edx
  00196	66 83 38 00	 cmp	 WORD PTR [eax], 0
  0019a	74 f6		 je	 SHORT $LL9@gen_bitlen
$LN8@gen_bitlen:

; 537  :         s->bl_count[bits]--;      /* move one leaf down the tree */
; 538  :         s->bl_count[bits+1] += 2; /* move one overflow item as its brother */

  0019c	66 83 84 51 3e
	0b 00 00 02	 add	 WORD PTR [ecx+edx*2+2878], 2
  001a5	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  001aa	66 01 84 51 3c
	0b 00 00	 add	 WORD PTR [ecx+edx*2+2876], ax

; 539  :         s->bl_count[max_length]--;

  001b2	66 01 07	 add	 WORD PTR [edi], ax

; 540  :         /* The brother of the overflow item also moves one step up,
; 541  :          * but this does not affect bl_count[max_length]
; 542  :          */
; 543  :         overflow -= 2;

  001b5	83 ee 02	 sub	 esi, 2

; 544  :     } while (overflow > 0);

  001b8	85 f6		 test	 esi, esi
  001ba	7f c4		 jg	 SHORT $LL12@gen_bitlen

; 545  : 
; 546  :     /* Now recompute all bit lengths, scanning in increasing frequency.
; 547  :      * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
; 548  :      * lengths instead of fixing only the wrong ones. This idea is taken
; 549  :      * from 'ar' written by Haruhiko Okumura.)
; 550  :      */
; 551  :     for (bits = max_length; bits != 0; bits--) {

  001bc	8b 75 f8	 mov	 esi, DWORD PTR _bits$3$[ebp]
  001bf	8b 5d f4	 mov	 ebx, DWORD PTR _h$1$[ebp]
  001c2	85 f6		 test	 esi, esi
  001c4	74 78		 je	 SHORT $LN5@gen_bitlen
$LL7@gen_bitlen:

; 552  :         n = s->bl_count[bits];

  001c6	0f b7 07	 movzx	 eax, WORD PTR [edi]

; 553  :         while (n != 0) {

  001c9	85 c0		 test	 eax, eax
  001cb	74 63		 je	 SHORT $LN6@gen_bitlen

; 552  :         n = s->bl_count[bits];

  001cd	8b 55 e8	 mov	 edx, DWORD PTR _max_code$1$[ebp]
  001d0	8d bb d7 02 00
	00		 lea	 edi, DWORD PTR [ebx+727]
  001d6	8d 3c b9	 lea	 edi, DWORD PTR [ecx+edi*4]
  001d9	8d a4 24 00 00
	00 00		 npad	 7
$LL4@gen_bitlen:

; 554  :             m = s->heap[--h];

  001e0	4b		 dec	 ebx
  001e1	8d 7f fc	 lea	 edi, DWORD PTR [edi-4]
  001e4	89 5d f4	 mov	 DWORD PTR _h$1$[ebp], ebx
  001e7	8b 1f		 mov	 ebx, DWORD PTR [edi]

; 555  :             if (m > max_code) continue;

  001e9	3b da		 cmp	 ebx, edx
  001eb	7f 39		 jg	 SHORT $LN36@gen_bitlen

; 556  :             if ((unsigned) tree[m].Len != (unsigned) bits) {

  001ed	8b 55 fc	 mov	 edx, DWORD PTR _tree$1$[ebp]
  001f0	0f b7 54 9a 02	 movzx	 edx, WORD PTR [edx+ebx*4+2]
  001f5	3b d6		 cmp	 edx, esi
  001f7	74 29		 je	 SHORT $LN1@gen_bitlen

; 557  :                 Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
; 558  :                 s->opt_len += ((long)bits - (long)tree[m].Len)
; 559  :                               *(long)tree[m].Freq;

  001f9	8b d6		 mov	 edx, esi
  001fb	8b 75 fc	 mov	 esi, DWORD PTR _tree$1$[ebp]
  001fe	0f b7 4c 9e 02	 movzx	 ecx, WORD PTR [esi+ebx*4+2]
  00203	2b d1		 sub	 edx, ecx
  00205	8b ce		 mov	 ecx, esi

; 560  :                 tree[m].Len = (ush)bits;

  00207	8b 75 f8	 mov	 esi, DWORD PTR _bits$3$[ebp]
  0020a	0f b7 0c 99	 movzx	 ecx, WORD PTR [ecx+ebx*4]
  0020e	0f af d1	 imul	 edx, ecx
  00211	8b 4d d4	 mov	 ecx, DWORD PTR _s$1$[ebp]
  00214	01 91 a8 16 00
	00		 add	 DWORD PTR [ecx+5800], edx
  0021a	8b 55 fc	 mov	 edx, DWORD PTR _tree$1$[ebp]
  0021d	66 89 74 9a 02	 mov	 WORD PTR [edx+ebx*4+2], si
$LN1@gen_bitlen:

; 561  :             }
; 562  :             n--;

  00222	8b 55 e8	 mov	 edx, DWORD PTR _max_code$1$[ebp]
  00225	48		 dec	 eax
$LN36@gen_bitlen:

; 553  :         while (n != 0) {

  00226	8b 5d f4	 mov	 ebx, DWORD PTR _h$1$[ebp]
  00229	85 c0		 test	 eax, eax
  0022b	75 b3		 jne	 SHORT $LL4@gen_bitlen
  0022d	8b 7d d8	 mov	 edi, DWORD PTR tv624[ebp]
$LN6@gen_bitlen:

; 545  : 
; 546  :     /* Now recompute all bit lengths, scanning in increasing frequency.
; 547  :      * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
; 548  :      * lengths instead of fixing only the wrong ones. This idea is taken
; 549  :      * from 'ar' written by Haruhiko Okumura.)
; 550  :      */
; 551  :     for (bits = max_length; bits != 0; bits--) {

  00230	4e		 dec	 esi
  00231	83 ef 02	 sub	 edi, 2
  00234	89 75 f8	 mov	 DWORD PTR _bits$3$[ebp], esi
  00237	89 7d d8	 mov	 DWORD PTR tv624[ebp], edi
  0023a	85 f6		 test	 esi, esi
  0023c	75 88		 jne	 SHORT $LL7@gen_bitlen
$LN5@gen_bitlen:
  0023e	5f		 pop	 edi
  0023f	5e		 pop	 esi
  00240	5b		 pop	 ebx

; 563  :         }
; 564  :     }
; 565  : }

  00241	8b e5		 mov	 esp, ebp
  00243	5d		 pop	 ebp
  00244	c3		 ret	 0
_gen_bitlen ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\trunk2012\contribs\windows\x86\zlib\zlib-1.2.8\trees.c
;	COMDAT _gen_codes
_TEXT	SEGMENT
_next_code$ = -36					; size = 32
_tree$1$ = -4						; size = 4
_bl_count$ = 8						; size = 4
_gen_codes PROC						; COMDAT
; _tree$ = ecx
; _max_code$ = edx

; 579  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b da		 mov	 ebx, edx

; 580  :     ush next_code[MAX_BITS+1]; /* next code value for each bit length */
; 581  :     ush code = 0;              /* running code value */
; 582  :     int bits;                  /* bit index */
; 583  :     int n;                     /* code index */
; 584  : 
; 585  :     /* The distribution counts are first used to generate the code values
; 586  :      * without bit reversal.
; 587  :      */
; 588  :     for (bits = 1; bits <= MAX_BITS; bits++) {

  0000a	8b 55 08	 mov	 edx, DWORD PTR _bl_count$[ebp]
  0000d	57		 push	 edi
  0000e	8d 45 de	 lea	 eax, DWORD PTR _next_code$[ebp+2]
  00011	33 ff		 xor	 edi, edi
  00013	89 4d fc	 mov	 DWORD PTR _tree$1$[ebp], ecx
  00016	be 01 00 00 00	 mov	 esi, 1
  0001b	2b d0		 sub	 edx, eax
  0001d	8d 49 00	 npad	 3
$LL7@gen_codes:
  00020	8d 04 72	 lea	 eax, DWORD PTR [edx+esi*2]
  00023	46		 inc	 esi

; 589  :         next_code[bits] = code = (code + bl_count[bits-1]) << 1;

  00024	66 8b 44 05 dc	 mov	 ax, WORD PTR _next_code$[ebp+eax]
  00029	66 03 c7	 add	 ax, di
  0002c	66 03 c0	 add	 ax, ax
  0002f	0f b7 f8	 movzx	 edi, ax
  00032	66 89 7c 75 da	 mov	 WORD PTR _next_code$[ebp+esi*2-2], di
  00037	83 fe 0f	 cmp	 esi, 15			; 0000000fH
  0003a	7e e4		 jle	 SHORT $LL7@gen_codes

; 590  :     }
; 591  :     /* Check that the bit counts in bl_count are consistent. The last code
; 592  :      * must be all ones.
; 593  :      */
; 594  :     Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
; 595  :             "inconsistent bit counts");
; 596  :     Tracev((stderr,"\ngen_codes: max_code %d ", max_code));
; 597  : 
; 598  :     for (n = 0;  n <= max_code; n++) {

  0003c	33 f6		 xor	 esi, esi
  0003e	85 db		 test	 ebx, ebx
  00040	78 27		 js	 SHORT $LN2@gen_codes
$LL4@gen_codes:

; 599  :         int len = tree[n].Len;

  00042	0f b7 54 b1 02	 movzx	 edx, WORD PTR [ecx+esi*4+2]

; 600  :         if (len == 0) continue;

  00047	85 d2		 test	 edx, edx
  00049	74 19		 je	 SHORT $LN3@gen_codes

; 601  :         /* Now reverse the bits */
; 602  :         tree[n].Code = bi_reverse(next_code[len]++, len);

  0004b	0f b7 44 55 dc	 movzx	 eax, WORD PTR _next_code$[ebp+edx*2]
  00050	8b c8		 mov	 ecx, eax
  00052	40		 inc	 eax
  00053	66 89 44 55 dc	 mov	 WORD PTR _next_code$[ebp+edx*2], ax
  00058	e8 00 00 00 00	 call	 _bi_reverse
  0005d	8b 4d fc	 mov	 ecx, DWORD PTR _tree$1$[ebp]
  00060	66 89 04 b1	 mov	 WORD PTR [ecx+esi*4], ax
$LN3@gen_codes:

; 590  :     }
; 591  :     /* Check that the bit counts in bl_count are consistent. The last code
; 592  :      * must be all ones.
; 593  :      */
; 594  :     Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
; 595  :             "inconsistent bit counts");
; 596  :     Tracev((stderr,"\ngen_codes: max_code %d ", max_code));
; 597  : 
; 598  :     for (n = 0;  n <= max_code; n++) {

  00064	46		 inc	 esi
  00065	3b f3		 cmp	 esi, ebx
  00067	7e d9		 jle	 SHORT $LL4@gen_codes
$LN2@gen_codes:
  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
  0006b	5b		 pop	 ebx

; 603  : 
; 604  :         Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
; 605  :              n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
; 606  :     }
; 607  : }

  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
_gen_codes ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\trunk2012\contribs\windows\x86\zlib\zlib-1.2.8\trees.c
;	COMDAT _build_tree
_TEXT	SEGMENT
tv503 = -16						; size = 4
_stree$1$ = -16						; size = 4
_desc$1$ = -12						; size = 4
_node$2$ = -8						; size = 4
_max_code$1$ = -4					; size = 4
_build_tree PROC					; COMDAT
; _s$ = ecx
; _desc$ = edx

; 620  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	8b c2		 mov	 eax, edx
  00008	53		 push	 ebx

; 621  :     ct_data *tree         = desc->dyn_tree;

  00009	8b 18		 mov	 ebx, DWORD PTR [eax]
  0000b	89 45 f4	 mov	 DWORD PTR _desc$1$[ebp], eax

; 622  :     const ct_data *stree  = desc->stat_desc->static_tree;

  0000e	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00011	56		 push	 esi
  00012	8b f1		 mov	 esi, ecx
  00014	8b 08		 mov	 ecx, DWORD PTR [eax]
  00016	57		 push	 edi

; 623  :     int elems             = desc->stat_desc->elems;

  00017	8b 78 0c	 mov	 edi, DWORD PTR [eax+12]
  0001a	89 4d f0	 mov	 DWORD PTR _stree$1$[ebp], ecx

; 624  :     int n, m;          /* iterate over heap elements */
; 625  :     int max_code = -1; /* largest code with non zero frequency */

  0001d	83 ca ff	 or	 edx, -1

; 626  :     int node;          /* new node being created */
; 627  : 
; 628  :     /* Construct the initial heap, with least frequent element in
; 629  :      * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
; 630  :      * heap[0] is not used.
; 631  :      */
; 632  :     s->heap_len = 0, s->heap_max = HEAP_SIZE;
; 633  : 
; 634  :     for (n = 0; n < elems; n++) {

  00020	33 c9		 xor	 ecx, ecx
  00022	89 7d f8	 mov	 DWORD PTR _node$2$[ebp], edi
  00025	89 55 fc	 mov	 DWORD PTR _max_code$1$[ebp], edx
  00028	c7 86 50 14 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5200], 0
  00032	c7 86 54 14 00
	00 3d 02 00 00	 mov	 DWORD PTR [esi+5204], 573 ; 0000023dH
  0003c	85 ff		 test	 edi, edi
  0003e	7e 35		 jle	 SHORT $LN22@build_tree
$LL14@build_tree:

; 635  :         if (tree[n].Freq != 0) {

  00040	66 83 3c 8b 00	 cmp	 WORD PTR [ebx+ecx*4], 0
  00045	74 1f		 je	 SHORT $LN11@build_tree

; 636  :             s->heap[++(s->heap_len)] = max_code = n;

  00047	ff 86 50 14 00
	00		 inc	 DWORD PTR [esi+5200]
  0004d	8b 86 50 14 00
	00		 mov	 eax, DWORD PTR [esi+5200]
  00053	8b d1		 mov	 edx, ecx
  00055	89 8c 86 5c 0b
	00 00		 mov	 DWORD PTR [esi+eax*4+2908], ecx

; 637  :             s->depth[n] = 0;

  0005c	c6 84 31 58 14
	00 00 00	 mov	 BYTE PTR [ecx+esi+5208], 0

; 638  :         } else {

  00064	eb 07		 jmp	 SHORT $LN13@build_tree
$LN11@build_tree:

; 639  :             tree[n].Len = 0;

  00066	33 c0		 xor	 eax, eax
  00068	66 89 44 8b 02	 mov	 WORD PTR [ebx+ecx*4+2], ax
$LN13@build_tree:

; 626  :     int node;          /* new node being created */
; 627  : 
; 628  :     /* Construct the initial heap, with least frequent element in
; 629  :      * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
; 630  :      * heap[0] is not used.
; 631  :      */
; 632  :     s->heap_len = 0, s->heap_max = HEAP_SIZE;
; 633  : 
; 634  :     for (n = 0; n < elems; n++) {

  0006d	41		 inc	 ecx
  0006e	3b cf		 cmp	 ecx, edi
  00070	7c ce		 jl	 SHORT $LL14@build_tree
  00072	89 55 fc	 mov	 DWORD PTR _max_code$1$[ebp], edx
$LN22@build_tree:

; 640  :         }
; 641  :     }
; 642  : 
; 643  :     /* The pkzip format requires that at least one distance code exists,
; 644  :      * and that at least one bit should be sent even if there is only one
; 645  :      * possible code. So to avoid special checks later on we force at least
; 646  :      * two codes of non zero frequency.
; 647  :      */
; 648  :     while (s->heap_len < 2) {

  00075	83 be 50 14 00
	00 02		 cmp	 DWORD PTR [esi+5200], 2
  0007c	7d 54		 jge	 SHORT $LN8@build_tree
  0007e	bf 01 00 00 00	 mov	 edi, 1
$LL9@build_tree:

; 649  :         node = s->heap[++(s->heap_len)] = (max_code < 2 ? ++max_code : 0);

  00083	83 fa 02	 cmp	 edx, 2
  00086	7d 05		 jge	 SHORT $LN17@build_tree
  00088	42		 inc	 edx
  00089	8b ca		 mov	 ecx, edx
  0008b	eb 02		 jmp	 SHORT $LN18@build_tree
$LN17@build_tree:
  0008d	33 c9		 xor	 ecx, ecx
$LN18@build_tree:
  0008f	ff 86 50 14 00
	00		 inc	 DWORD PTR [esi+5200]
  00095	8b 86 50 14 00
	00		 mov	 eax, DWORD PTR [esi+5200]
  0009b	89 8c 86 5c 0b
	00 00		 mov	 DWORD PTR [esi+eax*4+2908], ecx

; 650  :         tree[node].Freq = 1;
; 651  :         s->depth[node] = 0;
; 652  :         s->opt_len--; if (stree) s->static_len -= stree[node].Len;

  000a2	8b 45 f0	 mov	 eax, DWORD PTR _stree$1$[ebp]
  000a5	66 89 3c 8b	 mov	 WORD PTR [ebx+ecx*4], di
  000a9	c6 84 0e 58 14
	00 00 00	 mov	 BYTE PTR [esi+ecx+5208], 0
  000b1	ff 8e a8 16 00
	00		 dec	 DWORD PTR [esi+5800]
  000b7	85 c0		 test	 eax, eax
  000b9	74 0b		 je	 SHORT $LN7@build_tree
  000bb	0f b7 44 88 02	 movzx	 eax, WORD PTR [eax+ecx*4+2]
  000c0	29 86 ac 16 00
	00		 sub	 DWORD PTR [esi+5804], eax
$LN7@build_tree:

; 640  :         }
; 641  :     }
; 642  : 
; 643  :     /* The pkzip format requires that at least one distance code exists,
; 644  :      * and that at least one bit should be sent even if there is only one
; 645  :      * possible code. So to avoid special checks later on we force at least
; 646  :      * two codes of non zero frequency.
; 647  :      */
; 648  :     while (s->heap_len < 2) {

  000c6	83 be 50 14 00
	00 02		 cmp	 DWORD PTR [esi+5200], 2
  000cd	7c b4		 jl	 SHORT $LL9@build_tree
  000cf	89 55 fc	 mov	 DWORD PTR _max_code$1$[ebp], edx
$LN8@build_tree:

; 653  :         /* node is 0 or 1 so it does not have extra bits */
; 654  :     }
; 655  :     desc->max_code = max_code;

  000d2	8b 45 f4	 mov	 eax, DWORD PTR _desc$1$[ebp]
  000d5	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 656  : 
; 657  :     /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
; 658  :      * establish sub-heaps of increasing lengths:
; 659  :      */
; 660  :     for (n = s->heap_len/2; n >= 1; n--) pqdownheap(s, tree, n);

  000d8	8b 86 50 14 00
	00		 mov	 eax, DWORD PTR [esi+5200]
  000de	99		 cdq
  000df	2b c2		 sub	 eax, edx
  000e1	8b f8		 mov	 edi, eax
  000e3	d1 ff		 sar	 edi, 1
  000e5	83 ff 01	 cmp	 edi, 1
  000e8	7c 19		 jl	 SHORT $LL3@build_tree
  000ea	8d 9b 00 00 00
	00		 npad	 6
$LL6@build_tree:
  000f0	57		 push	 edi
  000f1	8b d3		 mov	 edx, ebx
  000f3	8b ce		 mov	 ecx, esi
  000f5	e8 00 00 00 00	 call	 _pqdownheap
  000fa	4f		 dec	 edi
  000fb	83 c4 04	 add	 esp, 4
  000fe	83 ff 01	 cmp	 edi, 1
  00101	7d ed		 jge	 SHORT $LL6@build_tree
$LL3@build_tree:

; 661  : 
; 662  :     /* Construct the Huffman tree by repeatedly combining the least two
; 663  :      * frequent nodes.
; 664  :      */
; 665  :     node = elems;              /* next internal node of the tree */
; 666  :     do {
; 667  :         pqremove(s, tree, n);  /* n = node of least frequency */

  00103	8b 86 50 14 00
	00		 mov	 eax, DWORD PTR [esi+5200]
  00109	8b be 60 0b 00
	00		 mov	 edi, DWORD PTR [esi+2912]
  0010f	8b 84 86 5c 0b
	00 00		 mov	 eax, DWORD PTR [esi+eax*4+2908]
  00116	89 86 60 0b 00
	00		 mov	 DWORD PTR [esi+2912], eax
  0011c	ff 8e 50 14 00
	00		 dec	 DWORD PTR [esi+5200]
  00122	6a 01		 push	 1
  00124	8b d3		 mov	 edx, ebx
  00126	8b ce		 mov	 ecx, esi
  00128	e8 00 00 00 00	 call	 _pqdownheap

; 668  :         m = s->heap[SMALLEST]; /* m = node of next least frequency */

  0012d	8b 8e 60 0b 00
	00		 mov	 ecx, DWORD PTR [esi+2912]

; 669  : 
; 670  :         s->heap[--(s->heap_max)] = n; /* keep the nodes sorted by frequency */

  00133	ff 8e 54 14 00
	00		 dec	 DWORD PTR [esi+5204]
  00139	8b 86 54 14 00
	00		 mov	 eax, DWORD PTR [esi+5204]

; 671  :         s->heap[--(s->heap_max)] = m;
; 672  : 
; 673  :         /* Create a new node father of n and m */
; 674  :         tree[node].Freq = tree[n].Freq + tree[m].Freq;

  0013f	8b 55 f8	 mov	 edx, DWORD PTR _node$2$[ebp]
  00142	89 bc 86 5c 0b
	00 00		 mov	 DWORD PTR [esi+eax*4+2908], edi
  00149	ff 8e 54 14 00
	00		 dec	 DWORD PTR [esi+5204]
  0014f	8b 86 54 14 00
	00		 mov	 eax, DWORD PTR [esi+5204]
  00155	83 c4 04	 add	 esp, 4
  00158	89 8c 86 5c 0b
	00 00		 mov	 DWORD PTR [esi+eax*4+2908], ecx
  0015f	8d 04 8b	 lea	 eax, DWORD PTR [ebx+ecx*4]
  00162	89 45 f0	 mov	 DWORD PTR tv503[ebp], eax
  00165	66 8b 00	 mov	 ax, WORD PTR [eax]
  00168	66 03 04 bb	 add	 ax, WORD PTR [ebx+edi*4]
  0016c	66 89 04 93	 mov	 WORD PTR [ebx+edx*4], ax

; 675  :         s->depth[node] = (uch)((s->depth[n] >= s->depth[m] ?
; 676  :                                 s->depth[n] : s->depth[m]) + 1);

  00170	8a 84 3e 58 14
	00 00		 mov	 al, BYTE PTR [esi+edi+5208]
  00177	8a 8c 0e 58 14
	00 00		 mov	 cl, BYTE PTR [esi+ecx+5208]
  0017e	3a c1		 cmp	 al, cl
  00180	0f b6 c0	 movzx	 eax, al
  00183	73 03		 jae	 SHORT $LN20@build_tree
  00185	0f b6 c1	 movzx	 eax, cl
$LN20@build_tree:

; 677  :         tree[n].Dad = tree[m].Dad = (ush)node;

  00188	8b 4d f0	 mov	 ecx, DWORD PTR tv503[ebp]
  0018b	fe c0		 inc	 al
  0018d	88 84 16 58 14
	00 00		 mov	 BYTE PTR [esi+edx+5208], al
  00194	0f b7 c2	 movzx	 eax, dx
  00197	66 89 41 02	 mov	 WORD PTR [ecx+2], ax
  0019b	66 89 44 bb 02	 mov	 WORD PTR [ebx+edi*4+2], ax

; 678  : #ifdef DUMP_BL_TREE
; 679  :         if (tree == s->bl_tree) {
; 680  :             fprintf(stderr,"\nnode %d(%d), sons %d(%d) %d(%d)",
; 681  :                     node, tree[node].Freq, n, tree[n].Freq, m, tree[m].Freq);
; 682  :         }
; 683  : #endif
; 684  :         /* and insert the new node in the heap */
; 685  :         s->heap[SMALLEST] = node++;

  001a0	89 96 60 0b 00
	00		 mov	 DWORD PTR [esi+2912], edx
  001a6	42		 inc	 edx
  001a7	89 55 f8	 mov	 DWORD PTR _node$2$[ebp], edx

; 686  :         pqdownheap(s, tree, SMALLEST);

  001aa	6a 01		 push	 1
  001ac	8b d3		 mov	 edx, ebx
  001ae	8b ce		 mov	 ecx, esi
  001b0	e8 00 00 00 00	 call	 _pqdownheap
  001b5	83 c4 04	 add	 esp, 4

; 687  : 
; 688  :     } while (s->heap_len >= 2);

  001b8	83 be 50 14 00
	00 02		 cmp	 DWORD PTR [esi+5200], 2
  001bf	0f 8d 3e ff ff
	ff		 jge	 $LL3@build_tree

; 689  : 
; 690  :     s->heap[--(s->heap_max)] = s->heap[SMALLEST];

  001c5	ff 8e 54 14 00
	00		 dec	 DWORD PTR [esi+5204]
  001cb	8b be 54 14 00
	00		 mov	 edi, DWORD PTR [esi+5204]
  001d1	8b 86 60 0b 00
	00		 mov	 eax, DWORD PTR [esi+2912]

; 691  : 
; 692  :     /* At this point, the fields freq and dad are set. We can now
; 693  :      * generate the bit lengths.
; 694  :      */
; 695  :     gen_bitlen(s, (tree_desc *)desc);

  001d7	8b 55 f4	 mov	 edx, DWORD PTR _desc$1$[ebp]
  001da	89 84 be 5c 0b
	00 00		 mov	 DWORD PTR [esi+edi*4+2908], eax
  001e1	e8 00 00 00 00	 call	 _gen_bitlen

; 696  : 
; 697  :     /* The field len is now set, we can generate the bit codes */
; 698  :     gen_codes ((ct_data *)tree, max_code, s->bl_count);

  001e6	8b 55 fc	 mov	 edx, DWORD PTR _max_code$1$[ebp]
  001e9	81 c6 3c 0b 00
	00		 add	 esi, 2876		; 00000b3cH
  001ef	56		 push	 esi
  001f0	8b cb		 mov	 ecx, ebx
  001f2	e8 00 00 00 00	 call	 _gen_codes
  001f7	83 c4 04	 add	 esp, 4
  001fa	5f		 pop	 edi
  001fb	5e		 pop	 esi
  001fc	5b		 pop	 ebx

; 699  : }

  001fd	8b e5		 mov	 esp, ebp
  001ff	5d		 pop	 ebp
  00200	c3		 ret	 0
_build_tree ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\trunk2012\contribs\windows\x86\zlib\zlib-1.2.8\trees.c
;	COMDAT _scan_tree
_TEXT	SEGMENT
_s$1$ = -12						; size = 4
_prevlen$1$ = -8					; size = 4
tv294 = -4						; size = 4
_tree$1$ = -4						; size = 4
tv301 = 8						; size = 4
_max_code$ = 8						; size = 4
_scan_tree PROC						; COMDAT
; _s$ = ecx
; _tree$ = edx

; 709  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	8b c2		 mov	 eax, edx
  00008	53		 push	 ebx

; 710  :     int n;                     /* iterates over all tree elements */
; 711  :     int prevlen = -1;          /* last emitted length */
; 712  :     int curlen;                /* length of current code */
; 713  :     int nextlen = tree[0].Len; /* length of next code */

  00009	0f b7 58 02	 movzx	 ebx, WORD PTR [eax+2]
  0000d	56		 push	 esi

; 714  :     int count = 0;             /* repeat count of the current code */

  0000e	33 f6		 xor	 esi, esi
  00010	57		 push	 edi
  00011	89 45 fc	 mov	 DWORD PTR _tree$1$[ebp], eax
  00014	89 4d f4	 mov	 DWORD PTR _s$1$[ebp], ecx
  00017	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _prevlen$1$[ebp], -1

; 715  :     int max_count = 7;         /* max repeat count */

  0001e	8d 56 07	 lea	 edx, DWORD PTR [esi+7]

; 716  :     int min_count = 4;         /* min repeat count */

  00021	8d 7e 04	 lea	 edi, DWORD PTR [esi+4]

; 717  : 
; 718  :     if (nextlen == 0) max_count = 138, min_count = 3;

  00024	85 db		 test	 ebx, ebx
  00026	75 08		 jne	 SHORT $LN17@scan_tree
  00028	ba 8a 00 00 00	 mov	 edx, 138		; 0000008aH
  0002d	8d 7e 03	 lea	 edi, DWORD PTR [esi+3]
$LN17@scan_tree:

; 719  :     tree[max_code+1].Len = (ush)0xffff; /* guard */

  00030	8b 45 08	 mov	 eax, DWORD PTR _max_code$[ebp]
  00033	8b 4d fc	 mov	 ecx, DWORD PTR _tree$1$[ebp]
  00036	be ff ff 00 00	 mov	 esi, 65535		; 0000ffffH
  0003b	66 89 74 81 06	 mov	 WORD PTR [ecx+eax*4+6], si

; 720  : 
; 721  :     for (n = 0; n <= max_code; n++) {

  00040	8b 4d f4	 mov	 ecx, DWORD PTR _s$1$[ebp]
  00043	be 00 00 00 00	 mov	 esi, 0
  00048	85 c0		 test	 eax, eax
  0004a	0f 88 90 00 00
	00		 js	 $LN14@scan_tree

; 719  :     tree[max_code+1].Len = (ush)0xffff; /* guard */

  00050	8b 45 fc	 mov	 eax, DWORD PTR _tree$1$[ebp]
  00053	83 c0 06	 add	 eax, 6
  00056	89 45 fc	 mov	 DWORD PTR tv294[ebp], eax
  00059	8b 45 08	 mov	 eax, DWORD PTR _max_code$[ebp]
  0005c	40		 inc	 eax
  0005d	89 45 08	 mov	 DWORD PTR tv301[ebp], eax
$LL16@scan_tree:

; 722  :         curlen = nextlen; nextlen = tree[n+1].Len;

  00060	8b c3		 mov	 eax, ebx
  00062	8b 5d fc	 mov	 ebx, DWORD PTR tv294[ebp]

; 723  :         if (++count < max_count && curlen == nextlen) {

  00065	46		 inc	 esi
  00066	0f b7 1b	 movzx	 ebx, WORD PTR [ebx]
  00069	3b f2		 cmp	 esi, edx
  0006b	7d 04		 jge	 SHORT $LN13@scan_tree
  0006d	3b c3		 cmp	 eax, ebx
  0006f	74 66		 je	 SHORT $LN15@scan_tree
$LN13@scan_tree:

; 724  :             continue;
; 725  :         } else if (count < min_count) {

  00071	3b f7		 cmp	 esi, edi
  00073	7d 0a		 jge	 SHORT $LN11@scan_tree

; 726  :             s->bl_tree[curlen].Freq += count;

  00075	66 01 b4 81 7c
	0a 00 00	 add	 WORD PTR [ecx+eax*4+2684], si
  0007d	eb 2f		 jmp	 SHORT $LN5@scan_tree
$LN11@scan_tree:

; 727  :         } else if (curlen != 0) {

  0007f	85 c0		 test	 eax, eax
  00081	74 16		 je	 SHORT $LN9@scan_tree

; 728  :             if (curlen != prevlen) s->bl_tree[curlen].Freq++;

  00083	3b 45 f8	 cmp	 eax, DWORD PTR _prevlen$1$[ebp]
  00086	74 08		 je	 SHORT $LN8@scan_tree
  00088	66 ff 84 81 7c
	0a 00 00	 inc	 WORD PTR [ecx+eax*4+2684]
$LN8@scan_tree:

; 729  :             s->bl_tree[REP_3_6].Freq++;

  00090	66 ff 81 bc 0a
	00 00		 inc	 WORD PTR [ecx+2748]
  00097	eb 15		 jmp	 SHORT $LN5@scan_tree
$LN9@scan_tree:

; 730  :         } else if (count <= 10) {

  00099	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  0009c	7f 09		 jg	 SHORT $LN6@scan_tree

; 731  :             s->bl_tree[REPZ_3_10].Freq++;

  0009e	66 ff 81 c0 0a
	00 00		 inc	 WORD PTR [ecx+2752]

; 732  :         } else {

  000a5	eb 07		 jmp	 SHORT $LN5@scan_tree
$LN6@scan_tree:

; 733  :             s->bl_tree[REPZ_11_138].Freq++;

  000a7	66 ff 81 c4 0a
	00 00		 inc	 WORD PTR [ecx+2756]
$LN5@scan_tree:

; 734  :         }
; 735  :         count = 0; prevlen = curlen;

  000ae	33 f6		 xor	 esi, esi
  000b0	89 45 f8	 mov	 DWORD PTR _prevlen$1$[ebp], eax

; 736  :         if (nextlen == 0) {

  000b3	85 db		 test	 ebx, ebx
  000b5	75 0a		 jne	 SHORT $LN4@scan_tree

; 737  :             max_count = 138, min_count = 3;

  000b7	ba 8a 00 00 00	 mov	 edx, 138		; 0000008aH
  000bc	8d 7e 03	 lea	 edi, DWORD PTR [esi+3]
  000bf	eb 16		 jmp	 SHORT $LN15@scan_tree
$LN4@scan_tree:

; 738  :         } else if (curlen == nextlen) {

  000c1	3b c3		 cmp	 eax, ebx
  000c3	75 0a		 jne	 SHORT $LN2@scan_tree

; 739  :             max_count = 6, min_count = 3;

  000c5	ba 06 00 00 00	 mov	 edx, 6
  000ca	8d 7a fd	 lea	 edi, DWORD PTR [edx-3]

; 740  :         } else {

  000cd	eb 08		 jmp	 SHORT $LN15@scan_tree
$LN2@scan_tree:

; 741  :             max_count = 7, min_count = 4;

  000cf	ba 07 00 00 00	 mov	 edx, 7
  000d4	8d 7a fd	 lea	 edi, DWORD PTR [edx-3]
$LN15@scan_tree:

; 720  : 
; 721  :     for (n = 0; n <= max_code; n++) {

  000d7	83 45 fc 04	 add	 DWORD PTR tv294[ebp], 4
  000db	ff 4d 08	 dec	 DWORD PTR tv301[ebp]
  000de	75 80		 jne	 SHORT $LL16@scan_tree
$LN14@scan_tree:
  000e0	5f		 pop	 edi
  000e1	5e		 pop	 esi
  000e2	5b		 pop	 ebx

; 742  :         }
; 743  :     }
; 744  : }

  000e3	8b e5		 mov	 esp, ebp
  000e5	5d		 pop	 ebp
  000e6	c3		 ret	 0
_scan_tree ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\trunk2012\contribs\windows\x86\zlib\zlib-1.2.8\trees.c
;	COMDAT _send_tree
_TEXT	SEGMENT
tv1183 = -28						; size = 4
_len$1$ = -28						; size = 4
_len$1$ = -28						; size = 4
_len$1$ = -28						; size = 4
_len$1$ = -28						; size = 4
tv1161 = -24						; size = 4
_len$1$ = -20						; size = 4
tv1184 = -16						; size = 4
_tree$1$ = -16						; size = 4
_curlen$1$ = -12					; size = 4
_s$1$ = -8						; size = 4
tv1130 = -4						; size = 4
_nextlen$1$ = 8						; size = 4
_max_code$ = 8						; size = 4
_send_tree PROC						; COMDAT
; _s$ = ecx
; _tree$ = edx

; 754  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	53		 push	 ebx
  00007	8b da		 mov	 ebx, edx
  00009	89 4d f8	 mov	 DWORD PTR _s$1$[ebp], ecx

; 755  :     int n;                     /* iterates over all tree elements */
; 756  :     int prevlen = -1;          /* last emitted length */
; 757  :     int curlen;                /* length of current code */
; 758  :     int nextlen = tree[0].Len; /* length of next code */

  0000c	0f b7 4b 02	 movzx	 ecx, WORD PTR [ebx+2]
  00010	83 ca ff	 or	 edx, -1
  00013	56		 push	 esi
  00014	89 5d f0	 mov	 DWORD PTR _tree$1$[ebp], ebx

; 759  :     int count = 0;             /* repeat count of the current code */

  00017	33 db		 xor	 ebx, ebx
  00019	57		 push	 edi

; 760  :     int max_count = 7;         /* max repeat count */

  0001a	8d 7a 08	 lea	 edi, DWORD PTR [edx+8]

; 761  :     int min_count = 4;         /* min repeat count */

  0001d	8d 72 05	 lea	 esi, DWORD PTR [edx+5]

; 762  : 
; 763  :     /* tree[max_code+1].Len = -1; */  /* guard already set */
; 764  :     if (nextlen == 0) max_count = 138, min_count = 3;

  00020	85 c9		 test	 ecx, ecx
  00022	75 08		 jne	 SHORT $LN36@send_tree
  00024	bf 8a 00 00 00	 mov	 edi, 138		; 0000008aH
  00029	8d 72 04	 lea	 esi, DWORD PTR [edx+4]
$LN36@send_tree:

; 765  : 
; 766  :     for (n = 0; n <= max_code; n++) {

  0002c	39 5d 08	 cmp	 DWORD PTR _max_code$[ebp], ebx
  0002f	0f 8c b4 04 00
	00		 jl	 $LN33@send_tree
  00035	8b 45 f0	 mov	 eax, DWORD PTR _tree$1$[ebp]
  00038	83 c0 06	 add	 eax, 6
  0003b	89 45 fc	 mov	 DWORD PTR tv1130[ebp], eax
  0003e	8b 45 08	 mov	 eax, DWORD PTR _max_code$[ebp]
  00041	40		 inc	 eax
  00042	89 45 f0	 mov	 DWORD PTR tv1184[ebp], eax
$LL35@send_tree:

; 767  :         curlen = nextlen; nextlen = tree[n+1].Len;

  00045	8b 45 fc	 mov	 eax, DWORD PTR tv1130[ebp]
  00048	89 4d f4	 mov	 DWORD PTR _curlen$1$[ebp], ecx
  0004b	0f b7 08	 movzx	 ecx, WORD PTR [eax]

; 768  :         if (++count < max_count && curlen == nextlen) {

  0004e	8b 45 f8	 mov	 eax, DWORD PTR _s$1$[ebp]
  00051	43		 inc	 ebx
  00052	89 4d 08	 mov	 DWORD PTR _nextlen$1$[ebp], ecx
  00055	8b 4d f4	 mov	 ecx, DWORD PTR _curlen$1$[ebp]
  00058	3b df		 cmp	 ebx, edi
  0005a	7d 09		 jge	 SHORT $LN32@send_tree
  0005c	3b 4d 08	 cmp	 ecx, DWORD PTR _nextlen$1$[ebp]
  0005f	0f 84 74 04 00
	00		 je	 $LN34@send_tree
$LN32@send_tree:

; 769  :             continue;
; 770  :         } else if (count < min_count) {

  00065	3b de		 cmp	 ebx, esi
  00067	0f 8d b5 00 00
	00		 jge	 $LN30@send_tree
  0006d	8d b9 9f 02 00
	00		 lea	 edi, DWORD PTR [ecx+671]
  00073	8d 14 8d 7e 0a
	00 00		 lea	 edx, DWORD PTR [ecx*4+2686]
  0007a	03 d0		 add	 edx, eax
  0007c	8d 3c b8	 lea	 edi, DWORD PTR [eax+edi*4]
  0007f	89 55 e4	 mov	 DWORD PTR tv1183[ebp], edx
  00082	89 7d e8	 mov	 DWORD PTR tv1161[ebp], edi
  00085	eb 09 8d a4 24
	00 00 00 00 8b
	ff		 npad	 11
$LL29@send_tree:

; 771  :             do { send_code(s, curlen, s->bl_tree); } while (--count != 0);

  00090	0f b7 32	 movzx	 esi, WORD PTR [edx]
  00093	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00099	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0009e	2b d6		 sub	 edx, esi
  000a0	89 75 ec	 mov	 DWORD PTR _len$1$[ebp], esi
  000a3	3b ca		 cmp	 ecx, edx
  000a5	7e 57		 jle	 SHORT $LN26@send_tree
  000a7	0f b7 3f	 movzx	 edi, WORD PTR [edi]
  000aa	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  000ad	66 8b d7	 mov	 dx, di
  000b0	66 d3 e2	 shl	 dx, cl
  000b3	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  000ba	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  000bd	0f b6 88 b8 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5816]
  000c4	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  000c7	ff 40 14	 inc	 DWORD PTR [eax+20]
  000ca	0f b6 88 b9 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5817]
  000d1	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  000d4	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000d7	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  000da	8b 90 bc 16 00
	00		 mov	 edx, DWORD PTR [eax+5820]
  000e0	ff 40 14	 inc	 DWORD PTR [eax+20]
  000e3	b1 10		 mov	 cl, 16			; 00000010H
  000e5	2a ca		 sub	 cl, dl
  000e7	66 d3 ef	 shr	 di, cl
  000ea	8b 4d ec	 mov	 ecx, DWORD PTR _len$1$[ebp]
  000ed	83 c1 f0	 add	 ecx, -16		; fffffff0H
  000f0	03 ca		 add	 ecx, edx
  000f2	66 89 b8 b8 16
	00 00		 mov	 WORD PTR [eax+5816], di
  000f9	8b 7d e8	 mov	 edi, DWORD PTR tv1161[ebp]
  000fc	eb 0f		 jmp	 SHORT $LN44@send_tree
$LN26@send_tree:
  000fe	66 8b 17	 mov	 dx, WORD PTR [edi]
  00101	66 d3 e2	 shl	 dx, cl
  00104	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  0010b	03 ce		 add	 ecx, esi
$LN44@send_tree:
  0010d	8b 55 e4	 mov	 edx, DWORD PTR tv1183[ebp]
  00110	89 88 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ecx
  00116	4b		 dec	 ebx
  00117	0f 85 73 ff ff
	ff		 jne	 $LL29@send_tree

; 772  : 
; 773  :         } else if (curlen != 0) {

  0011d	e9 89 03 00 00	 jmp	 $LN5@send_tree
$LN30@send_tree:
  00122	85 c9		 test	 ecx, ecx
  00124	0f 84 95 01 00
	00		 je	 $LN23@send_tree

; 774  :             if (curlen != prevlen) {

  0012a	3b ca		 cmp	 ecx, edx
  0012c	0f 84 95 00 00
	00		 je	 $LN22@send_tree

; 775  :                 send_code(s, curlen, s->bl_tree); count--;

  00132	0f b7 bc 88 7e
	0a 00 00	 movzx	 edi, WORD PTR [eax+ecx*4+2686]
  0013a	8b b0 bc 16 00
	00		 mov	 esi, DWORD PTR [eax+5820]
  00140	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00145	2b d7		 sub	 edx, edi
  00147	89 7d e4	 mov	 DWORD PTR _len$1$[ebp], edi
  0014a	3b f2		 cmp	 esi, edx
  0014c	7e 5b		 jle	 SHORT $LN21@send_tree
  0014e	0f b7 bc 88 7c
	0a 00 00	 movzx	 edi, WORD PTR [eax+ecx*4+2684]
  00156	8b ce		 mov	 ecx, esi
  00158	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  0015b	66 8b d7	 mov	 dx, di
  0015e	66 d3 e2	 shl	 dx, cl
  00161	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  00168	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  0016b	0f b6 88 b8 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5816]
  00172	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  00175	ff 40 14	 inc	 DWORD PTR [eax+20]
  00178	0f b6 88 b9 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5817]
  0017f	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  00182	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00185	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  00188	8b 90 bc 16 00
	00		 mov	 edx, DWORD PTR [eax+5820]
  0018e	ff 40 14	 inc	 DWORD PTR [eax+20]
  00191	b1 10		 mov	 cl, 16			; 00000010H
  00193	2a ca		 sub	 cl, dl
  00195	66 d3 ef	 shr	 di, cl
  00198	8b 4d e4	 mov	 ecx, DWORD PTR _len$1$[ebp]
  0019b	83 c1 f0	 add	 ecx, -16		; fffffff0H
  0019e	03 ca		 add	 ecx, edx
  001a0	66 89 b8 b8 16
	00 00		 mov	 WORD PTR [eax+5816], di
  001a7	eb 17		 jmp	 SHORT $LN45@send_tree
$LN21@send_tree:
  001a9	66 8b 94 88 7c
	0a 00 00	 mov	 dx, WORD PTR [eax+ecx*4+2684]
  001b1	8b ce		 mov	 ecx, esi
  001b3	66 d3 e2	 shl	 dx, cl
  001b6	8d 0c 3e	 lea	 ecx, DWORD PTR [esi+edi]
  001b9	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
$LN45@send_tree:
  001c0	89 88 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ecx
  001c6	4b		 dec	 ebx
$LN22@send_tree:

; 776  :             }
; 777  :             Assert(count >= 3 && count <= 6, " 3_6?");
; 778  :             send_code(s, REP_3_6, s->bl_tree); send_bits(s, count-3, 2);

  001c7	0f b7 b0 be 0a
	00 00		 movzx	 esi, WORD PTR [eax+2750]
  001ce	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  001d4	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  001d9	2b d6		 sub	 edx, esi
  001db	89 75 e4	 mov	 DWORD PTR _len$1$[ebp], esi
  001de	3b ca		 cmp	 ecx, edx
  001e0	7e 58		 jle	 SHORT $LN19@send_tree
  001e2	0f b7 b8 bc 0a
	00 00		 movzx	 edi, WORD PTR [eax+2748]
  001e9	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  001ec	66 8b d7	 mov	 dx, di
  001ef	66 d3 e2	 shl	 dx, cl
  001f2	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  001f9	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  001fc	0f b6 88 b8 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5816]
  00203	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  00206	ff 40 14	 inc	 DWORD PTR [eax+20]
  00209	0f b6 88 b9 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5817]
  00210	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  00213	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00216	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  00219	8b 90 bc 16 00
	00		 mov	 edx, DWORD PTR [eax+5820]
  0021f	ff 40 14	 inc	 DWORD PTR [eax+20]
  00222	b1 10		 mov	 cl, 16			; 00000010H
  00224	2a ca		 sub	 cl, dl
  00226	66 d3 ef	 shr	 di, cl
  00229	8b 4d e4	 mov	 ecx, DWORD PTR _len$1$[ebp]
  0022c	83 c1 f0	 add	 ecx, -16		; fffffff0H
  0022f	03 ca		 add	 ecx, edx
  00231	66 89 b8 b8 16
	00 00		 mov	 WORD PTR [eax+5816], di
  00238	eb 13		 jmp	 SHORT $LN46@send_tree
$LN19@send_tree:
  0023a	66 8b 90 bc 0a
	00 00		 mov	 dx, WORD PTR [eax+2748]
  00241	66 d3 e2	 shl	 dx, cl
  00244	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  0024b	03 ce		 add	 ecx, esi
$LN46@send_tree:
  0024d	89 88 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ecx
  00253	83 f9 0e	 cmp	 ecx, 14			; 0000000eH
  00256	7e 52		 jle	 SHORT $LN17@send_tree
  00258	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  0025b	8d 7b fd	 lea	 edi, DWORD PTR [ebx-3]
  0025e	66 8b d7	 mov	 dx, di
  00261	66 d3 e2	 shl	 dx, cl
  00264	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  0026b	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  0026e	0f b6 88 b8 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5816]
  00275	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  00278	ff 40 14	 inc	 DWORD PTR [eax+20]
  0027b	0f b6 88 b9 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5817]
  00282	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  00285	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00288	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  0028b	8b 90 bc 16 00
	00		 mov	 edx, DWORD PTR [eax+5820]
  00291	ff 40 14	 inc	 DWORD PTR [eax+20]
  00294	b1 10		 mov	 cl, 16			; 00000010H
  00296	2a ca		 sub	 cl, dl
  00298	66 d3 ef	 shr	 di, cl
  0029b	8d 4a f2	 lea	 ecx, DWORD PTR [edx-14]
  0029e	66 89 b8 b8 16
	00 00		 mov	 WORD PTR [eax+5816], di
  002a5	e9 fb 01 00 00	 jmp	 $LN47@send_tree
$LN17@send_tree:
  002aa	8d 53 fd	 lea	 edx, DWORD PTR [ebx-3]
  002ad	66 d3 e2	 shl	 dx, cl
  002b0	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  002b7	83 c1 02	 add	 ecx, 2
  002ba	e9 e6 01 00 00	 jmp	 $LN47@send_tree
$LN23@send_tree:

; 779  : 
; 780  :         } else if (count <= 10) {
; 781  :             send_code(s, REPZ_3_10, s->bl_tree); send_bits(s, count-3, 3);

  002bf	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  002c5	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  002ca	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  002cd	0f 8f ed 00 00
	00		 jg	 $LN14@send_tree
  002d3	0f b7 b0 c2 0a
	00 00		 movzx	 esi, WORD PTR [eax+2754]
  002da	2b d6		 sub	 edx, esi
  002dc	89 75 e4	 mov	 DWORD PTR _len$1$[ebp], esi
  002df	3b ca		 cmp	 ecx, edx
  002e1	7e 58		 jle	 SHORT $LN13@send_tree
  002e3	0f b7 b8 c0 0a
	00 00		 movzx	 edi, WORD PTR [eax+2752]
  002ea	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  002ed	66 8b d7	 mov	 dx, di
  002f0	66 d3 e2	 shl	 dx, cl
  002f3	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  002fa	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  002fd	0f b6 88 b8 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5816]
  00304	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  00307	ff 40 14	 inc	 DWORD PTR [eax+20]
  0030a	0f b6 88 b9 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5817]
  00311	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  00314	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00317	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  0031a	8b 90 bc 16 00
	00		 mov	 edx, DWORD PTR [eax+5820]
  00320	ff 40 14	 inc	 DWORD PTR [eax+20]
  00323	b1 10		 mov	 cl, 16			; 00000010H
  00325	2a ca		 sub	 cl, dl
  00327	66 d3 ef	 shr	 di, cl
  0032a	8b 4d e4	 mov	 ecx, DWORD PTR _len$1$[ebp]
  0032d	83 c1 f0	 add	 ecx, -16		; fffffff0H
  00330	03 ca		 add	 ecx, edx
  00332	66 89 b8 b8 16
	00 00		 mov	 WORD PTR [eax+5816], di
  00339	eb 13		 jmp	 SHORT $LN48@send_tree
$LN13@send_tree:
  0033b	66 8b 90 c0 0a
	00 00		 mov	 dx, WORD PTR [eax+2752]
  00342	66 d3 e2	 shl	 dx, cl
  00345	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  0034c	03 ce		 add	 ecx, esi
$LN48@send_tree:
  0034e	89 88 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ecx
  00354	83 f9 0d	 cmp	 ecx, 13			; 0000000dH
  00357	7e 52		 jle	 SHORT $LN11@send_tree
  00359	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  0035c	8d 7b fd	 lea	 edi, DWORD PTR [ebx-3]
  0035f	66 8b d7	 mov	 dx, di
  00362	66 d3 e2	 shl	 dx, cl
  00365	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  0036c	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  0036f	0f b6 88 b8 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5816]
  00376	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  00379	ff 40 14	 inc	 DWORD PTR [eax+20]
  0037c	0f b6 88 b9 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5817]
  00383	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  00386	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00389	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  0038c	8b 90 bc 16 00
	00		 mov	 edx, DWORD PTR [eax+5820]
  00392	ff 40 14	 inc	 DWORD PTR [eax+20]
  00395	b1 10		 mov	 cl, 16			; 00000010H
  00397	2a ca		 sub	 cl, dl
  00399	66 d3 ef	 shr	 di, cl
  0039c	8d 4a f3	 lea	 ecx, DWORD PTR [edx-13]
  0039f	66 89 b8 b8 16
	00 00		 mov	 WORD PTR [eax+5816], di
  003a6	e9 fa 00 00 00	 jmp	 $LN47@send_tree
$LN11@send_tree:
  003ab	8d 53 fd	 lea	 edx, DWORD PTR [ebx-3]
  003ae	66 d3 e2	 shl	 dx, cl
  003b1	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  003b8	83 c1 03	 add	 ecx, 3

; 782  : 
; 783  :         } else {

  003bb	e9 e5 00 00 00	 jmp	 $LN47@send_tree
$LN14@send_tree:

; 784  :             send_code(s, REPZ_11_138, s->bl_tree); send_bits(s, count-11, 7);

  003c0	0f b7 b0 c6 0a
	00 00		 movzx	 esi, WORD PTR [eax+2758]
  003c7	2b d6		 sub	 edx, esi
  003c9	89 75 e4	 mov	 DWORD PTR _len$1$[ebp], esi
  003cc	3b ca		 cmp	 ecx, edx
  003ce	7e 58		 jle	 SHORT $LN8@send_tree
  003d0	0f b7 b8 c4 0a
	00 00		 movzx	 edi, WORD PTR [eax+2756]
  003d7	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  003da	66 8b d7	 mov	 dx, di
  003dd	66 d3 e2	 shl	 dx, cl
  003e0	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  003e7	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  003ea	0f b6 88 b8 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5816]
  003f1	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  003f4	ff 40 14	 inc	 DWORD PTR [eax+20]
  003f7	0f b6 88 b9 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5817]
  003fe	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  00401	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00404	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  00407	8b 90 bc 16 00
	00		 mov	 edx, DWORD PTR [eax+5820]
  0040d	ff 40 14	 inc	 DWORD PTR [eax+20]
  00410	b1 10		 mov	 cl, 16			; 00000010H
  00412	2a ca		 sub	 cl, dl
  00414	66 d3 ef	 shr	 di, cl
  00417	8b 4d e4	 mov	 ecx, DWORD PTR _len$1$[ebp]
  0041a	83 c1 f0	 add	 ecx, -16		; fffffff0H
  0041d	03 ca		 add	 ecx, edx
  0041f	66 89 b8 b8 16
	00 00		 mov	 WORD PTR [eax+5816], di
  00426	eb 13		 jmp	 SHORT $LN49@send_tree
$LN8@send_tree:
  00428	66 8b 90 c4 0a
	00 00		 mov	 dx, WORD PTR [eax+2756]
  0042f	66 d3 e2	 shl	 dx, cl
  00432	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  00439	03 ce		 add	 ecx, esi
$LN49@send_tree:
  0043b	89 88 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ecx
  00441	83 f9 09	 cmp	 ecx, 9
  00444	7e 4f		 jle	 SHORT $LN6@send_tree
  00446	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  00449	8d 7b f5	 lea	 edi, DWORD PTR [ebx-11]
  0044c	66 8b d7	 mov	 dx, di
  0044f	66 d3 e2	 shl	 dx, cl
  00452	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  00459	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  0045c	0f b6 88 b8 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5816]
  00463	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  00466	ff 40 14	 inc	 DWORD PTR [eax+20]
  00469	0f b6 88 b9 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5817]
  00470	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  00473	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00476	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  00479	8b 90 bc 16 00
	00		 mov	 edx, DWORD PTR [eax+5820]
  0047f	ff 40 14	 inc	 DWORD PTR [eax+20]
  00482	b1 10		 mov	 cl, 16			; 00000010H
  00484	2a ca		 sub	 cl, dl
  00486	66 d3 ef	 shr	 di, cl
  00489	8d 4a f7	 lea	 ecx, DWORD PTR [edx-9]
  0048c	66 89 b8 b8 16
	00 00		 mov	 WORD PTR [eax+5816], di
  00493	eb 10		 jmp	 SHORT $LN47@send_tree
$LN6@send_tree:
  00495	8d 53 f5	 lea	 edx, DWORD PTR [ebx-11]
  00498	66 d3 e2	 shl	 dx, cl
  0049b	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  004a2	83 c1 07	 add	 ecx, 7
$LN47@send_tree:
  004a5	89 88 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ecx
$LN5@send_tree:

; 785  :         }
; 786  :         count = 0; prevlen = curlen;
; 787  :         if (nextlen == 0) {

  004ab	8b 75 08	 mov	 esi, DWORD PTR _nextlen$1$[ebp]
  004ae	8b 4d f4	 mov	 ecx, DWORD PTR _curlen$1$[ebp]
  004b1	33 db		 xor	 ebx, ebx
  004b3	8b d1		 mov	 edx, ecx
  004b5	85 f6		 test	 esi, esi
  004b7	75 0a		 jne	 SHORT $LN4@send_tree

; 788  :             max_count = 138, min_count = 3;

  004b9	bf 8a 00 00 00	 mov	 edi, 138		; 0000008aH
  004be	8d 73 03	 lea	 esi, DWORD PTR [ebx+3]
  004c1	eb 16		 jmp	 SHORT $LN34@send_tree
$LN4@send_tree:

; 789  :         } else if (curlen == nextlen) {

  004c3	3b ce		 cmp	 ecx, esi
  004c5	75 0a		 jne	 SHORT $LN2@send_tree

; 790  :             max_count = 6, min_count = 3;

  004c7	bf 06 00 00 00	 mov	 edi, 6
  004cc	8d 77 fd	 lea	 esi, DWORD PTR [edi-3]

; 791  :         } else {

  004cf	eb 08		 jmp	 SHORT $LN34@send_tree
$LN2@send_tree:

; 792  :             max_count = 7, min_count = 4;

  004d1	bf 07 00 00 00	 mov	 edi, 7
  004d6	8d 77 fd	 lea	 esi, DWORD PTR [edi-3]
$LN34@send_tree:

; 765  : 
; 766  :     for (n = 0; n <= max_code; n++) {

  004d9	83 45 fc 04	 add	 DWORD PTR tv1130[ebp], 4
  004dd	ff 4d f0	 dec	 DWORD PTR tv1184[ebp]
  004e0	8b 4d 08	 mov	 ecx, DWORD PTR _nextlen$1$[ebp]
  004e3	0f 85 5c fb ff
	ff		 jne	 $LL35@send_tree
$LN33@send_tree:
  004e9	5f		 pop	 edi
  004ea	5e		 pop	 esi
  004eb	5b		 pop	 ebx

; 793  :         }
; 794  :     }
; 795  : }

  004ec	8b e5		 mov	 esp, ebp
  004ee	5d		 pop	 ebp
  004ef	c3		 ret	 0
_send_tree ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\trunk2012\contribs\windows\x86\zlib\zlib-1.2.8\trees.c
;	COMDAT _build_bl_tree
_TEXT	SEGMENT
_build_bl_tree PROC					; COMDAT
; _s$ = ecx

; 803  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 804  :     int max_blindex;  /* index of last bit length code of non zero freq */
; 805  : 
; 806  :     /* Determine the bit length frequencies for literal and distance trees */
; 807  :     scan_tree(s, (ct_data *)s->dyn_ltree, s->l_desc.max_code);

  00003	ff b6 1c 0b 00
	00		 push	 DWORD PTR [esi+2844]
  00009	8d 96 94 00 00
	00		 lea	 edx, DWORD PTR [esi+148]
  0000f	e8 00 00 00 00	 call	 _scan_tree

; 808  :     scan_tree(s, (ct_data *)s->dyn_dtree, s->d_desc.max_code);

  00014	ff b6 28 0b 00
	00		 push	 DWORD PTR [esi+2856]
  0001a	8d 96 88 09 00
	00		 lea	 edx, DWORD PTR [esi+2440]
  00020	8b ce		 mov	 ecx, esi
  00022	e8 00 00 00 00	 call	 _scan_tree
  00027	83 c4 08	 add	 esp, 8

; 809  : 
; 810  :     /* Build the bit length tree: */
; 811  :     build_tree(s, (tree_desc *)(&(s->bl_desc)));

  0002a	8d 96 30 0b 00
	00		 lea	 edx, DWORD PTR [esi+2864]
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 _build_tree

; 812  :     /* opt_len now includes the length of the tree representations, except
; 813  :      * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
; 814  :      */
; 815  : 
; 816  :     /* Determine the number of bit length codes to send. The pkzip format
; 817  :      * requires that at least 4 bit length codes be sent. (appnote.txt says
; 818  :      * 3 but the actual value used is 4.)
; 819  :      */
; 820  :     for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {

  00037	b8 12 00 00 00	 mov	 eax, 18			; 00000012H
  0003c	8d 64 24 00	 npad	 4
$LL4@build_bl_t:

; 821  :         if (s->bl_tree[bl_order[max_blindex]].Len != 0) break;

  00040	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _bl_order[eax]
  00047	66 83 bc 8e 7e
	0a 00 00 00	 cmp	 WORD PTR [esi+ecx*4+2686], 0
  00050	75 78		 jne	 SHORT $LN8@build_bl_t
  00052	0f b6 88 ff ff
	ff ff		 movzx	 ecx, BYTE PTR _bl_order[eax-1]
  00059	66 83 bc 8e 7e
	0a 00 00 00	 cmp	 WORD PTR [esi+ecx*4+2686], 0
  00062	75 65		 jne	 SHORT $LN11@build_bl_t
  00064	0f b6 88 fe ff
	ff ff		 movzx	 ecx, BYTE PTR _bl_order[eax-2]
  0006b	66 83 bc 8e 7e
	0a 00 00 00	 cmp	 WORD PTR [esi+ecx*4+2686], 0
  00074	75 3f		 jne	 SHORT $LN12@build_bl_t
  00076	0f b6 88 fd ff
	ff ff		 movzx	 ecx, BYTE PTR _bl_order[eax-3]
  0007d	66 83 bc 8e 7e
	0a 00 00 00	 cmp	 WORD PTR [esi+ecx*4+2686], 0
  00086	75 19		 jne	 SHORT $LN13@build_bl_t

; 812  :     /* opt_len now includes the length of the tree representations, except
; 813  :      * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
; 814  :      */
; 815  : 
; 816  :     /* Determine the number of bit length codes to send. The pkzip format
; 817  :      * requires that at least 4 bit length codes be sent. (appnote.txt says
; 818  :      * 3 but the actual value used is 4.)
; 819  :      */
; 820  :     for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {

  00088	83 e8 04	 sub	 eax, 4
  0008b	83 f8 03	 cmp	 eax, 3
  0008e	7d b0		 jge	 SHORT $LL4@build_bl_t

; 822  :     }
; 823  :     /* Update opt_len to include the bit length tree and counts */
; 824  :     s->opt_len += 3*(max_blindex+1) + 5+5+4;

  00090	8d 0c 45 11 00
	00 00		 lea	 ecx, DWORD PTR [eax*2+17]
  00097	03 c8		 add	 ecx, eax
  00099	01 8e a8 16 00
	00		 add	 DWORD PTR [esi+5800], ecx
  0009f	5e		 pop	 esi

; 825  :     Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
; 826  :             s->opt_len, s->static_len));
; 827  : 
; 828  :     return max_blindex;
; 829  : }

  000a0	c3		 ret	 0
$LN13@build_bl_t:

; 821  :         if (s->bl_tree[bl_order[max_blindex]].Len != 0) break;

  000a1	83 e8 03	 sub	 eax, 3

; 822  :     }
; 823  :     /* Update opt_len to include the bit length tree and counts */
; 824  :     s->opt_len += 3*(max_blindex+1) + 5+5+4;

  000a4	8d 0c 45 11 00
	00 00		 lea	 ecx, DWORD PTR [eax*2+17]
  000ab	03 c8		 add	 ecx, eax
  000ad	01 8e a8 16 00
	00		 add	 DWORD PTR [esi+5800], ecx
  000b3	5e		 pop	 esi

; 825  :     Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
; 826  :             s->opt_len, s->static_len));
; 827  : 
; 828  :     return max_blindex;
; 829  : }

  000b4	c3		 ret	 0
$LN12@build_bl_t:

; 821  :         if (s->bl_tree[bl_order[max_blindex]].Len != 0) break;

  000b5	83 e8 02	 sub	 eax, 2

; 822  :     }
; 823  :     /* Update opt_len to include the bit length tree and counts */
; 824  :     s->opt_len += 3*(max_blindex+1) + 5+5+4;

  000b8	8d 0c 45 11 00
	00 00		 lea	 ecx, DWORD PTR [eax*2+17]
  000bf	03 c8		 add	 ecx, eax
  000c1	01 8e a8 16 00
	00		 add	 DWORD PTR [esi+5800], ecx
  000c7	5e		 pop	 esi

; 825  :     Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
; 826  :             s->opt_len, s->static_len));
; 827  : 
; 828  :     return max_blindex;
; 829  : }

  000c8	c3		 ret	 0
$LN11@build_bl_t:

; 821  :         if (s->bl_tree[bl_order[max_blindex]].Len != 0) break;

  000c9	48		 dec	 eax
$LN8@build_bl_t:

; 822  :     }
; 823  :     /* Update opt_len to include the bit length tree and counts */
; 824  :     s->opt_len += 3*(max_blindex+1) + 5+5+4;

  000ca	8d 0c 45 11 00
	00 00		 lea	 ecx, DWORD PTR [eax*2+17]
  000d1	03 c8		 add	 ecx, eax
  000d3	01 8e a8 16 00
	00		 add	 DWORD PTR [esi+5800], ecx
  000d9	5e		 pop	 esi

; 825  :     Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
; 826  :             s->opt_len, s->static_len));
; 827  : 
; 828  :     return max_blindex;
; 829  : }

  000da	c3		 ret	 0
_build_bl_tree ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\trunk2012\contribs\windows\x86\zlib\zlib-1.2.8\trees.c
;	COMDAT _send_all_trees
_TEXT	SEGMENT
_lcodes$1$ = -4						; size = 4
_dcodes$ = 8						; size = 4
_blcodes$ = 12						; size = 4
_send_all_trees PROC					; COMDAT
; _s$ = ecx
; _lcodes$ = edx

; 839  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	8b c2		 mov	 eax, edx

; 840  :     int rank;                    /* index in bl_order */
; 841  : 
; 842  :     Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
; 843  :     Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
; 844  :             "too many codes");
; 845  :     Tracev((stderr, "\nbl counts: "));
; 846  :     send_bits(s, lcodes-257, 5); /* not +255 as stated in appnote.txt */

  0000a	8b 8e bc 16 00
	00		 mov	 ecx, DWORD PTR [esi+5820]
  00010	57		 push	 edi
  00011	89 45 fc	 mov	 DWORD PTR _lcodes$1$[ebp], eax
  00014	83 f9 0b	 cmp	 ecx, 11			; 0000000bH
  00017	7e 52		 jle	 SHORT $LN11@send_all_t
  00019	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0001c	8d b8 ff fe ff
	ff		 lea	 edi, DWORD PTR [eax-257]
  00022	66 8b c7	 mov	 ax, di
  00025	66 d3 e0	 shl	 ax, cl
  00028	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0002b	66 09 86 b8 16
	00 00		 or	 WORD PTR [esi+5816], ax
  00032	0f b6 86 b8 16
	00 00		 movzx	 eax, BYTE PTR [esi+5816]
  00039	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0003c	ff 46 14	 inc	 DWORD PTR [esi+20]
  0003f	0f b6 86 b9 16
	00 00		 movzx	 eax, BYTE PTR [esi+5817]
  00046	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00049	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0004c	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0004f	8b 86 bc 16 00
	00		 mov	 eax, DWORD PTR [esi+5820]
  00055	ff 46 14	 inc	 DWORD PTR [esi+20]
  00058	b1 10		 mov	 cl, 16			; 00000010H
  0005a	2a c8		 sub	 cl, al
  0005c	66 d3 ef	 shr	 di, cl
  0005f	83 c0 f5	 add	 eax, -11		; fffffff5H
  00062	66 89 be b8 16
	00 00		 mov	 WORD PTR [esi+5816], di
  00069	eb 12		 jmp	 SHORT $LN17@send_all_t
$LN11@send_all_t:
  0006b	05 ff fe ff ff	 add	 eax, -257		; fffffeffH
  00070	66 d3 e0	 shl	 ax, cl
  00073	66 09 86 b8 16
	00 00		 or	 WORD PTR [esi+5816], ax
  0007a	8d 41 05	 lea	 eax, DWORD PTR [ecx+5]
$LN17@send_all_t:

; 847  :     send_bits(s, dcodes-1,   5);

  0007d	8b c8		 mov	 ecx, eax
  0007f	89 86 bc 16 00
	00		 mov	 DWORD PTR [esi+5820], eax
  00085	83 f9 0b	 cmp	 ecx, 11			; 0000000bH
  00088	7e 50		 jle	 SHORT $LN9@send_all_t
  0008a	8b 7d 08	 mov	 edi, DWORD PTR _dcodes$[ebp]
  0008d	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00090	4f		 dec	 edi
  00091	66 8b c7	 mov	 ax, di
  00094	66 d3 e0	 shl	 ax, cl
  00097	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0009a	66 09 86 b8 16
	00 00		 or	 WORD PTR [esi+5816], ax
  000a1	0f b6 86 b8 16
	00 00		 movzx	 eax, BYTE PTR [esi+5816]
  000a8	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  000ab	ff 46 14	 inc	 DWORD PTR [esi+20]
  000ae	0f b6 86 b9 16
	00 00		 movzx	 eax, BYTE PTR [esi+5817]
  000b5	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  000b8	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000bb	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  000be	8b 86 bc 16 00
	00		 mov	 eax, DWORD PTR [esi+5820]
  000c4	ff 46 14	 inc	 DWORD PTR [esi+20]
  000c7	b1 10		 mov	 cl, 16			; 00000010H
  000c9	2a c8		 sub	 cl, al
  000cb	66 d3 ef	 shr	 di, cl
  000ce	83 c0 f5	 add	 eax, -11		; fffffff5H
  000d1	66 89 be b8 16
	00 00		 mov	 WORD PTR [esi+5816], di
  000d8	eb 11		 jmp	 SHORT $LN18@send_all_t
$LN9@send_all_t:
  000da	8b 45 08	 mov	 eax, DWORD PTR _dcodes$[ebp]
  000dd	48		 dec	 eax
  000de	66 d3 e0	 shl	 ax, cl
  000e1	66 09 86 b8 16
	00 00		 or	 WORD PTR [esi+5816], ax
  000e8	8d 41 05	 lea	 eax, DWORD PTR [ecx+5]
$LN18@send_all_t:

; 848  :     send_bits(s, blcodes-4,  4); /* not -3 as stated in appnote.txt */

  000eb	8b c8		 mov	 ecx, eax
  000ed	89 86 bc 16 00
	00		 mov	 DWORD PTR [esi+5820], eax
  000f3	83 f9 0c	 cmp	 ecx, 12			; 0000000cH
  000f6	7e 52		 jle	 SHORT $LN7@send_all_t
  000f8	8b 7d 0c	 mov	 edi, DWORD PTR _blcodes$[ebp]
  000fb	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  000fe	83 c7 fc	 add	 edi, -4			; fffffffcH
  00101	66 8b c7	 mov	 ax, di
  00104	66 d3 e0	 shl	 ax, cl
  00107	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0010a	66 09 86 b8 16
	00 00		 or	 WORD PTR [esi+5816], ax
  00111	0f b6 86 b8 16
	00 00		 movzx	 eax, BYTE PTR [esi+5816]
  00118	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0011b	ff 46 14	 inc	 DWORD PTR [esi+20]
  0011e	0f b6 86 b9 16
	00 00		 movzx	 eax, BYTE PTR [esi+5817]
  00125	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00128	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0012b	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0012e	8b 86 bc 16 00
	00		 mov	 eax, DWORD PTR [esi+5820]
  00134	ff 46 14	 inc	 DWORD PTR [esi+20]
  00137	b1 10		 mov	 cl, 16			; 00000010H
  00139	2a c8		 sub	 cl, al
  0013b	66 d3 ef	 shr	 di, cl
  0013e	83 c0 f4	 add	 eax, -12		; fffffff4H
  00141	66 89 be b8 16
	00 00		 mov	 WORD PTR [esi+5816], di
  00148	eb 13		 jmp	 SHORT $LN19@send_all_t
$LN7@send_all_t:
  0014a	8b 45 0c	 mov	 eax, DWORD PTR _blcodes$[ebp]
  0014d	83 c0 fc	 add	 eax, -4			; fffffffcH
  00150	66 d3 e0	 shl	 ax, cl
  00153	66 09 86 b8 16
	00 00		 or	 WORD PTR [esi+5816], ax
  0015a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
$LN19@send_all_t:

; 849  :     for (rank = 0; rank < blcodes; rank++) {

  0015d	33 db		 xor	 ebx, ebx
  0015f	89 86 bc 16 00
	00		 mov	 DWORD PTR [esi+5820], eax
  00165	39 5d 0c	 cmp	 DWORD PTR _blcodes$[ebp], ebx
  00168	0f 8e 8d 00 00
	00		 jle	 $LN3@send_all_t
  0016e	8b ff		 npad	 2
$LL5@send_all_t:

; 850  :         Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
; 851  :         send_bits(s, s->bl_tree[bl_order[rank]].Len, 3);

  00170	8b 8e bc 16 00
	00		 mov	 ecx, DWORD PTR [esi+5820]
  00176	0f b6 83 00 00
	00 00		 movzx	 eax, BYTE PTR _bl_order[ebx]
  0017d	83 f9 0d	 cmp	 ecx, 13			; 0000000dH
  00180	7e 54		 jle	 SHORT $LN2@send_all_t
  00182	0f b7 bc 86 7e
	0a 00 00	 movzx	 edi, WORD PTR [esi+eax*4+2686]
  0018a	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0018d	66 8b c7	 mov	 ax, di
  00190	66 d3 e0	 shl	 ax, cl
  00193	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00196	66 09 86 b8 16
	00 00		 or	 WORD PTR [esi+5816], ax
  0019d	0f b6 86 b8 16
	00 00		 movzx	 eax, BYTE PTR [esi+5816]
  001a4	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  001a7	ff 46 14	 inc	 DWORD PTR [esi+20]
  001aa	0f b6 86 b9 16
	00 00		 movzx	 eax, BYTE PTR [esi+5817]
  001b1	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  001b4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001b7	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  001ba	8b 86 bc 16 00
	00		 mov	 eax, DWORD PTR [esi+5820]
  001c0	ff 46 14	 inc	 DWORD PTR [esi+20]
  001c3	b1 10		 mov	 cl, 16			; 00000010H
  001c5	2a c8		 sub	 cl, al
  001c7	66 d3 ef	 shr	 di, cl
  001ca	83 c0 f3	 add	 eax, -13		; fffffff3H
  001cd	66 89 be b8 16
	00 00		 mov	 WORD PTR [esi+5816], di
  001d4	eb 15		 jmp	 SHORT $LN20@send_all_t
$LN2@send_all_t:
  001d6	66 8b 84 86 7e
	0a 00 00	 mov	 ax, WORD PTR [esi+eax*4+2686]
  001de	66 d3 e0	 shl	 ax, cl
  001e1	66 09 86 b8 16
	00 00		 or	 WORD PTR [esi+5816], ax
  001e8	8d 41 03	 lea	 eax, DWORD PTR [ecx+3]
$LN20@send_all_t:
  001eb	43		 inc	 ebx
  001ec	89 86 bc 16 00
	00		 mov	 DWORD PTR [esi+5820], eax
  001f2	3b 5d 0c	 cmp	 ebx, DWORD PTR _blcodes$[ebp]
  001f5	0f 8c 75 ff ff
	ff		 jl	 $LL5@send_all_t
$LN3@send_all_t:

; 852  :     }
; 853  :     Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));
; 854  : 
; 855  :     send_tree(s, (ct_data *)s->dyn_ltree, lcodes-1); /* literal tree */

  001fb	8b 45 fc	 mov	 eax, DWORD PTR _lcodes$1$[ebp]
  001fe	48		 dec	 eax
  001ff	50		 push	 eax
  00200	8d 96 94 00 00
	00		 lea	 edx, DWORD PTR [esi+148]
  00206	8b ce		 mov	 ecx, esi
  00208	e8 00 00 00 00	 call	 _send_tree

; 856  :     Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));
; 857  : 
; 858  :     send_tree(s, (ct_data *)s->dyn_dtree, dcodes-1); /* distance tree */

  0020d	8b 45 08	 mov	 eax, DWORD PTR _dcodes$[ebp]
  00210	48		 dec	 eax
  00211	50		 push	 eax
  00212	8d 96 88 09 00
	00		 lea	 edx, DWORD PTR [esi+2440]
  00218	8b ce		 mov	 ecx, esi
  0021a	e8 00 00 00 00	 call	 _send_tree
  0021f	83 c4 08	 add	 esp, 8
  00222	5f		 pop	 edi
  00223	5e		 pop	 esi
  00224	5b		 pop	 ebx

; 859  :     Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
; 860  : }

  00225	8b e5		 mov	 esp, ebp
  00227	5d		 pop	 ebp
  00228	c3		 ret	 0
_send_all_trees ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\trunk2012\contribs\windows\x86\zlib\zlib-1.2.8\trees.c
;	COMDAT _compress_block
_TEXT	SEGMENT
_len$1$ = -20						; size = 4
_lx$1$ = -20						; size = 4
_extra$1$ = -16						; size = 4
_lc$1$ = -16						; size = 4
_len$1$ = -12						; size = 4
_code$1$ = -12						; size = 4
_len$1$ = -8						; size = 4
_code$2$ = -8						; size = 4
_ltree$1$ = -4						; size = 4
_dtree$ = 8						; size = 4
_compress_block PROC					; COMDAT
; _s$ = ecx
; _ltree$ = edx

; 1064 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx
  00007	8b da		 mov	 ebx, edx
  00009	8b c1		 mov	 eax, ecx

; 1065 :     unsigned dist;      /* distance of matched string */
; 1066 :     int lc;             /* match length or unmatched char (if dist == 0) */
; 1067 :     unsigned lx = 0;    /* running index in l_buf */

  0000b	33 d2		 xor	 edx, edx
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	89 5d fc	 mov	 DWORD PTR _ltree$1$[ebp], ebx

; 1068 :     unsigned code;      /* the code to send */
; 1069 :     int extra;          /* number of extra bits to send */
; 1070 : 
; 1071 :     if (s->last_lit != 0) do {

  00012	8d 72 10	 lea	 esi, DWORD PTR [edx+16]
  00015	39 90 a0 16 00
	00		 cmp	 DWORD PTR [eax+5792], edx
  0001b	0f 84 26 03 00
	00		 je	 $LN17@compress_b
$LL19@compress_b:

; 1072 :         dist = s->d_buf[lx];

  00021	8b 88 a4 16 00
	00		 mov	 ecx, DWORD PTR [eax+5796]

; 1073 :         lc = s->l_buf[lx++];

  00027	42		 inc	 edx
  00028	0f b7 5c 51 fe	 movzx	 ebx, WORD PTR [ecx+edx*2-2]
  0002d	8b 88 98 16 00
	00		 mov	 ecx, DWORD PTR [eax+5784]
  00033	89 55 ec	 mov	 DWORD PTR _lx$1$[ebp], edx
  00036	0f b6 7c 0a ff	 movzx	 edi, BYTE PTR [edx+ecx-1]
  0003b	89 7d f0	 mov	 DWORD PTR _lc$1$[ebp], edi

; 1074 :         if (dist == 0) {

  0003e	85 db		 test	 ebx, ebx
  00040	0f 85 86 00 00
	00		 jne	 $LN16@compress_b

; 1075 :             send_code(s, lc, ltree); /* send a literal byte */

  00046	8b 4d fc	 mov	 ecx, DWORD PTR _ltree$1$[ebp]
  00049	8b d6		 mov	 edx, esi
  0004b	0f b7 5c b9 02	 movzx	 ebx, WORD PTR [ecx+edi*4+2]
  00050	8d 3c b9	 lea	 edi, DWORD PTR [ecx+edi*4]
  00053	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00059	2b d3		 sub	 edx, ebx
  0005b	3b ca		 cmp	 ecx, edx
  0005d	7e 59		 jle	 SHORT $LN15@compress_b
  0005f	0f b7 3f	 movzx	 edi, WORD PTR [edi]
  00062	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  00065	66 8b d7	 mov	 dx, di
  00068	66 d3 e2	 shl	 dx, cl
  0006b	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  00072	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00075	0f b6 88 b8 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5816]
  0007c	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  0007f	ff 40 14	 inc	 DWORD PTR [eax+20]
  00082	0f b6 88 b9 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5817]
  00089	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  0008c	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0008f	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  00092	8b 90 bc 16 00
	00		 mov	 edx, DWORD PTR [eax+5820]
  00098	ff 40 14	 inc	 DWORD PTR [eax+20]
  0009b	b1 10		 mov	 cl, 16			; 00000010H
  0009d	2a ca		 sub	 cl, dl
  0009f	66 d3 ef	 shr	 di, cl
  000a2	8d 4a f0	 lea	 ecx, DWORD PTR [edx-16]
  000a5	03 cb		 add	 ecx, ebx
  000a7	be 10 00 00 00	 mov	 esi, 16			; 00000010H
  000ac	66 89 b8 b8 16
	00 00		 mov	 WORD PTR [eax+5816], di
  000b3	e9 77 02 00 00	 jmp	 $LN27@compress_b
$LN15@compress_b:
  000b8	66 8b 17	 mov	 dx, WORD PTR [edi]
  000bb	66 d3 e2	 shl	 dx, cl
  000be	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  000c5	03 cb		 add	 ecx, ebx

; 1076 :             Tracecv(isgraph(lc), (stderr," '%c' ", lc));
; 1077 :         } else {

  000c7	e9 63 02 00 00	 jmp	 $LN27@compress_b
$LN16@compress_b:

; 1078 :             /* Here, lc is the match length - MIN_MATCH */
; 1079 :             code = _length_code[lc];

  000cc	0f b6 8f 00 00
	00 00		 movzx	 ecx, BYTE PTR __length_code[edi]

; 1080 :             send_code(s, code+LITERALS+1, ltree); /* send the length code */

  000d3	8b 55 fc	 mov	 edx, DWORD PTR _ltree$1$[ebp]
  000d6	89 4d f4	 mov	 DWORD PTR _code$1$[ebp], ecx
  000d9	0f b7 8c 8a 06
	04 00 00	 movzx	 ecx, WORD PTR [edx+ecx*4+1030]
  000e1	89 4d f8	 mov	 DWORD PTR _len$1$[ebp], ecx
  000e4	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  000ea	8b d6		 mov	 edx, esi
  000ec	2b 55 f8	 sub	 edx, DWORD PTR _len$1$[ebp]
  000ef	8b 75 fc	 mov	 esi, DWORD PTR _ltree$1$[ebp]
  000f2	3b ca		 cmp	 ecx, edx
  000f4	8b 55 f4	 mov	 edx, DWORD PTR _code$1$[ebp]
  000f7	7e 5c		 jle	 SHORT $LN12@compress_b
  000f9	0f b7 bc 96 04
	04 00 00	 movzx	 edi, WORD PTR [esi+edx*4+1028]
  00101	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  00104	66 8b d7	 mov	 dx, di
  00107	66 d3 e2	 shl	 dx, cl
  0010a	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  00111	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00114	0f b6 88 b8 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5816]
  0011b	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  0011e	ff 40 14	 inc	 DWORD PTR [eax+20]
  00121	0f b6 88 b9 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5817]
  00128	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  0012b	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0012e	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  00131	8b 90 bc 16 00
	00		 mov	 edx, DWORD PTR [eax+5820]
  00137	ff 40 14	 inc	 DWORD PTR [eax+20]
  0013a	b1 10		 mov	 cl, 16			; 00000010H
  0013c	2a ca		 sub	 cl, dl
  0013e	66 d3 ef	 shr	 di, cl
  00141	8b 4d f8	 mov	 ecx, DWORD PTR _len$1$[ebp]
  00144	83 c1 f0	 add	 ecx, -16		; fffffff0H
  00147	03 ca		 add	 ecx, edx
  00149	66 89 b8 b8 16
	00 00		 mov	 WORD PTR [eax+5816], di
  00150	8b 7d f0	 mov	 edi, DWORD PTR _lc$1$[ebp]
  00153	eb 15		 jmp	 SHORT $LN28@compress_b
$LN12@compress_b:
  00155	66 8b 94 96 04
	04 00 00	 mov	 dx, WORD PTR [esi+edx*4+1028]
  0015d	66 d3 e2	 shl	 dx, cl
  00160	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  00167	03 4d f8	 add	 ecx, DWORD PTR _len$1$[ebp]
$LN28@compress_b:
  0016a	89 88 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ecx

; 1081 :             extra = extra_lbits[code];

  00170	8b 4d f4	 mov	 ecx, DWORD PTR _code$1$[ebp]
  00173	8b 34 8d 00 00
	00 00		 mov	 esi, DWORD PTR _extra_lbits[ecx*4]
  0017a	89 75 f0	 mov	 DWORD PTR _extra$1$[ebp], esi

; 1082 :             if (extra != 0) {

  0017d	85 f6		 test	 esi, esi
  0017f	74 7b		 je	 SHORT $LN8@compress_b

; 1083 :                 lc -= base_length[code];

  00181	2b 3c 8d 00 00
	00 00		 sub	 edi, DWORD PTR _base_length[ecx*4]

; 1084 :                 send_bits(s, lc, extra);       /* send the extra length bits */

  00188	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  0018e	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00193	2b d6		 sub	 edx, esi
  00195	3b ca		 cmp	 ecx, edx
  00197	7e 51		 jle	 SHORT $LN9@compress_b
  00199	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  0019c	66 8b d7	 mov	 dx, di
  0019f	66 d3 e2	 shl	 dx, cl
  001a2	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  001a9	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  001ac	0f b6 88 b8 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5816]
  001b3	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  001b6	ff 40 14	 inc	 DWORD PTR [eax+20]
  001b9	0f b6 88 b9 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5817]
  001c0	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  001c3	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  001c6	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  001c9	8b 90 bc 16 00
	00		 mov	 edx, DWORD PTR [eax+5820]
  001cf	ff 40 14	 inc	 DWORD PTR [eax+20]
  001d2	b1 10		 mov	 cl, 16			; 00000010H
  001d4	2a ca		 sub	 cl, dl
  001d6	66 d3 ef	 shr	 di, cl
  001d9	8b 4d f0	 mov	 ecx, DWORD PTR _extra$1$[ebp]
  001dc	83 c1 f0	 add	 ecx, -16		; fffffff0H
  001df	03 ca		 add	 ecx, edx
  001e1	66 89 b8 b8 16
	00 00		 mov	 WORD PTR [eax+5816], di
  001e8	eb 0c		 jmp	 SHORT $LN29@compress_b
$LN9@compress_b:
  001ea	66 d3 e7	 shl	 di, cl
  001ed	66 09 b8 b8 16
	00 00		 or	 WORD PTR [eax+5816], di
  001f4	03 ce		 add	 ecx, esi
$LN29@compress_b:
  001f6	89 88 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ecx
$LN8@compress_b:

; 1085 :             }
; 1086 :             dist--; /* dist is now the match distance - 1 */

  001fc	4b		 dec	 ebx

; 1087 :             code = d_code(dist);

  001fd	81 fb 00 01 00
	00		 cmp	 ebx, 256		; 00000100H
  00203	73 09		 jae	 SHORT $LN23@compress_b
  00205	0f b6 8b 00 00
	00 00		 movzx	 ecx, BYTE PTR __dist_code[ebx]
  0020c	eb 0c		 jmp	 SHORT $LN30@compress_b
$LN23@compress_b:
  0020e	8b cb		 mov	 ecx, ebx
  00210	c1 e9 07	 shr	 ecx, 7
  00213	0f b6 89 00 01
	00 00		 movzx	 ecx, BYTE PTR __dist_code[ecx+256]
$LN30@compress_b:

; 1088 :             Assert (code < D_CODES, "bad d_code");
; 1089 : 
; 1090 :             send_code(s, code, dtree);       /* send the distance code */

  0021a	8b 55 08	 mov	 edx, DWORD PTR _dtree$[ebp]
  0021d	89 4d f8	 mov	 DWORD PTR _code$2$[ebp], ecx
  00220	8d 3c 8a	 lea	 edi, DWORD PTR [edx+ecx*4]
  00223	be 10 00 00 00	 mov	 esi, 16			; 00000010H
  00228	0f b7 4f 02	 movzx	 ecx, WORD PTR [edi+2]
  0022c	89 4d f4	 mov	 DWORD PTR _len$1$[ebp], ecx
  0022f	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00235	8b d6		 mov	 edx, esi
  00237	2b 55 f4	 sub	 edx, DWORD PTR _len$1$[ebp]
  0023a	3b ca		 cmp	 ecx, edx
  0023c	7e 59		 jle	 SHORT $LN7@compress_b
  0023e	0f b7 3f	 movzx	 edi, WORD PTR [edi]
  00241	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  00244	66 8b d7	 mov	 dx, di
  00247	66 d3 e2	 shl	 dx, cl
  0024a	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  00251	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00254	0f b6 88 b8 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5816]
  0025b	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  0025e	ff 40 14	 inc	 DWORD PTR [eax+20]
  00261	0f b6 88 b9 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5817]
  00268	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  0026b	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0026e	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  00271	8b 90 bc 16 00
	00		 mov	 edx, DWORD PTR [eax+5820]
  00277	ff 40 14	 inc	 DWORD PTR [eax+20]
  0027a	b1 10		 mov	 cl, 16			; 00000010H
  0027c	2a ca		 sub	 cl, dl
  0027e	66 d3 ef	 shr	 di, cl
  00281	8b 4d f4	 mov	 ecx, DWORD PTR _len$1$[ebp]
  00284	83 c1 f0	 add	 ecx, -16		; fffffff0H
  00287	03 ca		 add	 ecx, edx
  00289	66 89 b8 b8 16
	00 00		 mov	 WORD PTR [eax+5816], di
  00290	be 10 00 00 00	 mov	 esi, 16			; 00000010H
  00295	eb 10		 jmp	 SHORT $LN31@compress_b
$LN7@compress_b:
  00297	66 8b 17	 mov	 dx, WORD PTR [edi]
  0029a	66 d3 e2	 shl	 dx, cl
  0029d	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  002a4	03 4d f4	 add	 ecx, DWORD PTR _len$1$[ebp]
$LN31@compress_b:
  002a7	89 88 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ecx

; 1091 :             extra = extra_dbits[code];

  002ad	8b 4d f8	 mov	 ecx, DWORD PTR _code$2$[ebp]
  002b0	8b 3c 8d 00 00
	00 00		 mov	 edi, DWORD PTR _extra_dbits[ecx*4]

; 1092 :             if (extra != 0) {

  002b7	85 ff		 test	 edi, edi
  002b9	74 7a		 je	 SHORT $LN18@compress_b

; 1093 :                 dist -= base_dist[code];

  002bb	2b 1c 8d 00 00
	00 00		 sub	 ebx, DWORD PTR _base_dist[ecx*4]

; 1094 :                 send_bits(s, dist, extra);   /* send the extra distance bits */

  002c2	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  002c8	8b d6		 mov	 edx, esi
  002ca	2b d7		 sub	 edx, edi
  002cc	3b ca		 cmp	 ecx, edx
  002ce	7e 53		 jle	 SHORT $LN4@compress_b
  002d0	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  002d3	66 8b d3	 mov	 dx, bx
  002d6	66 d3 e2	 shl	 dx, cl
  002d9	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  002e0	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  002e3	0f b6 88 b8 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5816]
  002ea	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  002ed	ff 40 14	 inc	 DWORD PTR [eax+20]
  002f0	0f b6 88 b9 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5817]
  002f7	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  002fa	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  002fd	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  00300	8b 90 bc 16 00
	00		 mov	 edx, DWORD PTR [eax+5820]
  00306	ff 40 14	 inc	 DWORD PTR [eax+20]
  00309	b1 10		 mov	 cl, 16			; 00000010H
  0030b	2a ca		 sub	 cl, dl
  0030d	66 d3 eb	 shr	 bx, cl
  00310	8d 4f f0	 lea	 ecx, DWORD PTR [edi-16]
  00313	03 ca		 add	 ecx, edx
  00315	be 10 00 00 00	 mov	 esi, 16			; 00000010H
  0031a	66 89 98 b8 16
	00 00		 mov	 WORD PTR [eax+5816], bx
  00321	eb 0c		 jmp	 SHORT $LN27@compress_b
$LN4@compress_b:
  00323	66 d3 e3	 shl	 bx, cl
  00326	66 09 98 b8 16
	00 00		 or	 WORD PTR [eax+5816], bx
  0032d	03 cf		 add	 ecx, edi
$LN27@compress_b:
  0032f	89 88 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ecx
$LN18@compress_b:

; 1095 :             }
; 1096 :         } /* literal or match pair ? */
; 1097 : 
; 1098 :         /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
; 1099 :         Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
; 1100 :                "pendingBuf overflow");
; 1101 : 
; 1102 :     } while (lx < s->last_lit);

  00335	8b 55 ec	 mov	 edx, DWORD PTR _lx$1$[ebp]
  00338	3b 90 a0 16 00
	00		 cmp	 edx, DWORD PTR [eax+5792]
  0033e	0f 82 dd fc ff
	ff		 jb	 $LL19@compress_b
  00344	8b 5d fc	 mov	 ebx, DWORD PTR _ltree$1$[ebp]
$LN17@compress_b:

; 1103 : 
; 1104 :     send_code(s, END_BLOCK, ltree);

  00347	0f b7 bb 02 04
	00 00		 movzx	 edi, WORD PTR [ebx+1026]
  0034e	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00354	2b f7		 sub	 esi, edi
  00356	89 7d ec	 mov	 DWORD PTR _len$1$[ebp], edi
  00359	3b ce		 cmp	 ecx, esi
  0035b	7e 63		 jle	 SHORT $LN2@compress_b
  0035d	0f b7 bb 00 04
	00 00		 movzx	 edi, WORD PTR [ebx+1024]
  00364	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  00367	66 8b d7	 mov	 dx, di
  0036a	66 d3 e2	 shl	 dx, cl
  0036d	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  00374	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00377	0f b6 88 b8 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5816]
  0037e	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  00381	ff 40 14	 inc	 DWORD PTR [eax+20]
  00384	0f b6 88 b9 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5817]
  0038b	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  0038e	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00391	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  00394	8b 90 bc 16 00
	00		 mov	 edx, DWORD PTR [eax+5820]
  0039a	ff 40 14	 inc	 DWORD PTR [eax+20]
  0039d	b1 10		 mov	 cl, 16			; 00000010H
  0039f	2a ca		 sub	 cl, dl
  003a1	66 d3 ef	 shr	 di, cl
  003a4	8b 4d ec	 mov	 ecx, DWORD PTR _len$1$[ebp]
  003a7	83 c1 f0	 add	 ecx, -16		; fffffff0H
  003aa	03 ca		 add	 ecx, edx
  003ac	66 89 b8 b8 16
	00 00		 mov	 WORD PTR [eax+5816], di
  003b3	5f		 pop	 edi
  003b4	5e		 pop	 esi
  003b5	89 88 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ecx
  003bb	5b		 pop	 ebx

; 1105 : }

  003bc	8b e5		 mov	 esp, ebp
  003be	5d		 pop	 ebp
  003bf	c3		 ret	 0
$LN2@compress_b:

; 1103 : 
; 1104 :     send_code(s, END_BLOCK, ltree);

  003c0	66 8b 93 00 04
	00 00		 mov	 dx, WORD PTR [ebx+1024]
  003c7	66 d3 e2	 shl	 dx, cl
  003ca	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  003d1	03 cf		 add	 ecx, edi
  003d3	5f		 pop	 edi
  003d4	5e		 pop	 esi
  003d5	89 88 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ecx
  003db	5b		 pop	 ebx

; 1105 : }

  003dc	8b e5		 mov	 esp, ebp
  003de	5d		 pop	 ebp
  003df	c3		 ret	 0
_compress_block ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\trunk2012\contribs\windows\x86\zlib\zlib-1.2.8\trees.c
;	COMDAT _detect_data_type
_TEXT	SEGMENT
_detect_data_type PROC					; COMDAT
; _s$ = ecx

; 1122 : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 1123 :     /* black_mask is the bit mask of black-listed bytes
; 1124 :      * set bits 0..6, 14..25, and 28..31
; 1125 :      * 0xf3ffc07f = binary 11110011111111111100000001111111
; 1126 :      */
; 1127 :     unsigned long black_mask = 0xf3ffc07fUL;

  00004	b8 7f c0 ff f3	 mov	 eax, -201342849		; f3ffc07fH

; 1128 :     int n;
; 1129 : 
; 1130 :     /* Check for non-textual ("black-listed") bytes. */
; 1131 :     for (n = 0; n <= 31; n++, black_mask >>= 1)

  00009	33 f6		 xor	 esi, esi
  0000b	8d 97 94 00 00
	00		 lea	 edx, DWORD PTR [edi+148]
$LL10@detect_dat:

; 1132 :         if ((black_mask & 1) && (s->dyn_ltree[n].Freq != 0))

  00011	a8 01		 test	 al, 1
  00013	74 06		 je	 SHORT $LN9@detect_dat
  00015	66 83 3a 00	 cmp	 WORD PTR [edx], 0
  00019	75 47		 jne	 SHORT $LN15@detect_dat
$LN9@detect_dat:

; 1128 :     int n;
; 1129 : 
; 1130 :     /* Check for non-textual ("black-listed") bytes. */
; 1131 :     for (n = 0; n <= 31; n++, black_mask >>= 1)

  0001b	46		 inc	 esi
  0001c	83 c2 04	 add	 edx, 4
  0001f	d1 e8		 shr	 eax, 1
  00021	83 fe 1f	 cmp	 esi, 31			; 0000001fH
  00024	7e eb		 jle	 SHORT $LL10@detect_dat

; 1133 :             return Z_BINARY;
; 1134 : 
; 1135 :     /* Check for textual ("white-listed") bytes. */
; 1136 :     if (s->dyn_ltree[9].Freq != 0 || s->dyn_ltree[10].Freq != 0
; 1137 :             || s->dyn_ltree[13].Freq != 0)

  00026	66 83 bf b8 00
	00 00 00	 cmp	 WORD PTR [edi+184], 0
  0002e	75 37		 jne	 SHORT $LN5@detect_dat
  00030	66 83 bf bc 00
	00 00 00	 cmp	 WORD PTR [edi+188], 0
  00038	75 2d		 jne	 SHORT $LN5@detect_dat
  0003a	66 83 bf c8 00
	00 00 00	 cmp	 WORD PTR [edi+200], 0
  00042	75 23		 jne	 SHORT $LN5@detect_dat

; 1139 :     for (n = 32; n < LITERALS; n++)

  00044	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00049	8d 87 14 01 00
	00		 lea	 eax, DWORD PTR [edi+276]
  0004f	90		 npad	 1
$LL4@detect_dat:

; 1140 :         if (s->dyn_ltree[n].Freq != 0)

  00050	66 83 38 00	 cmp	 WORD PTR [eax], 0
  00054	75 11		 jne	 SHORT $LN5@detect_dat

; 1139 :     for (n = 32; n < LITERALS; n++)

  00056	41		 inc	 ecx
  00057	83 c0 04	 add	 eax, 4
  0005a	81 f9 00 01 00
	00		 cmp	 ecx, 256		; 00000100H
  00060	7c ee		 jl	 SHORT $LL4@detect_dat
$LN15@detect_dat:
  00062	5f		 pop	 edi

; 1141 :             return Z_TEXT;
; 1142 : 
; 1143 :     /* There are no "black-listed" or "white-listed" bytes:
; 1144 :      * this stream either is empty or has tolerated ("gray-listed") bytes only.
; 1145 :      */
; 1146 :     return Z_BINARY;

  00063	33 c0		 xor	 eax, eax
  00065	5e		 pop	 esi

; 1147 : }

  00066	c3		 ret	 0
$LN5@detect_dat:
  00067	5f		 pop	 edi

; 1138 :         return Z_TEXT;

  00068	b8 01 00 00 00	 mov	 eax, 1
  0006d	5e		 pop	 esi

; 1147 : }

  0006e	c3		 ret	 0
_detect_data_type ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\trunk2012\contribs\windows\x86\zlib\zlib-1.2.8\trees.c
;	COMDAT _bi_reverse
_TEXT	SEGMENT
_bi_reverse PROC					; COMDAT
; _code$ = ecx
; _len$ = edx

; 1158 :     register unsigned res = 0;

  00000	33 c0		 xor	 eax, eax
  00002	56		 push	 esi
$LL3@bi_reverse:

; 1159 :     do {
; 1160 :         res |= code & 1;

  00003	8b f1		 mov	 esi, ecx
  00005	83 e6 01	 and	 esi, 1
  00008	0b c6		 or	 eax, esi

; 1161 :         code >>= 1, res <<= 1;
; 1162 :     } while (--len > 0);

  0000a	4a		 dec	 edx
  0000b	d1 e9		 shr	 ecx, 1
  0000d	03 c0		 add	 eax, eax
  0000f	85 d2		 test	 edx, edx
  00011	7f f0		 jg	 SHORT $LL3@bi_reverse

; 1163 :     return res >> 1;

  00013	d1 e8		 shr	 eax, 1
  00015	5e		 pop	 esi

; 1164 : }

  00016	c3		 ret	 0
_bi_reverse ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\trunk2012\contribs\windows\x86\zlib\zlib-1.2.8\trees.c
;	COMDAT _bi_flush
_TEXT	SEGMENT
_bi_flush PROC						; COMDAT
; _s$ = ecx

; 1171 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1172 :     if (s->bi_valid == 16) {

  00003	8b 86 bc 16 00
	00		 mov	 eax, DWORD PTR [esi+5820]
  00009	83 f8 10	 cmp	 eax, 16			; 00000010H
  0000c	75 37		 jne	 SHORT $LN3@bi_flush

; 1173 :         put_short(s, s->bi_buf);

  0000e	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00011	0f b6 86 b8 16
	00 00		 movzx	 eax, BYTE PTR [esi+5816]
  00018	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0001b	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0001e	ff 46 14	 inc	 DWORD PTR [esi+20]
  00021	0f b6 86 b9 16
	00 00		 movzx	 eax, BYTE PTR [esi+5817]
  00028	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0002b	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0002e	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00031	ff 46 14	 inc	 DWORD PTR [esi+20]

; 1174 :         s->bi_buf = 0;

  00034	33 c0		 xor	 eax, eax

; 1175 :         s->bi_valid = 0;

  00036	89 86 bc 16 00
	00		 mov	 DWORD PTR [esi+5820], eax

; 1178 :         s->bi_buf >>= 8;

  0003c	66 89 86 b8 16
	00 00		 mov	 WORD PTR [esi+5816], ax
  00043	5e		 pop	 esi

; 1180 :     }
; 1181 : }

  00044	c3		 ret	 0
$LN3@bi_flush:

; 1176 :     } else if (s->bi_valid >= 8) {

  00045	83 f8 08	 cmp	 eax, 8
  00048	7c 27		 jl	 SHORT $LN1@bi_flush

; 1177 :         put_byte(s, (Byte)s->bi_buf);

  0004a	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0004d	8a 86 b8 16 00
	00		 mov	 al, BYTE PTR [esi+5816]
  00053	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00056	88 04 0a	 mov	 BYTE PTR [edx+ecx], al

; 1178 :         s->bi_buf >>= 8;

  00059	0f b6 86 b9 16
	00 00		 movzx	 eax, BYTE PTR [esi+5817]
  00060	ff 46 14	 inc	 DWORD PTR [esi+20]

; 1179 :         s->bi_valid -= 8;

  00063	83 86 bc 16 00
	00 f8		 add	 DWORD PTR [esi+5820], -8 ; fffffff8H
  0006a	66 89 86 b8 16
	00 00		 mov	 WORD PTR [esi+5816], ax
$LN1@bi_flush:
  00071	5e		 pop	 esi

; 1180 :     }
; 1181 : }

  00072	c3		 ret	 0
_bi_flush ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\trunk2012\contribs\windows\x86\zlib\zlib-1.2.8\trees.c
;	COMDAT _bi_windup
_TEXT	SEGMENT
_bi_windup PROC						; COMDAT
; _s$ = ecx

; 1188 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1189 :     if (s->bi_valid > 8) {

  00003	8b 86 bc 16 00
	00		 mov	 eax, DWORD PTR [esi+5820]
  00009	83 f8 08	 cmp	 eax, 8
  0000c	7e 22		 jle	 SHORT $LN3@bi_windup

; 1190 :         put_short(s, s->bi_buf);

  0000e	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00011	0f b6 86 b8 16
	00 00		 movzx	 eax, BYTE PTR [esi+5816]
  00018	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0001b	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0001e	ff 46 14	 inc	 DWORD PTR [esi+20]
  00021	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00024	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00027	0f b6 86 b9 16
	00 00		 movzx	 eax, BYTE PTR [esi+5817]
  0002e	eb 10		 jmp	 SHORT $LN6@bi_windup
$LN3@bi_windup:

; 1191 :     } else if (s->bi_valid > 0) {

  00030	85 c0		 test	 eax, eax
  00032	7e 12		 jle	 SHORT $LN1@bi_windup

; 1192 :         put_byte(s, (Byte)s->bi_buf);

  00034	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00037	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0003a	8a 86 b8 16 00
	00		 mov	 al, BYTE PTR [esi+5816]
$LN6@bi_windup:
  00040	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00043	ff 46 14	 inc	 DWORD PTR [esi+20]
$LN1@bi_windup:

; 1193 :     }
; 1194 :     s->bi_buf = 0;

  00046	33 c0		 xor	 eax, eax
  00048	66 89 86 b8 16
	00 00		 mov	 WORD PTR [esi+5816], ax

; 1195 :     s->bi_valid = 0;

  0004f	89 86 bc 16 00
	00		 mov	 DWORD PTR [esi+5820], eax
  00055	5e		 pop	 esi

; 1196 : #ifdef DEBUG
; 1197 :     s->bits_sent = (s->bits_sent+7) & ~7;
; 1198 : #endif
; 1199 : }

  00056	c3		 ret	 0
_bi_windup ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\trunk2012\contribs\windows\x86\zlib\zlib-1.2.8\trees.c
;	COMDAT _copy_block
_TEXT	SEGMENT
_len$ = 8						; size = 4
_header$dead$ = 12					; size = 4
_copy_block PROC					; COMDAT
; _s$ = ecx
; _buf$ = edx

; 1210 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b fa		 mov	 edi, edx
  00008	8b f1		 mov	 esi, ecx

; 1211 :     bi_windup(s);        /* align on byte boundary */

  0000a	e8 00 00 00 00	 call	 _bi_windup

; 1212 : 
; 1213 :     if (header) {
; 1214 :         put_short(s, (ush)len);

  0000f	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00012	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00015	8b 5d 08	 mov	 ebx, DWORD PTR _len$[ebp]
  00018	88 1c 01	 mov	 BYTE PTR [ecx+eax], bl
  0001b	ff 46 14	 inc	 DWORD PTR [esi+20]
  0001e	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00021	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00024	8b cb		 mov	 ecx, ebx
  00026	c1 e9 08	 shr	 ecx, 8
  00029	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  0002c	ff 46 14	 inc	 DWORD PTR [esi+20]
  0002f	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1215 :         put_short(s, (ush)~len);

  00032	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00035	8a cb		 mov	 cl, bl
  00037	f6 d1		 not	 cl
  00039	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  0003c	ff 46 14	 inc	 DWORD PTR [esi+20]
  0003f	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00042	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00045	8b cb		 mov	 ecx, ebx
  00047	f7 d1		 not	 ecx
  00049	c1 e9 08	 shr	 ecx, 8
  0004c	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  0004f	ff 46 14	 inc	 DWORD PTR [esi+20]
  00052	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1216 : #ifdef DEBUG
; 1217 :         s->bits_sent += 2*16;
; 1218 : #endif
; 1219 :     }
; 1220 : #ifdef DEBUG
; 1221 :     s->bits_sent += (ulg)len<<3;
; 1222 : #endif
; 1223 :     while (len--) {

  00055	85 db		 test	 ebx, ebx
  00057	74 1b		 je	 SHORT $LN7@copy_block
  00059	8d a4 24 00 00
	00 00		 npad	 7
$LL2@copy_block:

; 1224 :         put_byte(s, *buf++);

  00060	8a 07		 mov	 al, BYTE PTR [edi]
  00062	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00065	8d 7f 01	 lea	 edi, DWORD PTR [edi+1]
  00068	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0006b	ff 46 14	 inc	 DWORD PTR [esi+20]
  0006e	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00071	4b		 dec	 ebx
  00072	75 ec		 jne	 SHORT $LL2@copy_block
$LN7@copy_block:
  00074	5f		 pop	 edi
  00075	5e		 pop	 esi
  00076	5b		 pop	 ebx

; 1225 :     }
; 1226 : }

  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
_copy_block ENDP
_TEXT	ENDS
END
