; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.61030.0 

	TITLE	C:\Trunk2012\Contribs\windows\x86\zlib\zlib-1.2.8\deflate.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

EXTRN	_match_init:PROC
EXTRN	_longest_match:PROC
_configuration_table DW 00H
	DW	00H
	DW	00H
	DW	00H
	DD	FLAT:_deflate_stored
	DW	04H
	DW	04H
	DW	08H
	DW	04H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	05H
	DW	010H
	DW	08H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	06H
	DW	020H
	DW	020H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	04H
	DW	010H
	DW	010H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	010H
	DW	020H
	DW	020H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	010H
	DW	080H
	DW	080H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	020H
	DW	080H
	DW	0100H
	DD	FLAT:_deflate_slow
	DW	020H
	DW	080H
	DW	0102H
	DW	0400H
	DD	FLAT:_deflate_slow
	DW	020H
	DW	0102H
	DW	0102H
	DW	01000H
	DD	FLAT:_deflate_slow
?my_version@?1??deflateInit2_@@9@9 DB '1.2.8', 00H	; `deflateInit2_'::`2'::my_version
PUBLIC	_deflateCopy@8
PUBLIC	_deflateBound@8
PUBLIC	_deflateTune@20
PUBLIC	_deflateParams@12
PUBLIC	_deflatePrime@12
PUBLIC	_deflatePending@12
PUBLIC	_deflateSetHeader@8
PUBLIC	_deflateReset@4
PUBLIC	_deflateResetKeep@4
PUBLIC	_deflateSetDictionary@12
PUBLIC	_deflateInit2_@32
PUBLIC	_deflateEnd@4
PUBLIC	_deflateInit_@16
PUBLIC	_deflate@8
; Function compile flags: /Ogtp
; File c:\trunk2012\contribs\windows\x86\zlib\zlib-1.2.8\deflate.c
;	COMDAT _deflate@8
_TEXT	SEGMENT
_old_flush$1$ = -4					; size = 4
_val$1$ = 8						; size = 4
_val$1$ = 8						; size = 4
_beg$1$ = 8						; size = 4
_strm$ = 8						; size = 4
_flush$ = 12						; size = 4
_deflate@8 PROC						; COMDAT

; 666  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 667  :     int old_flush; /* value of flush param for previous deflate call */
; 668  :     deflate_state *s;
; 669  : 
; 670  :     if (strm == Z_NULL || strm->state == Z_NULL ||
; 671  :         flush > Z_BLOCK || flush < 0) {

  00006	8b 7d 08	 mov	 edi, DWORD PTR _strm$[ebp]
  00009	85 ff		 test	 edi, edi
  0000b	0f 84 46 08 00
	00		 je	 $LN82@deflate
  00011	8b 77 1c	 mov	 esi, DWORD PTR [edi+28]
  00014	85 f6		 test	 esi, esi
  00016	0f 84 3b 08 00
	00		 je	 $LN82@deflate
  0001c	8b 45 0c	 mov	 eax, DWORD PTR _flush$[ebp]
  0001f	83 f8 05	 cmp	 eax, 5
  00022	0f 87 2f 08 00
	00		 ja	 $LN82@deflate

; 672  :         return Z_STREAM_ERROR;
; 673  :     }
; 674  :     s = strm->state;
; 675  : 
; 676  :     if (strm->next_out == Z_NULL ||
; 677  :         (strm->next_in == Z_NULL && strm->avail_in != 0) ||
; 678  :         (s->status == FINISH_STATE && flush != Z_FINISH)) {

  00028	83 7f 0c 00	 cmp	 DWORD PTR [edi+12], 0
  0002c	0f 84 1d 08 00
	00		 je	 $LN80@deflate
  00032	83 3f 00	 cmp	 DWORD PTR [edi], 0
  00035	75 0a		 jne	 SHORT $LN79@deflate
  00037	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0
  0003b	0f 85 0e 08 00
	00		 jne	 $LN80@deflate
$LN79@deflate:
  00041	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00044	81 f9 9a 02 00
	00		 cmp	 ecx, 666		; 0000029aH
  0004a	75 09		 jne	 SHORT $LN81@deflate
  0004c	83 f8 04	 cmp	 eax, 4
  0004f	0f 85 fa 07 00
	00		 jne	 $LN80@deflate
$LN81@deflate:

; 680  :     }
; 681  :     if (strm->avail_out == 0) ERR_RETURN(strm, Z_BUF_ERROR);

  00055	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  00059	75 15		 jne	 SHORT $LN78@deflate
  0005b	a1 1c 00 00 00	 mov	 eax, DWORD PTR _z_errmsg+28
  00060	89 47 18	 mov	 DWORD PTR [edi+24], eax
  00063	5f		 pop	 edi
  00064	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH
  00069	5e		 pop	 esi

; 974  : }

  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c2 08 00	 ret	 8
$LN78@deflate:

; 682  : 
; 683  :     s->strm = strm; /* just in case */
; 684  :     old_flush = s->last_flush;

  00070	8b 56 28	 mov	 edx, DWORD PTR [esi+40]
  00073	53		 push	 ebx
  00074	89 3e		 mov	 DWORD PTR [esi], edi
  00076	89 55 fc	 mov	 DWORD PTR _old_flush$1$[ebp], edx

; 685  :     s->last_flush = flush;

  00079	89 46 28	 mov	 DWORD PTR [esi+40], eax

; 686  : 
; 687  :     /* Write the header */
; 688  :     if (s->status == INIT_STATE) {

  0007c	83 f9 2a	 cmp	 ecx, 42			; 0000002aH
  0007f	0f 85 95 02 00
	00		 jne	 $LN71@deflate

; 689  : #ifdef GZIP
; 690  :         if (s->wrap == 2) {

  00085	83 7e 18 02	 cmp	 DWORD PTR [esi+24], 2
  00089	0f 85 ef 01 00
	00		 jne	 $LN76@deflate

; 691  :             strm->adler = crc32(0L, Z_NULL, 0);

  0008f	6a 00		 push	 0
  00091	6a 00		 push	 0
  00093	6a 00		 push	 0
  00095	e8 00 00 00 00	 call	 _crc32@12
  0009a	89 47 30	 mov	 DWORD PTR [edi+48], eax

; 692  :             put_byte(s, 31);

  0009d	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  000a0	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000a3	c6 04 01 1f	 mov	 BYTE PTR [ecx+eax], 31	; 0000001fH
  000a7	ff 46 14	 inc	 DWORD PTR [esi+20]
  000aa	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 693  :             put_byte(s, 139);

  000ad	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000b0	c6 04 01 8b	 mov	 BYTE PTR [ecx+eax], 139	; 0000008bH
  000b4	ff 46 14	 inc	 DWORD PTR [esi+20]
  000b7	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 694  :             put_byte(s, 8);

  000ba	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000bd	c6 04 01 08	 mov	 BYTE PTR [ecx+eax], 8
  000c1	ff 46 14	 inc	 DWORD PTR [esi+20]

; 695  :             if (s->gzhead == Z_NULL) {

  000c4	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
  000c7	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  000ca	85 d2		 test	 edx, edx
  000cc	0f 85 85 00 00
	00		 jne	 $LN75@deflate

; 696  :                 put_byte(s, 0);

  000d2	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000d5	88 14 03	 mov	 BYTE PTR [ebx+eax], dl
  000d8	ff 46 14	 inc	 DWORD PTR [esi+20]
  000db	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 697  :                 put_byte(s, 0);

  000de	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000e1	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  000e4	ff 46 14	 inc	 DWORD PTR [esi+20]
  000e7	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 698  :                 put_byte(s, 0);

  000ea	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000ed	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  000f0	ff 46 14	 inc	 DWORD PTR [esi+20]
  000f3	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 699  :                 put_byte(s, 0);

  000f6	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000f9	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  000fc	ff 46 14	 inc	 DWORD PTR [esi+20]
  000ff	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 700  :                 put_byte(s, 0);

  00102	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00105	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00108	ff 46 14	 inc	 DWORD PTR [esi+20]

; 701  :                 put_byte(s, s->level == 9 ? 2 :
; 702  :                             (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2 ?
; 703  :                              4 : 0));

  0010b	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  00111	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00114	83 f8 09	 cmp	 eax, 9
  00117	75 05		 jne	 SHORT $LN88@deflate
  00119	8d 48 f9	 lea	 ecx, DWORD PTR [eax-7]
  0011c	eb 17		 jmp	 SHORT $LN87@deflate
$LN88@deflate:
  0011e	83 be 88 00 00
	00 02		 cmp	 DWORD PTR [esi+136], 2
  00125	7d 09		 jge	 SHORT $LN86@deflate
  00127	83 f8 02	 cmp	 eax, 2
  0012a	7c 04		 jl	 SHORT $LN86@deflate
  0012c	33 c9		 xor	 ecx, ecx
  0012e	eb 05		 jmp	 SHORT $LN87@deflate
$LN86@deflate:
  00130	b9 04 00 00 00	 mov	 ecx, 4
$LN87@deflate:
  00135	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00138	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  0013b	ff 46 14	 inc	 DWORD PTR [esi+20]
  0013e	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 704  :                 put_byte(s, OS_CODE);

  00141	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00144	c6 04 01 0b	 mov	 BYTE PTR [ecx+eax], 11	; 0000000bH
  00148	ff 46 14	 inc	 DWORD PTR [esi+20]

; 705  :                 s->status = BUSY_STATE;

  0014b	c7 46 04 71 00
	00 00		 mov	 DWORD PTR [esi+4], 113	; 00000071H

; 706  :             }
; 707  :             else {

  00152	e9 c3 01 00 00	 jmp	 $LN71@deflate
$LN75@deflate:

; 708  :                 put_byte(s, (s->gzhead->text ? 1 : 0) +
; 709  :                             (s->gzhead->hcrc ? 2 : 0) +
; 710  :                             (s->gzhead->extra == Z_NULL ? 0 : 4) +
; 711  :                             (s->gzhead->name == Z_NULL ? 0 : 8) +
; 712  :                             (s->gzhead->comment == Z_NULL ? 0 : 16)
; 713  :                         );

  00157	8b 4a 24	 mov	 ecx, DWORD PTR [edx+36]
  0015a	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0015d	f7 d9		 neg	 ecx
  0015f	1a c9		 sbb	 cl, cl
  00161	80 e1 10	 and	 cl, 16			; 00000010H
  00164	f7 d8		 neg	 eax
  00166	1a c0		 sbb	 al, al
  00168	24 02		 and	 al, 2
  0016a	02 c8		 add	 cl, al
  0016c	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0016f	f7 d8		 neg	 eax
  00171	1a c0		 sbb	 al, al
  00173	24 08		 and	 al, 8
  00175	02 c8		 add	 cl, al
  00177	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0017a	f7 d8		 neg	 eax
  0017c	1a c0		 sbb	 al, al
  0017e	24 04		 and	 al, 4
  00180	02 c8		 add	 cl, al
  00182	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00185	0f 95 c0	 setne	 al
  00188	02 c8		 add	 cl, al
  0018a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0018d	88 0c 03	 mov	 BYTE PTR [ebx+eax], cl
  00190	ff 46 14	 inc	 DWORD PTR [esi+20]
  00193	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 714  :                 put_byte(s, (Byte)(s->gzhead->time & 0xff));

  00196	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00199	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0019c	0f b6 40 04	 movzx	 eax, BYTE PTR [eax+4]
  001a0	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  001a3	ff 46 14	 inc	 DWORD PTR [esi+20]

; 715  :                 put_byte(s, (Byte)((s->gzhead->time >> 8) & 0xff));

  001a6	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  001a9	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  001ac	0f b6 40 05	 movzx	 eax, BYTE PTR [eax+5]
  001b0	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001b3	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  001b6	ff 46 14	 inc	 DWORD PTR [esi+20]

; 716  :                 put_byte(s, (Byte)((s->gzhead->time >> 16) & 0xff));

  001b9	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  001bc	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  001bf	0f b6 40 06	 movzx	 eax, BYTE PTR [eax+6]
  001c3	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001c6	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  001c9	ff 46 14	 inc	 DWORD PTR [esi+20]

; 717  :                 put_byte(s, (Byte)((s->gzhead->time >> 24) & 0xff));

  001cc	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  001cf	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  001d2	0f b6 40 07	 movzx	 eax, BYTE PTR [eax+7]
  001d6	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001d9	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  001dc	ff 46 14	 inc	 DWORD PTR [esi+20]

; 718  :                 put_byte(s, s->level == 9 ? 2 :
; 719  :                             (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2 ?
; 720  :                              4 : 0));

  001df	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  001e5	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  001e8	83 f8 09	 cmp	 eax, 9
  001eb	75 05		 jne	 SHORT $LN92@deflate
  001ed	8d 48 f9	 lea	 ecx, DWORD PTR [eax-7]
  001f0	eb 17		 jmp	 SHORT $LN91@deflate
$LN92@deflate:
  001f2	83 be 88 00 00
	00 02		 cmp	 DWORD PTR [esi+136], 2
  001f9	7d 09		 jge	 SHORT $LN90@deflate
  001fb	83 f8 02	 cmp	 eax, 2
  001fe	7c 04		 jl	 SHORT $LN90@deflate
  00200	33 c9		 xor	 ecx, ecx
  00202	eb 05		 jmp	 SHORT $LN91@deflate
$LN90@deflate:
  00204	b9 04 00 00 00	 mov	 ecx, 4
$LN91@deflate:
  00209	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0020c	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  0020f	ff 46 14	 inc	 DWORD PTR [esi+20]

; 721  :                 put_byte(s, s->gzhead->os & 0xff);

  00212	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00215	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00218	8a 40 0c	 mov	 al, BYTE PTR [eax+12]
  0021b	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0021e	88 04 0a	 mov	 BYTE PTR [edx+ecx], al

; 722  :                 if (s->gzhead->extra != Z_NULL) {

  00221	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00224	ff 46 14	 inc	 DWORD PTR [esi+20]
  00227	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0022b	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0022e	74 23		 je	 SHORT $LN73@deflate

; 723  :                     put_byte(s, s->gzhead->extra_len & 0xff);

  00230	0f b6 40 14	 movzx	 eax, BYTE PTR [eax+20]
  00234	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00237	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0023a	ff 46 14	 inc	 DWORD PTR [esi+20]

; 724  :                     put_byte(s, (s->gzhead->extra_len >> 8) & 0xff);

  0023d	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00240	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00243	0f b6 40 15	 movzx	 eax, BYTE PTR [eax+21]
  00247	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0024a	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0024d	ff 46 14	 inc	 DWORD PTR [esi+20]
  00250	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
$LN73@deflate:

; 725  :                 }
; 726  :                 if (s->gzhead->hcrc)

  00253	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00256	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  0025a	74 0f		 je	 SHORT $LN72@deflate

; 727  :                     strm->adler = crc32(strm->adler, s->pending_buf,
; 728  :                                         s->pending);

  0025c	52		 push	 edx
  0025d	ff 76 08	 push	 DWORD PTR [esi+8]
  00260	ff 77 30	 push	 DWORD PTR [edi+48]
  00263	e8 00 00 00 00	 call	 _crc32@12
  00268	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN72@deflate:

; 729  :                 s->gzindex = 0;

  0026b	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0

; 730  :                 s->status = EXTRA_STATE;

  00272	c7 46 04 45 00
	00 00		 mov	 DWORD PTR [esi+4], 69	; 00000045H

; 731  :             }
; 732  :         }
; 733  :         else

  00279	e9 9c 00 00 00	 jmp	 $LN71@deflate
$LN76@deflate:

; 734  : #endif
; 735  :         {
; 736  :             uInt header = (Z_DEFLATED + ((s->w_bits-8)<<4)) << 8;

  0027e	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  00281	83 e9 08	 sub	 ecx, 8
  00284	c1 e1 0c	 shl	 ecx, 12			; 0000000cH
  00287	81 c1 00 08 00
	00		 add	 ecx, 2048		; 00000800H

; 737  :             uInt level_flags;
; 738  : 
; 739  :             if (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2)

  0028d	83 be 88 00 00
	00 02		 cmp	 DWORD PTR [esi+136], 2
  00294	7d 24		 jge	 SHORT $LN69@deflate
  00296	8b 96 84 00 00
	00		 mov	 edx, DWORD PTR [esi+132]
  0029c	83 fa 02	 cmp	 edx, 2
  0029f	7c 19		 jl	 SHORT $LN69@deflate

; 741  :             else if (s->level < 6)

  002a1	83 fa 06	 cmp	 edx, 6
  002a4	7d 07		 jge	 SHORT $LN67@deflate

; 742  :                 level_flags = 1;

  002a6	b8 01 00 00 00	 mov	 eax, 1
  002ab	eb 0f		 jmp	 SHORT $LN64@deflate
$LN67@deflate:

; 743  :             else if (s->level == 6)

  002ad	33 c0		 xor	 eax, eax
  002af	83 fa 06	 cmp	 edx, 6
  002b2	0f 95 c0	 setne	 al
  002b5	83 c0 02	 add	 eax, 2

; 744  :                 level_flags = 2;
; 745  :             else
; 746  :                 level_flags = 3;

  002b8	eb 02		 jmp	 SHORT $LN64@deflate
$LN69@deflate:

; 740  :                 level_flags = 0;

  002ba	33 c0		 xor	 eax, eax
$LN64@deflate:

; 747  :             header |= (level_flags << 6);

  002bc	c1 e0 06	 shl	 eax, 6
  002bf	0b c8		 or	 ecx, eax

; 748  :             if (s->strstart != 0) header |= PRESET_DICT;

  002c1	83 7e 6c 00	 cmp	 DWORD PTR [esi+108], 0
  002c5	74 03		 je	 SHORT $LN63@deflate
  002c7	83 c9 20	 or	 ecx, 32			; 00000020H
$LN63@deflate:

; 749  :             header += 31 - (header % 31);

  002ca	b8 85 10 42 08	 mov	 eax, 138547333		; 08421085H
  002cf	f7 e1		 mul	 ecx
  002d1	2b ca		 sub	 ecx, edx
  002d3	d1 e9		 shr	 ecx, 1
  002d5	03 ca		 add	 ecx, edx
  002d7	c1 e9 04	 shr	 ecx, 4

; 750  : 
; 751  :             s->status = BUSY_STATE;
; 752  :             putShortMSB(s, header);

  002da	41		 inc	 ecx
  002db	8b d1		 mov	 edx, ecx
  002dd	c1 e2 05	 shl	 edx, 5
  002e0	2b d1		 sub	 edx, ecx
  002e2	8b ce		 mov	 ecx, esi
  002e4	c7 46 04 71 00
	00 00		 mov	 DWORD PTR [esi+4], 113	; 00000071H
  002eb	e8 00 00 00 00	 call	 _putShortMSB

; 753  : 
; 754  :             /* Save the adler32 of the preset dictionary: */
; 755  :             if (s->strstart != 0) {

  002f0	83 7e 6c 00	 cmp	 DWORD PTR [esi+108], 0
  002f4	74 16		 je	 SHORT $LN62@deflate

; 756  :                 putShortMSB(s, (uInt)(strm->adler >> 16));

  002f6	0f b7 57 32	 movzx	 edx, WORD PTR [edi+50]
  002fa	8b ce		 mov	 ecx, esi
  002fc	e8 00 00 00 00	 call	 _putShortMSB

; 757  :                 putShortMSB(s, (uInt)(strm->adler & 0xffff));

  00301	0f b7 57 30	 movzx	 edx, WORD PTR [edi+48]
  00305	8b ce		 mov	 ecx, esi
  00307	e8 00 00 00 00	 call	 _putShortMSB
$LN62@deflate:

; 758  :             }
; 759  :             strm->adler = adler32(0L, Z_NULL, 0);

  0030c	6a 00		 push	 0
  0030e	6a 00		 push	 0
  00310	6a 00		 push	 0
  00312	e8 00 00 00 00	 call	 _adler32@12
  00317	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN71@deflate:

; 760  :         }
; 761  :     }
; 762  : #ifdef GZIP
; 763  :     if (s->status == EXTRA_STATE) {

  0031a	83 7e 04 45	 cmp	 DWORD PTR [esi+4], 69	; 00000045H
  0031e	0f 85 bd 00 00
	00		 jne	 $LN52@deflate

; 764  :         if (s->gzhead->extra != Z_NULL) {

  00324	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00327	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0032b	0f 84 a9 00 00
	00		 je	 $LN60@deflate

; 765  :             uInt beg = s->pending;  /* start of bytes to update crc */
; 766  : 
; 767  :             while (s->gzindex < (s->gzhead->extra_len & 0xffff)) {

  00331	0f b7 40 14	 movzx	 eax, WORD PTR [eax+20]
  00335	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00338	89 4d 08	 mov	 DWORD PTR _beg$1$[ebp], ecx
  0033b	39 46 20	 cmp	 DWORD PTR [esi+32], eax
  0033e	73 64		 jae	 SHORT $LN108@deflate
$LL59@deflate:

; 768  :                 if (s->pending == s->pending_buf_size) {

  00340	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00343	3b 5e 0c	 cmp	 ebx, DWORD PTR [esi+12]
  00346	75 35		 jne	 SHORT $LN55@deflate

; 769  :                     if (s->gzhead->hcrc && s->pending > beg)

  00348	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0034b	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  0034f	74 18		 je	 SHORT $LN56@deflate
  00351	3b d9		 cmp	 ebx, ecx
  00353	76 14		 jbe	 SHORT $LN56@deflate

; 770  :                         strm->adler = crc32(strm->adler, s->pending_buf + beg,
; 771  :                                             s->pending - beg);

  00355	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00358	2b d9		 sub	 ebx, ecx
  0035a	53		 push	 ebx
  0035b	03 c1		 add	 eax, ecx
  0035d	50		 push	 eax
  0035e	ff 77 30	 push	 DWORD PTR [edi+48]
  00361	e8 00 00 00 00	 call	 _crc32@12
  00366	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN56@deflate:

; 772  :                     flush_pending(strm);

  00369	8b cf		 mov	 ecx, edi
  0036b	e8 00 00 00 00	 call	 _flush_pending

; 773  :                     beg = s->pending;

  00370	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00373	8b cb		 mov	 ecx, ebx
  00375	89 4d 08	 mov	 DWORD PTR _beg$1$[ebp], ecx

; 774  :                     if (s->pending == s->pending_buf_size)

  00378	3b 5e 0c	 cmp	 ebx, DWORD PTR [esi+12]
  0037b	74 27		 je	 SHORT $LN108@deflate
$LN55@deflate:

; 775  :                         break;
; 776  :                 }
; 777  :                 put_byte(s, s->gzhead->extra[s->gzindex]);

  0037d	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00380	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00383	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00386	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00389	8a 04 02	 mov	 al, BYTE PTR [edx+eax]
  0038c	88 04 0b	 mov	 BYTE PTR [ebx+ecx], al
  0038f	ff 46 14	 inc	 DWORD PTR [esi+20]

; 778  :                 s->gzindex++;

  00392	ff 46 20	 inc	 DWORD PTR [esi+32]
  00395	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00398	8b 4d 08	 mov	 ecx, DWORD PTR _beg$1$[ebp]
  0039b	0f b7 40 14	 movzx	 eax, WORD PTR [eax+20]
  0039f	39 46 20	 cmp	 DWORD PTR [esi+32], eax
  003a2	72 9c		 jb	 SHORT $LL59@deflate
$LN108@deflate:

; 779  :             }
; 780  :             if (s->gzhead->hcrc && s->pending > beg)

  003a4	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  003a7	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  003ab	74 1b		 je	 SHORT $LN54@deflate
  003ad	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  003b0	3b c1		 cmp	 eax, ecx
  003b2	76 14		 jbe	 SHORT $LN54@deflate

; 781  :                 strm->adler = crc32(strm->adler, s->pending_buf + beg,
; 782  :                                     s->pending - beg);

  003b4	2b c1		 sub	 eax, ecx
  003b6	50		 push	 eax
  003b7	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  003ba	03 c1		 add	 eax, ecx
  003bc	50		 push	 eax
  003bd	ff 77 30	 push	 DWORD PTR [edi+48]
  003c0	e8 00 00 00 00	 call	 _crc32@12
  003c5	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN54@deflate:

; 783  :             if (s->gzindex == s->gzhead->extra_len) {

  003c8	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  003cb	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  003ce	3b 41 14	 cmp	 eax, DWORD PTR [ecx+20]
  003d1	75 0e		 jne	 SHORT $LN52@deflate

; 784  :                 s->gzindex = 0;

  003d3	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
$LN60@deflate:

; 785  :                 s->status = NAME_STATE;
; 786  :             }
; 787  :         }
; 788  :         else
; 789  :             s->status = NAME_STATE;

  003da	c7 46 04 49 00
	00 00		 mov	 DWORD PTR [esi+4], 73	; 00000049H
$LN52@deflate:

; 790  :     }
; 791  :     if (s->status == NAME_STATE) {

  003e1	83 7e 04 49	 cmp	 DWORD PTR [esi+4], 73	; 00000049H
  003e5	0f 85 b6 00 00
	00		 jne	 $LN41@deflate

; 792  :         if (s->gzhead->name != Z_NULL) {

  003eb	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  003ee	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  003f2	0f 84 a2 00 00
	00		 je	 $LN50@deflate

; 793  :             uInt beg = s->pending;  /* start of bytes to update crc */

  003f8	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  003fb	eb 03 8d 49 00	 npad	 5
$LL49@deflate:

; 794  :             int val;
; 795  : 
; 796  :             do {
; 797  :                 if (s->pending == s->pending_buf_size) {

  00400	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00403	3b 56 0c	 cmp	 edx, DWORD PTR [esi+12]
  00406	75 32		 jne	 SHORT $LN44@deflate

; 798  :                     if (s->gzhead->hcrc && s->pending > beg)

  00408	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0040b	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  0040f	74 18		 je	 SHORT $LN45@deflate
  00411	3b d3		 cmp	 edx, ebx
  00413	76 14		 jbe	 SHORT $LN45@deflate

; 799  :                         strm->adler = crc32(strm->adler, s->pending_buf + beg,
; 800  :                                             s->pending - beg);

  00415	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00418	2b d3		 sub	 edx, ebx
  0041a	52		 push	 edx
  0041b	03 c3		 add	 eax, ebx
  0041d	50		 push	 eax
  0041e	ff 77 30	 push	 DWORD PTR [edi+48]
  00421	e8 00 00 00 00	 call	 _crc32@12
  00426	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN45@deflate:

; 801  :                     flush_pending(strm);

  00429	8b cf		 mov	 ecx, edi
  0042b	e8 00 00 00 00	 call	 _flush_pending

; 802  :                     beg = s->pending;

  00430	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00433	8b da		 mov	 ebx, edx

; 803  :                     if (s->pending == s->pending_buf_size) {

  00435	3b 56 0c	 cmp	 edx, DWORD PTR [esi+12]
  00438	74 28		 je	 SHORT $LN102@deflate
$LN44@deflate:

; 805  :                         break;
; 806  :                     }
; 807  :                 }
; 808  :                 val = s->gzhead->name[s->gzindex++];

  0043a	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  0043d	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00440	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00443	0f b6 04 08	 movzx	 eax, BYTE PTR [eax+ecx]
  00447	89 45 08	 mov	 DWORD PTR _val$1$[ebp], eax
  0044a	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]

; 809  :                 put_byte(s, val);

  0044d	8b 4d 08	 mov	 ecx, DWORD PTR _val$1$[ebp]
  00450	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00453	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00456	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  00459	ff 46 14	 inc	 DWORD PTR [esi+20]

; 810  :             } while (val != 0);

  0045c	85 c9		 test	 ecx, ecx
  0045e	75 a0		 jne	 SHORT $LL49@deflate
  00460	eb 07		 jmp	 SHORT $LN47@deflate
$LN102@deflate:

; 804  :                         val = 1;

  00462	c7 45 08 01 00
	00 00		 mov	 DWORD PTR _val$1$[ebp], 1
$LN47@deflate:

; 811  :             if (s->gzhead->hcrc && s->pending > beg)

  00469	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0046c	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  00470	74 1b		 je	 SHORT $LN43@deflate
  00472	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00475	3b c3		 cmp	 eax, ebx
  00477	76 14		 jbe	 SHORT $LN43@deflate

; 812  :                 strm->adler = crc32(strm->adler, s->pending_buf + beg,
; 813  :                                     s->pending - beg);

  00479	2b c3		 sub	 eax, ebx
  0047b	50		 push	 eax
  0047c	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0047f	03 c3		 add	 eax, ebx
  00481	50		 push	 eax
  00482	ff 77 30	 push	 DWORD PTR [edi+48]
  00485	e8 00 00 00 00	 call	 _crc32@12
  0048a	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN43@deflate:

; 814  :             if (val == 0) {

  0048d	83 7d 08 00	 cmp	 DWORD PTR _val$1$[ebp], 0
  00491	75 0e		 jne	 SHORT $LN41@deflate

; 815  :                 s->gzindex = 0;

  00493	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
$LN50@deflate:

; 816  :                 s->status = COMMENT_STATE;
; 817  :             }
; 818  :         }
; 819  :         else
; 820  :             s->status = COMMENT_STATE;

  0049a	c7 46 04 5b 00
	00 00		 mov	 DWORD PTR [esi+4], 91	; 0000005bH
$LN41@deflate:

; 821  :     }
; 822  :     if (s->status == COMMENT_STATE) {

  004a1	83 7e 04 5b	 cmp	 DWORD PTR [esi+4], 91	; 0000005bH
  004a5	0f 85 af 00 00
	00		 jne	 $LN30@deflate

; 823  :         if (s->gzhead->comment != Z_NULL) {

  004ab	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  004ae	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  004b2	0f 84 9b 00 00
	00		 je	 $LN39@deflate

; 824  :             uInt beg = s->pending;  /* start of bytes to update crc */

  004b8	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  004bb	eb 03 8d 49 00	 npad	 5
$LL38@deflate:

; 825  :             int val;
; 826  : 
; 827  :             do {
; 828  :                 if (s->pending == s->pending_buf_size) {

  004c0	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  004c3	3b 56 0c	 cmp	 edx, DWORD PTR [esi+12]
  004c6	75 32		 jne	 SHORT $LN33@deflate

; 829  :                     if (s->gzhead->hcrc && s->pending > beg)

  004c8	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  004cb	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  004cf	74 18		 je	 SHORT $LN34@deflate
  004d1	3b d3		 cmp	 edx, ebx
  004d3	76 14		 jbe	 SHORT $LN34@deflate

; 830  :                         strm->adler = crc32(strm->adler, s->pending_buf + beg,
; 831  :                                             s->pending - beg);

  004d5	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  004d8	2b d3		 sub	 edx, ebx
  004da	52		 push	 edx
  004db	03 c3		 add	 eax, ebx
  004dd	50		 push	 eax
  004de	ff 77 30	 push	 DWORD PTR [edi+48]
  004e1	e8 00 00 00 00	 call	 _crc32@12
  004e6	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN34@deflate:

; 832  :                     flush_pending(strm);

  004e9	8b cf		 mov	 ecx, edi
  004eb	e8 00 00 00 00	 call	 _flush_pending

; 833  :                     beg = s->pending;

  004f0	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  004f3	8b da		 mov	 ebx, edx

; 834  :                     if (s->pending == s->pending_buf_size) {

  004f5	3b 56 0c	 cmp	 edx, DWORD PTR [esi+12]
  004f8	74 28		 je	 SHORT $LN103@deflate
$LN33@deflate:

; 836  :                         break;
; 837  :                     }
; 838  :                 }
; 839  :                 val = s->gzhead->comment[s->gzindex++];

  004fa	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  004fd	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00500	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  00503	0f b6 04 08	 movzx	 eax, BYTE PTR [eax+ecx]
  00507	89 45 08	 mov	 DWORD PTR _val$1$[ebp], eax
  0050a	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]

; 840  :                 put_byte(s, val);

  0050d	8b 4d 08	 mov	 ecx, DWORD PTR _val$1$[ebp]
  00510	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00513	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00516	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  00519	ff 46 14	 inc	 DWORD PTR [esi+20]

; 841  :             } while (val != 0);

  0051c	85 c9		 test	 ecx, ecx
  0051e	75 a0		 jne	 SHORT $LL38@deflate
  00520	eb 07		 jmp	 SHORT $LN36@deflate
$LN103@deflate:

; 835  :                         val = 1;

  00522	c7 45 08 01 00
	00 00		 mov	 DWORD PTR _val$1$[ebp], 1
$LN36@deflate:

; 842  :             if (s->gzhead->hcrc && s->pending > beg)

  00529	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0052c	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  00530	74 1b		 je	 SHORT $LN32@deflate
  00532	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00535	3b c3		 cmp	 eax, ebx
  00537	76 14		 jbe	 SHORT $LN32@deflate

; 843  :                 strm->adler = crc32(strm->adler, s->pending_buf + beg,
; 844  :                                     s->pending - beg);

  00539	2b c3		 sub	 eax, ebx
  0053b	50		 push	 eax
  0053c	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0053f	03 c3		 add	 eax, ebx
  00541	50		 push	 eax
  00542	ff 77 30	 push	 DWORD PTR [edi+48]
  00545	e8 00 00 00 00	 call	 _crc32@12
  0054a	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN32@deflate:

; 845  :             if (val == 0)

  0054d	83 7d 08 00	 cmp	 DWORD PTR _val$1$[ebp], 0
  00551	75 07		 jne	 SHORT $LN30@deflate
$LN39@deflate:

; 846  :                 s->status = HCRC_STATE;
; 847  :         }
; 848  :         else
; 849  :             s->status = HCRC_STATE;

  00553	c7 46 04 67 00
	00 00		 mov	 DWORD PTR [esi+4], 103	; 00000067H
$LN30@deflate:

; 850  :     }
; 851  :     if (s->status == HCRC_STATE) {

  0055a	83 7e 04 67	 cmp	 DWORD PTR [esi+4], 103	; 00000067H
  0055e	75 58		 jne	 SHORT $LN25@deflate

; 852  :         if (s->gzhead->hcrc) {

  00560	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00563	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  00567	74 48		 je	 SHORT $LN28@deflate

; 853  :             if (s->pending + 2 > s->pending_buf_size)

  00569	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0056c	83 c0 02	 add	 eax, 2
  0056f	3b 46 0c	 cmp	 eax, DWORD PTR [esi+12]
  00572	76 07		 jbe	 SHORT $LN27@deflate

; 854  :                 flush_pending(strm);

  00574	8b cf		 mov	 ecx, edi
  00576	e8 00 00 00 00	 call	 _flush_pending
$LN27@deflate:

; 855  :             if (s->pending + 2 <= s->pending_buf_size) {

  0057b	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0057e	8d 42 02	 lea	 eax, DWORD PTR [edx+2]
  00581	3b 46 0c	 cmp	 eax, DWORD PTR [esi+12]
  00584	77 32		 ja	 SHORT $LN25@deflate

; 856  :                 put_byte(s, (Byte)(strm->adler & 0xff));

  00586	0f b6 47 30	 movzx	 eax, BYTE PTR [edi+48]
  0058a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 857  :                 put_byte(s, (Byte)((strm->adler >> 8) & 0xff));
; 858  :                 strm->adler = crc32(0L, Z_NULL, 0);

  0058d	6a 00		 push	 0
  0058f	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00592	ff 46 14	 inc	 DWORD PTR [esi+20]
  00595	0f b6 47 31	 movzx	 eax, BYTE PTR [edi+49]
  00599	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0059c	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0059f	6a 00		 push	 0
  005a1	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  005a4	ff 46 14	 inc	 DWORD PTR [esi+20]
  005a7	6a 00		 push	 0
  005a9	e8 00 00 00 00	 call	 _crc32@12
  005ae	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN28@deflate:

; 859  :                 s->status = BUSY_STATE;
; 860  :             }
; 861  :         }
; 862  :         else
; 863  :             s->status = BUSY_STATE;

  005b1	c7 46 04 71 00
	00 00		 mov	 DWORD PTR [esi+4], 113	; 00000071H
$LN25@deflate:

; 864  :     }
; 865  : #endif
; 866  : 
; 867  :     /* Flush as much pending output as possible */
; 868  :     if (s->pending != 0) {

  005b8	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  005bc	74 1f		 je	 SHORT $LN24@deflate

; 869  :         flush_pending(strm);

  005be	8b cf		 mov	 ecx, edi
  005c0	e8 00 00 00 00	 call	 _flush_pending

; 870  :         if (strm->avail_out == 0) {

  005c5	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  005c9	75 61		 jne	 SHORT $LN109@deflate
$LN114@deflate:

; 871  :             /* Since avail_out is 0, deflate will be called again with
; 872  :              * more output space, but possibly with both pending and
; 873  :              * avail_in equal to zero. There won't be anything to do,
; 874  :              * but this is not an error situation so make sure we
; 875  :              * return OK instead of BUF_ERROR at next call of deflate:
; 876  :              */
; 877  :             s->last_flush = -1;

  005cb	c7 46 28 ff ff
	ff ff		 mov	 DWORD PTR [esi+40], -1
$LN13@deflate:
  005d2	5b		 pop	 ebx
  005d3	5f		 pop	 edi

; 878  :             return Z_OK;

  005d4	33 c0		 xor	 eax, eax
  005d6	5e		 pop	 esi

; 974  : }

  005d7	8b e5		 mov	 esp, ebp
  005d9	5d		 pop	 ebp
  005da	c2 08 00	 ret	 8
$LN24@deflate:

; 879  :         }
; 880  : 
; 881  :     /* Make sure there is something to do and avoid duplicate consecutive
; 882  :      * flushes. For repeated and useless calls with Z_FINISH, we keep
; 883  :      * returning Z_STREAM_END instead of Z_BUF_ERROR.
; 884  :      */
; 885  :     } else if (strm->avail_in == 0 && RANK(flush) <= RANK(old_flush) &&
; 886  :                flush != Z_FINISH) {

  005dd	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0
  005e1	8b 5d 0c	 mov	 ebx, DWORD PTR _flush$[ebp]
  005e4	75 49		 jne	 SHORT $LN21@deflate
  005e6	8b 4d fc	 mov	 ecx, DWORD PTR _old_flush$1$[ebp]
  005e9	33 c0		 xor	 eax, eax
  005eb	83 f9 04	 cmp	 ecx, 4
  005ee	ba 09 00 00 00	 mov	 edx, 9
  005f3	0f 4f c2	 cmovg	 eax, edx
  005f6	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]
  005f9	2b d0		 sub	 edx, eax
  005fb	33 c9		 xor	 ecx, ecx
  005fd	83 fb 04	 cmp	 ebx, 4
  00600	b8 09 00 00 00	 mov	 eax, 9
  00605	0f 4f c8	 cmovg	 ecx, eax
  00608	8d 04 1b	 lea	 eax, DWORD PTR [ebx+ebx]
  0060b	2b c1		 sub	 eax, ecx
  0060d	3b c2		 cmp	 eax, edx
  0060f	7f 1e		 jg	 SHORT $LN21@deflate
  00611	83 fb 04	 cmp	 ebx, 4
  00614	74 19		 je	 SHORT $LN21@deflate

; 887  :         ERR_RETURN(strm, Z_BUF_ERROR);

  00616	a1 1c 00 00 00	 mov	 eax, DWORD PTR _z_errmsg+28
  0061b	5b		 pop	 ebx
  0061c	89 47 18	 mov	 DWORD PTR [edi+24], eax
  0061f	5f		 pop	 edi
  00620	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH
  00625	5e		 pop	 esi

; 974  : }

  00626	8b e5		 mov	 esp, ebp
  00628	5d		 pop	 ebp
  00629	c2 08 00	 ret	 8
$LN109@deflate:
  0062c	8b 5d 0c	 mov	 ebx, DWORD PTR _flush$[ebp]
$LN21@deflate:

; 888  :     }
; 889  : 
; 890  :     /* User must not provide more input after the first FINISH: */
; 891  :     if (s->status == FINISH_STATE && strm->avail_in != 0) {

  0062f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00632	3d 9a 02 00 00	 cmp	 eax, 666		; 0000029aH
  00637	75 1c		 jne	 SHORT $LN20@deflate
  00639	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0
  0063d	74 1c		 je	 SHORT $LN113@deflate

; 892  :         ERR_RETURN(strm, Z_BUF_ERROR);

  0063f	a1 1c 00 00 00	 mov	 eax, DWORD PTR _z_errmsg+28
  00644	5b		 pop	 ebx
  00645	89 47 18	 mov	 DWORD PTR [edi+24], eax
  00648	5f		 pop	 edi
  00649	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH
  0064e	5e		 pop	 esi

; 974  : }

  0064f	8b e5		 mov	 esp, ebp
  00651	5d		 pop	 ebp
  00652	c2 08 00	 ret	 8
$LN20@deflate:

; 893  :     }
; 894  : 
; 895  :     /* Start a new block or continue the current one.
; 896  :      */
; 897  :     if (strm->avail_in != 0 || s->lookahead != 0 ||
; 898  :         (flush != Z_NO_FLUSH && s->status != FINISH_STATE)) {

  00655	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0
  00659	75 19		 jne	 SHORT $LN18@deflate
$LN113@deflate:
  0065b	83 7e 74 00	 cmp	 DWORD PTR [esi+116], 0
  0065f	75 13		 jne	 SHORT $LN18@deflate
  00661	85 db		 test	 ebx, ebx
  00663	0f 84 e9 00 00
	00		 je	 $LN6@deflate
  00669	3d 9a 02 00 00	 cmp	 eax, 666		; 0000029aH
  0066e	0f 84 de 00 00
	00		 je	 $LN6@deflate
$LN18@deflate:

; 899  :         block_state bstate;
; 900  : 
; 901  :         bstate = s->strategy == Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :
; 902  :                     (s->strategy == Z_RLE ? deflate_rle(s, flush) :
; 903  :                         (*(configuration_table[s->level].func))(s, flush));

  00674	8b 86 88 00 00
	00		 mov	 eax, DWORD PTR [esi+136]
  0067a	83 f8 02	 cmp	 eax, 2
  0067d	75 0b		 jne	 SHORT $LN96@deflate
  0067f	8b d3		 mov	 edx, ebx
  00681	8b ce		 mov	 ecx, esi
  00683	e8 00 00 00 00	 call	 _deflate_huff
  00688	eb 27		 jmp	 SHORT $LN95@deflate
$LN96@deflate:
  0068a	83 f8 03	 cmp	 eax, 3
  0068d	75 0b		 jne	 SHORT $LN94@deflate
  0068f	8b d3		 mov	 edx, ebx
  00691	8b ce		 mov	 ecx, esi
  00693	e8 00 00 00 00	 call	 _deflate_rle
  00698	eb 17		 jmp	 SHORT $LN95@deflate
$LN94@deflate:
  0069a	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  006a0	53		 push	 ebx
  006a1	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  006a4	56		 push	 esi
  006a5	8b 04 85 08 00
	00 00		 mov	 eax, DWORD PTR _configuration_table[eax*4+8]
  006ac	ff d0		 call	 eax
  006ae	83 c4 08	 add	 esp, 8
$LN95@deflate:

; 904  : 
; 905  :         if (bstate == finish_started || bstate == finish_done) {

  006b1	83 f8 02	 cmp	 eax, 2
  006b4	74 05		 je	 SHORT $LN16@deflate
  006b6	83 f8 03	 cmp	 eax, 3
  006b9	75 07		 jne	 SHORT $LN17@deflate
$LN16@deflate:

; 906  :             s->status = FINISH_STATE;

  006bb	c7 46 04 9a 02
	00 00		 mov	 DWORD PTR [esi+4], 666	; 0000029aH
$LN17@deflate:

; 907  :         }
; 908  :         if (bstate == need_more || bstate == finish_started) {

  006c2	85 c0		 test	 eax, eax
  006c4	0f 84 69 01 00
	00		 je	 $LN14@deflate
  006ca	83 f8 02	 cmp	 eax, 2
  006cd	0f 84 60 01 00
	00		 je	 $LN14@deflate

; 910  :                 s->last_flush = -1; /* avoid BUF_ERROR next call, see above */
; 911  :             }
; 912  :             return Z_OK;
; 913  :             /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
; 914  :              * of deflate should use the same flush parameter to make sure
; 915  :              * that the flush is complete. So we don't have to output an
; 916  :              * empty block here, this will be done at next call. This also
; 917  :              * ensures that for a very small output buffer, we emit at most
; 918  :              * one empty block.
; 919  :              */
; 920  :         }
; 921  :         if (bstate == block_done) {

  006d3	83 f8 01	 cmp	 eax, 1
  006d6	75 7a		 jne	 SHORT $LN6@deflate

; 922  :             if (flush == Z_PARTIAL_FLUSH) {

  006d8	3b d8		 cmp	 ebx, eax
  006da	75 09		 jne	 SHORT $LN11@deflate

; 923  :                 _tr_align(s);

  006dc	8b ce		 mov	 ecx, esi
  006de	e8 00 00 00 00	 call	 __tr_align
  006e3	eb 5c		 jmp	 SHORT $LN7@deflate
$LN11@deflate:

; 924  :             } else if (flush != Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

  006e5	83 fb 05	 cmp	 ebx, 5
  006e8	74 57		 je	 SHORT $LN7@deflate

; 925  :                 _tr_stored_block(s, (char*)0, 0L, 0);

  006ea	6a 00		 push	 0
  006ec	6a 00		 push	 0
  006ee	33 d2		 xor	 edx, edx
  006f0	8b ce		 mov	 ecx, esi
  006f2	e8 00 00 00 00	 call	 __tr_stored_block
  006f7	83 c4 08	 add	 esp, 8

; 926  :                 /* For a full flush, this empty block will be recognized
; 927  :                  * as a special marker by inflate_sync().
; 928  :                  */
; 929  :                 if (flush == Z_FULL_FLUSH) {

  006fa	83 fb 03	 cmp	 ebx, 3
  006fd	75 42		 jne	 SHORT $LN7@deflate

; 930  :                     CLEAR_HASH(s);             /* forget history */

  006ff	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00702	8b 4e 4c	 mov	 ecx, DWORD PTR [esi+76]
  00705	33 d2		 xor	 edx, edx
  00707	66 89 54 48 fe	 mov	 WORD PTR [eax+ecx*2-2], dx
  0070c	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  0070f	8d 04 45 fe ff
	ff ff		 lea	 eax, DWORD PTR [eax*2-2]
  00716	50		 push	 eax
  00717	52		 push	 edx
  00718	ff 76 44	 push	 DWORD PTR [esi+68]
  0071b	e8 00 00 00 00	 call	 _memset
  00720	83 c4 0c	 add	 esp, 12			; 0000000cH

; 931  :                     if (s->lookahead == 0) {

  00723	83 7e 74 00	 cmp	 DWORD PTR [esi+116], 0
  00727	75 18		 jne	 SHORT $LN7@deflate

; 932  :                         s->strstart = 0;

  00729	c7 46 6c 00 00
	00 00		 mov	 DWORD PTR [esi+108], 0

; 933  :                         s->block_start = 0L;

  00730	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0

; 934  :                         s->insert = 0;

  00737	c7 86 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5812], 0
$LN7@deflate:

; 935  :                     }
; 936  :                 }
; 937  :             }
; 938  :             flush_pending(strm);

  00741	8b cf		 mov	 ecx, edi
  00743	e8 00 00 00 00	 call	 _flush_pending

; 939  :             if (strm->avail_out == 0) {

  00748	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  0074c	0f 84 79 fe ff
	ff		 je	 $LN114@deflate
$LN6@deflate:

; 940  :               s->last_flush = -1; /* avoid BUF_ERROR at next call, see above */
; 941  :               return Z_OK;
; 942  :             }
; 943  :         }
; 944  :     }
; 945  :     Assert(strm->avail_out > 0, "bug2");
; 946  : 
; 947  :     if (flush != Z_FINISH) return Z_OK;

  00752	83 fb 04	 cmp	 ebx, 4
  00755	0f 85 77 fe ff
	ff		 jne	 $LN13@deflate

; 948  :     if (s->wrap <= 0) return Z_STREAM_END;

  0075b	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0075e	85 c0		 test	 eax, eax
  00760	7f 0c		 jg	 SHORT $LN4@deflate
  00762	8d 43 fd	 lea	 eax, DWORD PTR [ebx-3]
  00765	5b		 pop	 ebx
  00766	5f		 pop	 edi
  00767	5e		 pop	 esi

; 974  : }

  00768	8b e5		 mov	 esp, ebp
  0076a	5d		 pop	 ebp
  0076b	c2 08 00	 ret	 8
$LN4@deflate:

; 949  : 
; 950  :     /* Write the trailer */
; 951  : #ifdef GZIP
; 952  :     if (s->wrap == 2) {

  0076e	83 f8 02	 cmp	 eax, 2
  00771	0f 85 82 00 00
	00		 jne	 $LN3@deflate

; 953  :         put_byte(s, (Byte)(strm->adler & 0xff));

  00777	0f b6 47 30	 movzx	 eax, BYTE PTR [edi+48]
  0077b	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0077e	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00781	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00784	ff 46 14	 inc	 DWORD PTR [esi+20]

; 954  :         put_byte(s, (Byte)((strm->adler >> 8) & 0xff));

  00787	0f b6 47 31	 movzx	 eax, BYTE PTR [edi+49]
  0078b	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0078e	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00791	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00794	ff 46 14	 inc	 DWORD PTR [esi+20]

; 955  :         put_byte(s, (Byte)((strm->adler >> 16) & 0xff));

  00797	0f b6 47 32	 movzx	 eax, BYTE PTR [edi+50]
  0079b	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0079e	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  007a1	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  007a4	ff 46 14	 inc	 DWORD PTR [esi+20]

; 956  :         put_byte(s, (Byte)((strm->adler >> 24) & 0xff));

  007a7	0f b6 47 33	 movzx	 eax, BYTE PTR [edi+51]
  007ab	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  007ae	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  007b1	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  007b4	ff 46 14	 inc	 DWORD PTR [esi+20]

; 957  :         put_byte(s, (Byte)(strm->total_in & 0xff));

  007b7	0f b6 47 08	 movzx	 eax, BYTE PTR [edi+8]
  007bb	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  007be	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  007c1	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  007c4	ff 46 14	 inc	 DWORD PTR [esi+20]

; 958  :         put_byte(s, (Byte)((strm->total_in >> 8) & 0xff));

  007c7	0f b6 47 09	 movzx	 eax, BYTE PTR [edi+9]
  007cb	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  007ce	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  007d1	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  007d4	ff 46 14	 inc	 DWORD PTR [esi+20]

; 959  :         put_byte(s, (Byte)((strm->total_in >> 16) & 0xff));

  007d7	0f b6 47 0a	 movzx	 eax, BYTE PTR [edi+10]
  007db	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  007de	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  007e1	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  007e4	ff 46 14	 inc	 DWORD PTR [esi+20]

; 960  :         put_byte(s, (Byte)((strm->total_in >> 24) & 0xff));

  007e7	0f b6 47 0b	 movzx	 eax, BYTE PTR [edi+11]
  007eb	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  007ee	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  007f1	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  007f4	ff 46 14	 inc	 DWORD PTR [esi+20]

; 961  :     }
; 962  :     else

  007f7	eb 16		 jmp	 SHORT $LN2@deflate
$LN3@deflate:

; 963  : #endif
; 964  :     {
; 965  :         putShortMSB(s, (uInt)(strm->adler >> 16));

  007f9	0f b7 57 32	 movzx	 edx, WORD PTR [edi+50]
  007fd	8b ce		 mov	 ecx, esi
  007ff	e8 00 00 00 00	 call	 _putShortMSB

; 966  :         putShortMSB(s, (uInt)(strm->adler & 0xffff));

  00804	0f b7 57 30	 movzx	 edx, WORD PTR [edi+48]
  00808	8b ce		 mov	 ecx, esi
  0080a	e8 00 00 00 00	 call	 _putShortMSB
$LN2@deflate:

; 967  :     }
; 968  :     flush_pending(strm);

  0080f	8b cf		 mov	 ecx, edi
  00811	e8 00 00 00 00	 call	 _flush_pending

; 969  :     /* If avail_out is zero, the application will call deflate again
; 970  :      * to flush the rest.
; 971  :      */
; 972  :     if (s->wrap > 0) s->wrap = -s->wrap; /* write the trailer only once! */

  00816	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00819	85 c0		 test	 eax, eax
  0081b	7e 05		 jle	 SHORT $LN1@deflate
  0081d	f7 d8		 neg	 eax
  0081f	89 46 18	 mov	 DWORD PTR [esi+24], eax
$LN1@deflate:

; 973  :     return s->pending != 0 ? Z_OK : Z_STREAM_END;

  00822	33 c0		 xor	 eax, eax
  00824	39 46 14	 cmp	 DWORD PTR [esi+20], eax
  00827	5b		 pop	 ebx
  00828	5f		 pop	 edi
  00829	0f 94 c0	 sete	 al
  0082c	5e		 pop	 esi

; 974  : }

  0082d	8b e5		 mov	 esp, ebp
  0082f	5d		 pop	 ebp
  00830	c2 08 00	 ret	 8
$LN14@deflate:

; 909  :             if (strm->avail_out == 0) {

  00833	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  00837	0f 85 95 fd ff
	ff		 jne	 $LN13@deflate

; 871  :             /* Since avail_out is 0, deflate will be called again with
; 872  :              * more output space, but possibly with both pending and
; 873  :              * avail_in equal to zero. There won't be anything to do,
; 874  :              * but this is not an error situation so make sure we
; 875  :              * return OK instead of BUF_ERROR at next call of deflate:
; 876  :              */
; 877  :             s->last_flush = -1;

  0083d	5b		 pop	 ebx
  0083e	5f		 pop	 edi
  0083f	c7 46 28 ff ff
	ff ff		 mov	 DWORD PTR [esi+40], -1

; 878  :             return Z_OK;

  00846	33 c0		 xor	 eax, eax
  00848	5e		 pop	 esi

; 974  : }

  00849	8b e5		 mov	 esp, ebp
  0084b	5d		 pop	 ebp
  0084c	c2 08 00	 ret	 8
$LN80@deflate:

; 679  :         ERR_RETURN(strm, Z_STREAM_ERROR);

  0084f	a1 10 00 00 00	 mov	 eax, DWORD PTR _z_errmsg+16
  00854	89 47 18	 mov	 DWORD PTR [edi+24], eax
$LN82@deflate:
  00857	5f		 pop	 edi
  00858	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0085d	5e		 pop	 esi

; 974  : }

  0085e	8b e5		 mov	 esp, ebp
  00860	5d		 pop	 ebp
  00861	c2 08 00	 ret	 8
_deflate@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\trunk2012\contribs\windows\x86\zlib\zlib-1.2.8\deflate.c
;	COMDAT _deflateInit_@16
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_level$ = 12						; size = 4
_version$ = 16						; size = 4
_stream_size$ = 20					; size = 4
_deflateInit_@16 PROC					; COMDAT

; 204  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 205  :     return deflateInit2_(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL,
; 206  :                          Z_DEFAULT_STRATEGY, version, stream_size);

  00003	ff 75 14	 push	 DWORD PTR _stream_size$[ebp]
  00006	ff 75 10	 push	 DWORD PTR _version$[ebp]
  00009	6a 00		 push	 0
  0000b	6a 08		 push	 8
  0000d	6a 0f		 push	 15			; 0000000fH
  0000f	6a 08		 push	 8
  00011	ff 75 0c	 push	 DWORD PTR _level$[ebp]
  00014	ff 75 08	 push	 DWORD PTR _strm$[ebp]
  00017	e8 00 00 00 00	 call	 _deflateInit2_@32

; 207  :     /* To do: ignore strm->next_in if we use it as window */
; 208  : }

  0001c	5d		 pop	 ebp
  0001d	c2 10 00	 ret	 16			; 00000010H
_deflateInit_@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\trunk2012\contribs\windows\x86\zlib\zlib-1.2.8\deflate.c
;	COMDAT _deflateEnd@4
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_deflateEnd@4 PROC					; COMDAT

; 979  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 980  :     int status;
; 981  : 
; 982  :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

  00004	8b 75 08	 mov	 esi, DWORD PTR _strm$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	0f 84 bd 00 00
	00		 je	 $LN6@deflateEnd
  0000f	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00012	85 c0		 test	 eax, eax
  00014	0f 84 b2 00 00
	00		 je	 $LN6@deflateEnd

; 983  : 
; 984  :     status = strm->state->status;

  0001a	57		 push	 edi
  0001b	8b 78 04	 mov	 edi, DWORD PTR [eax+4]

; 985  :     if (status != INIT_STATE &&
; 986  :         status != EXTRA_STATE &&
; 987  :         status != NAME_STATE &&
; 988  :         status != COMMENT_STATE &&
; 989  :         status != HCRC_STATE &&
; 990  :         status != BUSY_STATE &&
; 991  :         status != FINISH_STATE) {

  0001e	83 ff 2a	 cmp	 edi, 42			; 0000002aH
  00021	74 2c		 je	 SHORT $LN5@deflateEnd
  00023	83 ff 45	 cmp	 edi, 69			; 00000045H
  00026	74 27		 je	 SHORT $LN5@deflateEnd
  00028	83 ff 49	 cmp	 edi, 73			; 00000049H
  0002b	74 22		 je	 SHORT $LN5@deflateEnd
  0002d	83 ff 5b	 cmp	 edi, 91			; 0000005bH
  00030	74 1d		 je	 SHORT $LN5@deflateEnd
  00032	83 ff 67	 cmp	 edi, 103		; 00000067H
  00035	74 18		 je	 SHORT $LN5@deflateEnd
  00037	83 ff 71	 cmp	 edi, 113		; 00000071H
  0003a	74 13		 je	 SHORT $LN5@deflateEnd
  0003c	81 ff 9a 02 00
	00		 cmp	 edi, 666		; 0000029aH
  00042	74 0b		 je	 SHORT $LN5@deflateEnd

; 992  :       return Z_STREAM_ERROR;

  00044	5f		 pop	 edi
  00045	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0004a	5e		 pop	 esi

; 1005 : }

  0004b	5d		 pop	 ebp
  0004c	c2 04 00	 ret	 4
$LN5@deflateEnd:

; 993  :     }
; 994  : 
; 995  :     /* Deallocate in reverse order of allocations: */
; 996  :     TRY_FREE(strm, strm->state->pending_buf);

  0004f	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00052	85 c0		 test	 eax, eax
  00054	74 0c		 je	 SHORT $LN4@deflateEnd
  00056	50		 push	 eax
  00057	ff 76 28	 push	 DWORD PTR [esi+40]
  0005a	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0005d	ff d0		 call	 eax
  0005f	83 c4 08	 add	 esp, 8
$LN4@deflateEnd:

; 997  :     TRY_FREE(strm, strm->state->head);

  00062	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00065	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00068	85 c0		 test	 eax, eax
  0006a	74 0c		 je	 SHORT $LN3@deflateEnd
  0006c	50		 push	 eax
  0006d	ff 76 28	 push	 DWORD PTR [esi+40]
  00070	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00073	ff d0		 call	 eax
  00075	83 c4 08	 add	 esp, 8
$LN3@deflateEnd:

; 998  :     TRY_FREE(strm, strm->state->prev);

  00078	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0007b	8b 40 40	 mov	 eax, DWORD PTR [eax+64]
  0007e	85 c0		 test	 eax, eax
  00080	74 0c		 je	 SHORT $LN2@deflateEnd
  00082	50		 push	 eax
  00083	ff 76 28	 push	 DWORD PTR [esi+40]
  00086	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00089	ff d0		 call	 eax
  0008b	83 c4 08	 add	 esp, 8
$LN2@deflateEnd:

; 999  :     TRY_FREE(strm, strm->state->window);

  0008e	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00091	8b 40 38	 mov	 eax, DWORD PTR [eax+56]
  00094	85 c0		 test	 eax, eax
  00096	74 0c		 je	 SHORT $LN1@deflateEnd
  00098	50		 push	 eax
  00099	ff 76 28	 push	 DWORD PTR [esi+40]
  0009c	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0009f	ff d0		 call	 eax
  000a1	83 c4 08	 add	 esp, 8
$LN1@deflateEnd:

; 1000 : 
; 1001 :     ZFREE(strm, strm->state);

  000a4	ff 76 1c	 push	 DWORD PTR [esi+28]
  000a7	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  000aa	ff 76 28	 push	 DWORD PTR [esi+40]
  000ad	ff d0		 call	 eax
  000af	83 c4 08	 add	 esp, 8

; 1002 :     strm->state = Z_NULL;
; 1003 : 
; 1004 :     return status == BUSY_STATE ? Z_DATA_ERROR : Z_OK;

  000b2	33 c0		 xor	 eax, eax
  000b4	83 ff 71	 cmp	 edi, 113		; 00000071H
  000b7	b9 fd ff ff ff	 mov	 ecx, -3			; fffffffdH
  000bc	5f		 pop	 edi
  000bd	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  000c4	0f 44 c1	 cmove	 eax, ecx
  000c7	5e		 pop	 esi

; 1005 : }

  000c8	5d		 pop	 ebp
  000c9	c2 04 00	 ret	 4
$LN6@deflateEnd:

; 980  :     int status;
; 981  : 
; 982  :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

  000cc	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  000d1	5e		 pop	 esi

; 1005 : }

  000d2	5d		 pop	 ebp
  000d3	c2 04 00	 ret	 4
_deflateEnd@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\trunk2012\contribs\windows\x86\zlib\zlib-1.2.8\deflate.c
;	COMDAT _deflateInit2_@32
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_level$ = 12						; size = 4
_method$ = 16						; size = 4
_windowBits$ = 20					; size = 4
_memLevel$ = 24						; size = 4
_strategy$ = 28						; size = 4
_version$ = 32						; size = 4
_stream_size$ = 36					; size = 4
_deflateInit2_@32 PROC					; COMDAT

; 221  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 222  :     deflate_state *s;
; 223  :     int wrap = 1;
; 224  :     static const char my_version[] = ZLIB_VERSION;
; 225  : 
; 226  :     ushf *overlay;
; 227  :     /* We overlay pending_buf and d_buf+l_buf. This works since the average
; 228  :      * output size for (length,distance) codes is <= 24 bits.
; 229  :      */
; 230  : 
; 231  :     if (version == Z_NULL || version[0] != my_version[0] ||
; 232  :         stream_size != sizeof(z_stream)) {

  00003	8b 45 20	 mov	 eax, DWORD PTR _version$[ebp]
  00006	56		 push	 esi
  00007	be 01 00 00 00	 mov	 esi, 1
  0000c	85 c0		 test	 eax, eax
  0000e	0f 84 0b 02 00
	00		 je	 $LN14@deflateIni
  00014	80 38 31	 cmp	 BYTE PTR [eax], 49	; 00000031H
  00017	0f 85 02 02 00
	00		 jne	 $LN14@deflateIni
  0001d	83 7d 24 38	 cmp	 DWORD PTR _stream_size$[ebp], 56 ; 00000038H
  00021	0f 85 f8 01 00
	00		 jne	 $LN14@deflateIni

; 234  :     }
; 235  :     if (strm == Z_NULL) return Z_STREAM_ERROR;

  00027	57		 push	 edi
  00028	8b 7d 08	 mov	 edi, DWORD PTR _strm$[ebp]
  0002b	85 ff		 test	 edi, edi
  0002d	75 09		 jne	 SHORT $LN13@deflateIni
  0002f	5f		 pop	 edi
  00030	8d 46 fd	 lea	 eax, DWORD PTR [esi-3]
  00033	5e		 pop	 esi

; 318  : }

  00034	5d		 pop	 ebp
  00035	c2 20 00	 ret	 32			; 00000020H
$LN13@deflateIni:

; 236  : 
; 237  :     strm->msg = Z_NULL;
; 238  :     if (strm->zalloc == (alloc_func)0) {

  00038	83 7f 20 00	 cmp	 DWORD PTR [edi+32], 0
  0003c	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
  00043	75 0e		 jne	 SHORT $LN12@deflateIni

; 239  : #ifdef Z_SOLO
; 240  :         return Z_STREAM_ERROR;
; 241  : #else
; 242  :         strm->zalloc = zcalloc;

  00045	c7 47 20 00 00
	00 00		 mov	 DWORD PTR [edi+32], OFFSET _zcalloc

; 243  :         strm->opaque = (voidpf)0;

  0004c	c7 47 28 00 00
	00 00		 mov	 DWORD PTR [edi+40], 0
$LN12@deflateIni:

; 244  : #endif
; 245  :     }
; 246  :     if (strm->zfree == (free_func)0)

  00053	83 7f 24 00	 cmp	 DWORD PTR [edi+36], 0
  00057	75 07		 jne	 SHORT $LN11@deflateIni

; 247  : #ifdef Z_SOLO
; 248  :         return Z_STREAM_ERROR;
; 249  : #else
; 250  :         strm->zfree = zcfree;

  00059	c7 47 24 00 00
	00 00		 mov	 DWORD PTR [edi+36], OFFSET _zcfree
$LN11@deflateIni:

; 251  : #endif
; 252  : 
; 253  : #ifdef FASTEST
; 254  :     if (level != 0) level = 1;
; 255  : #else
; 256  :     if (level == Z_DEFAULT_COMPRESSION) level = 6;

  00060	8b 4d 0c	 mov	 ecx, DWORD PTR _level$[ebp]
  00063	83 f9 ff	 cmp	 ecx, -1
  00066	53		 push	 ebx

; 257  : #endif
; 258  : 
; 259  :     if (windowBits < 0) { /* suppress zlib wrapper */

  00067	8b 5d 14	 mov	 ebx, DWORD PTR _windowBits$[ebp]
  0006a	b8 06 00 00 00	 mov	 eax, 6
  0006f	0f 44 c8	 cmove	 ecx, eax
  00072	89 4d 0c	 mov	 DWORD PTR _level$[ebp], ecx
  00075	85 db		 test	 ebx, ebx
  00077	79 06		 jns	 SHORT $LN9@deflateIni

; 260  :         wrap = 0;

  00079	33 f6		 xor	 esi, esi

; 261  :         windowBits = -windowBits;

  0007b	f7 db		 neg	 ebx
  0007d	eb 0d		 jmp	 SHORT $LN7@deflateIni
$LN9@deflateIni:

; 262  :     }
; 263  : #ifdef GZIP
; 264  :     else if (windowBits > 15) {

  0007f	83 fb 0f	 cmp	 ebx, 15			; 0000000fH
  00082	7e 08		 jle	 SHORT $LN7@deflateIni

; 265  :         wrap = 2;       /* write gzip wrapper instead */

  00084	be 02 00 00 00	 mov	 esi, 2

; 266  :         windowBits -= 16;

  00089	83 eb 10	 sub	 ebx, 16			; 00000010H
$LN7@deflateIni:

; 267  :     }
; 268  : #endif
; 269  :     if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method != Z_DEFLATED ||
; 270  :         windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
; 271  :         strategy < 0 || strategy > Z_FIXED) {

  0008c	8b 45 18	 mov	 eax, DWORD PTR _memLevel$[ebp]
  0008f	48		 dec	 eax
  00090	83 f8 08	 cmp	 eax, 8
  00093	0f 87 7a 01 00
	00		 ja	 $LN5@deflateIni
  00099	83 7d 10 08	 cmp	 DWORD PTR _method$[ebp], 8
  0009d	0f 85 70 01 00
	00		 jne	 $LN5@deflateIni
  000a3	8d 43 f8	 lea	 eax, DWORD PTR [ebx-8]
  000a6	83 f8 07	 cmp	 eax, 7
  000a9	0f 87 64 01 00
	00		 ja	 $LN5@deflateIni
  000af	83 f9 09	 cmp	 ecx, 9
  000b2	0f 87 5b 01 00
	00		 ja	 $LN5@deflateIni
  000b8	83 7d 1c 04	 cmp	 DWORD PTR _strategy$[ebp], 4
  000bc	0f 87 51 01 00
	00		 ja	 $LN5@deflateIni

; 273  :     }
; 274  :     if (windowBits == 8) windowBits = 9;  /* until 256-byte window bug fixed */
; 275  :     s = (deflate_state *) ZALLOC(strm, 1, sizeof(deflate_state));

  000c2	68 c4 16 00 00	 push	 5828			; 000016c4H
  000c7	b8 09 00 00 00	 mov	 eax, 9
  000cc	83 fb 08	 cmp	 ebx, 8
  000cf	6a 01		 push	 1
  000d1	ff 77 28	 push	 DWORD PTR [edi+40]
  000d4	0f 44 d8	 cmove	 ebx, eax
  000d7	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  000da	ff d0		 call	 eax
  000dc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 276  :     if (s == Z_NULL) return Z_MEM_ERROR;

  000df	85 c0		 test	 eax, eax
  000e1	0f 84 20 01 00
	00		 je	 $LN20@deflateIni

; 277  :     strm->state = (struct internal_state FAR *)s;

  000e7	89 47 1c	 mov	 DWORD PTR [edi+28], eax

; 278  :     s->strm = strm;
; 279  : 
; 280  :     s->wrap = wrap;

  000ea	89 70 18	 mov	 DWORD PTR [eax+24], esi

; 281  :     s->gzhead = Z_NULL;
; 282  :     s->w_bits = windowBits;

  000ed	89 58 30	 mov	 DWORD PTR [eax+48], ebx

; 283  :     s->w_size = 1 << s->w_bits;

  000f0	8b cb		 mov	 ecx, ebx
  000f2	8b d8		 mov	 ebx, eax
  000f4	89 38		 mov	 DWORD PTR [eax], edi
  000f6	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0
  000fd	be 01 00 00 00	 mov	 esi, 1
  00102	d3 e6		 shl	 esi, cl

; 284  :     s->w_mask = s->w_size - 1;
; 285  : 
; 286  :     s->hash_bits = memLevel + 7;

  00104	8b 4d 18	 mov	 ecx, DWORD PTR _memLevel$[ebp]
  00107	83 c1 07	 add	 ecx, 7
  0010a	89 4b 50	 mov	 DWORD PTR [ebx+80], ecx

; 287  :     s->hash_size = 1 << s->hash_bits;
; 288  :     s->hash_mask = s->hash_size - 1;
; 289  :     s->hash_shift =  ((s->hash_bits+MIN_MATCH-1)/MIN_MATCH);
; 290  : 
; 291  :     s->window = (Bytef *) ZALLOC(strm, s->w_size, 2*sizeof(Byte));

  0010d	6a 02		 push	 2
  0010f	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  00112	89 43 34	 mov	 DWORD PTR [ebx+52], eax
  00115	b8 01 00 00 00	 mov	 eax, 1
  0011a	d3 e0		 shl	 eax, cl
  0011c	83 c1 02	 add	 ecx, 2
  0011f	89 73 2c	 mov	 DWORD PTR [ebx+44], esi
  00122	56		 push	 esi
  00123	89 43 4c	 mov	 DWORD PTR [ebx+76], eax
  00126	48		 dec	 eax
  00127	89 43 54	 mov	 DWORD PTR [ebx+84], eax
  0012a	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  0012f	f7 e1		 mul	 ecx
  00131	d1 ea		 shr	 edx, 1
  00133	89 53 58	 mov	 DWORD PTR [ebx+88], edx
  00136	ff 77 28	 push	 DWORD PTR [edi+40]
  00139	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  0013c	ff d0		 call	 eax

; 292  :     s->prev   = (Posf *)  ZALLOC(strm, s->w_size, sizeof(Pos));

  0013e	6a 02		 push	 2
  00140	ff 73 2c	 push	 DWORD PTR [ebx+44]
  00143	89 43 38	 mov	 DWORD PTR [ebx+56], eax
  00146	ff 77 28	 push	 DWORD PTR [edi+40]
  00149	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  0014c	ff d0		 call	 eax

; 293  :     s->head   = (Posf *)  ZALLOC(strm, s->hash_size, sizeof(Pos));

  0014e	6a 02		 push	 2
  00150	ff 73 4c	 push	 DWORD PTR [ebx+76]
  00153	89 43 40	 mov	 DWORD PTR [ebx+64], eax
  00156	ff 77 28	 push	 DWORD PTR [edi+40]
  00159	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  0015c	ff d0		 call	 eax

; 294  : 
; 295  :     s->high_water = 0;      /* nothing written to s->window yet */
; 296  : 
; 297  :     s->lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

  0015e	8b 4d 18	 mov	 ecx, DWORD PTR _memLevel$[ebp]
  00161	89 43 44	 mov	 DWORD PTR [ebx+68], eax
  00164	8d 49 06	 lea	 ecx, DWORD PTR [ecx+6]
  00167	b8 01 00 00 00	 mov	 eax, 1
  0016c	d3 e0		 shl	 eax, cl

; 298  : 
; 299  :     overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);

  0016e	6a 04		 push	 4
  00170	c7 83 c0 16 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+5824], 0
  0017a	50		 push	 eax
  0017b	89 83 9c 16 00
	00		 mov	 DWORD PTR [ebx+5788], eax
  00181	ff 77 28	 push	 DWORD PTR [edi+40]
  00184	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00187	ff d0		 call	 eax

; 300  :     s->pending_buf = (uchf *) overlay;
; 301  :     s->pending_buf_size = (ulg)s->lit_bufsize * (sizeof(ush)+2L);

  00189	8b b3 9c 16 00
	00		 mov	 esi, DWORD PTR [ebx+5788]
  0018f	83 c4 30	 add	 esp, 48			; 00000030H

; 302  : 
; 303  :     if (s->window == Z_NULL || s->prev == Z_NULL || s->head == Z_NULL ||
; 304  :         s->pending_buf == Z_NULL) {

  00192	83 7b 38 00	 cmp	 DWORD PTR [ebx+56], 0
  00196	8b d0		 mov	 edx, eax
  00198	8d 0c b5 00 00
	00 00		 lea	 ecx, DWORD PTR [esi*4]
  0019f	89 53 08	 mov	 DWORD PTR [ebx+8], edx
  001a2	89 4b 0c	 mov	 DWORD PTR [ebx+12], ecx
  001a5	74 4b		 je	 SHORT $LN1@deflateIni
  001a7	83 7b 40 00	 cmp	 DWORD PTR [ebx+64], 0
  001ab	74 45		 je	 SHORT $LN1@deflateIni
  001ad	83 7b 44 00	 cmp	 DWORD PTR [ebx+68], 0
  001b1	74 3f		 je	 SHORT $LN1@deflateIni
  001b3	85 d2		 test	 edx, edx
  001b5	74 3b		 je	 SHORT $LN1@deflateIni

; 309  :     }
; 310  :     s->d_buf = overlay + s->lit_bufsize/sizeof(ush);

  001b7	8b c6		 mov	 eax, esi
  001b9	d1 e8		 shr	 eax, 1

; 311  :     s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
; 312  : 
; 313  :     s->level = level;
; 314  :     s->strategy = strategy;
; 315  :     s->method = (Byte)method;
; 316  : 
; 317  :     return deflateReset(strm);

  001bb	57		 push	 edi
  001bc	8d 04 42	 lea	 eax, DWORD PTR [edx+eax*2]
  001bf	89 83 a4 16 00
	00		 mov	 DWORD PTR [ebx+5796], eax
  001c5	8d 04 72	 lea	 eax, DWORD PTR [edx+esi*2]
  001c8	03 c6		 add	 eax, esi
  001ca	89 83 98 16 00
	00		 mov	 DWORD PTR [ebx+5784], eax
  001d0	8b 45 0c	 mov	 eax, DWORD PTR _level$[ebp]
  001d3	89 83 84 00 00
	00		 mov	 DWORD PTR [ebx+132], eax
  001d9	8b 45 1c	 mov	 eax, DWORD PTR _strategy$[ebp]
  001dc	89 83 88 00 00
	00		 mov	 DWORD PTR [ebx+136], eax
  001e2	c6 43 24 08	 mov	 BYTE PTR [ebx+36], 8
  001e6	e8 00 00 00 00	 call	 _deflateReset@4
  001eb	5b		 pop	 ebx
  001ec	5f		 pop	 edi
  001ed	5e		 pop	 esi

; 318  : }

  001ee	5d		 pop	 ebp
  001ef	c2 20 00	 ret	 32			; 00000020H
$LN1@deflateIni:

; 305  :         s->status = FINISH_STATE;

  001f2	c7 43 04 9a 02
	00 00		 mov	 DWORD PTR [ebx+4], 666	; 0000029aH

; 306  :         strm->msg = ERR_MSG(Z_MEM_ERROR);

  001f9	a1 18 00 00 00	 mov	 eax, DWORD PTR _z_errmsg+24

; 307  :         deflateEnd (strm);

  001fe	57		 push	 edi
  001ff	89 47 18	 mov	 DWORD PTR [edi+24], eax
  00202	e8 00 00 00 00	 call	 _deflateEnd@4
$LN20@deflateIni:

; 308  :         return Z_MEM_ERROR;

  00207	5b		 pop	 ebx
  00208	5f		 pop	 edi
  00209	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  0020e	5e		 pop	 esi

; 318  : }

  0020f	5d		 pop	 ebp
  00210	c2 20 00	 ret	 32			; 00000020H
$LN5@deflateIni:
  00213	5b		 pop	 ebx
  00214	5f		 pop	 edi

; 272  :         return Z_STREAM_ERROR;

  00215	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0021a	5e		 pop	 esi

; 318  : }

  0021b	5d		 pop	 ebp
  0021c	c2 20 00	 ret	 32			; 00000020H
$LN14@deflateIni:

; 233  :         return Z_VERSION_ERROR;

  0021f	b8 fa ff ff ff	 mov	 eax, -6			; fffffffaH
  00224	5e		 pop	 esi

; 318  : }

  00225	5d		 pop	 ebp
  00226	c2 20 00	 ret	 32			; 00000020H
_deflateInit2_@32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\trunk2012\contribs\windows\x86\zlib\zlib-1.2.8\deflate.c
;	COMDAT _deflateSetDictionary@12
_TEXT	SEGMENT
_avail$1$ = -8						; size = 4
_wrap$1$ = -4						; size = 4
_strm$ = 8						; size = 4
_n$1$ = 12						; size = 4
_dictionary$ = 12					; size = 4
_next$1$ = 16						; size = 4
_dictLength$ = 16					; size = 4
_deflateSetDictionary@12 PROC				; COMDAT

; 325  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 326  :     deflate_state *s;
; 327  :     uInt str, n;
; 328  :     int wrap;
; 329  :     unsigned avail;
; 330  :     z_const unsigned char *next;
; 331  : 
; 332  :     if (strm == Z_NULL || strm->state == Z_NULL || dictionary == Z_NULL)

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _strm$[ebp]
  0000a	56		 push	 esi
  0000b	85 db		 test	 ebx, ebx
  0000d	0f 84 7c 01 00
	00		 je	 $LN12@deflateSet
  00013	8b 73 1c	 mov	 esi, DWORD PTR [ebx+28]
  00016	85 f6		 test	 esi, esi
  00018	0f 84 71 01 00
	00		 je	 $LN12@deflateSet
  0001e	8b 4d 0c	 mov	 ecx, DWORD PTR _dictionary$[ebp]
  00021	85 c9		 test	 ecx, ecx
  00023	0f 84 66 01 00
	00		 je	 $LN12@deflateSet

; 334  :     s = strm->state;
; 335  :     wrap = s->wrap;

  00029	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0002c	89 45 fc	 mov	 DWORD PTR _wrap$1$[ebp], eax

; 336  :     if (wrap == 2 || (wrap == 1 && s->status != INIT_STATE) || s->lookahead)

  0002f	83 f8 02	 cmp	 eax, 2
  00032	0f 84 57 01 00
	00		 je	 $LN12@deflateSet
  00038	83 f8 01	 cmp	 eax, 1
  0003b	75 0a		 jne	 SHORT $LN9@deflateSet
  0003d	83 7e 04 2a	 cmp	 DWORD PTR [esi+4], 42	; 0000002aH
  00041	0f 85 48 01 00
	00		 jne	 $LN12@deflateSet
$LN9@deflateSet:
  00047	83 7e 74 00	 cmp	 DWORD PTR [esi+116], 0
  0004b	0f 85 3e 01 00
	00		 jne	 $LN12@deflateSet

; 337  :         return Z_STREAM_ERROR;
; 338  : 
; 339  :     /* when using zlib wrappers, compute Adler-32 for provided dictionary */
; 340  :     if (wrap == 1)

  00051	57		 push	 edi
  00052	8b 7d 10	 mov	 edi, DWORD PTR _dictLength$[ebp]
  00055	83 f8 01	 cmp	 eax, 1
  00058	75 13		 jne	 SHORT $LN8@deflateSet

; 341  :         strm->adler = adler32(strm->adler, dictionary, dictLength);

  0005a	57		 push	 edi
  0005b	51		 push	 ecx
  0005c	ff 73 30	 push	 DWORD PTR [ebx+48]
  0005f	e8 00 00 00 00	 call	 _adler32@12
  00064	8b 4d 0c	 mov	 ecx, DWORD PTR _dictionary$[ebp]
  00067	89 43 30	 mov	 DWORD PTR [ebx+48], eax
  0006a	8b 45 fc	 mov	 eax, DWORD PTR _wrap$1$[ebp]
$LN8@deflateSet:

; 342  :     s->wrap = 0;                    /* avoid computing Adler-32 in read_buf */

  0006d	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 343  : 
; 344  :     /* if dictionary would fill window, just replace the history */
; 345  :     if (dictLength >= s->w_size) {

  00074	3b 7e 2c	 cmp	 edi, DWORD PTR [esi+44]
  00077	72 4b		 jb	 SHORT $LN7@deflateSet

; 346  :         if (wrap == 0) {            /* already empty otherwise */

  00079	85 c0		 test	 eax, eax
  0007b	75 3f		 jne	 SHORT $LN6@deflateSet

; 347  :             CLEAR_HASH(s);

  0007d	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00080	8b 4e 4c	 mov	 ecx, DWORD PTR [esi+76]
  00083	33 d2		 xor	 edx, edx
  00085	66 89 54 48 fe	 mov	 WORD PTR [eax+ecx*2-2], dx
  0008a	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  0008d	8d 04 45 fe ff
	ff ff		 lea	 eax, DWORD PTR [eax*2-2]
  00094	50		 push	 eax
  00095	52		 push	 edx
  00096	ff 76 44	 push	 DWORD PTR [esi+68]
  00099	e8 00 00 00 00	 call	 _memset
  0009e	8b 4d 0c	 mov	 ecx, DWORD PTR _dictionary$[ebp]
  000a1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 348  :             s->strstart = 0;

  000a4	c7 46 6c 00 00
	00 00		 mov	 DWORD PTR [esi+108], 0

; 349  :             s->block_start = 0L;

  000ab	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0

; 350  :             s->insert = 0;

  000b2	c7 86 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5812], 0
$LN6@deflateSet:

; 351  :         }
; 352  :         dictionary += dictLength - s->w_size;  /* use the tail */

  000bc	2b 7e 2c	 sub	 edi, DWORD PTR [esi+44]
  000bf	03 cf		 add	 ecx, edi

; 353  :         dictLength = s->w_size;

  000c1	8b 7e 2c	 mov	 edi, DWORD PTR [esi+44]
$LN7@deflateSet:

; 354  :     }
; 355  : 
; 356  :     /* insert dictionary into window and hash */
; 357  :     avail = strm->avail_in;

  000c4	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  000c7	89 45 f8	 mov	 DWORD PTR _avail$1$[ebp], eax

; 358  :     next = strm->next_in;

  000ca	8b 03		 mov	 eax, DWORD PTR [ebx]

; 359  :     strm->avail_in = dictLength;
; 360  :     strm->next_in = (z_const Bytef *)dictionary;

  000cc	89 0b		 mov	 DWORD PTR [ebx], ecx

; 361  :     fill_window(s);

  000ce	8b ce		 mov	 ecx, esi
  000d0	89 45 10	 mov	 DWORD PTR _next$1$[ebp], eax
  000d3	89 7b 04	 mov	 DWORD PTR [ebx+4], edi
  000d6	e8 00 00 00 00	 call	 _fill_window

; 362  :     while (s->lookahead >= MIN_MATCH) {

  000db	83 7e 74 03	 cmp	 DWORD PTR [esi+116], 3
  000df	72 64		 jb	 SHORT $LN4@deflateSet
$LL5@deflateSet:

; 363  :         str = s->strstart;
; 364  :         n = s->lookahead - (MIN_MATCH-1);

  000e1	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  000e4	8b 5e 6c	 mov	 ebx, DWORD PTR [esi+108]
  000e7	83 e8 02	 sub	 eax, 2
  000ea	89 45 0c	 mov	 DWORD PTR _n$1$[ebp], eax
  000ed	8d 49 00	 npad	 3
$LL3@deflateSet:

; 365  :         do {
; 366  :             UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]);

  000f0	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  000f3	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  000f6	0f b6 7c 18 02	 movzx	 edi, BYTE PTR [eax+ebx+2]
  000fb	8b 46 48	 mov	 eax, DWORD PTR [esi+72]

; 367  : #ifndef FASTEST
; 368  :             s->prev[str & s->w_mask] = s->head[s->ins_h];

  000fe	8b 56 34	 mov	 edx, DWORD PTR [esi+52]
  00101	d3 e0		 shl	 eax, cl
  00103	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  00106	23 d3		 and	 edx, ebx
  00108	33 f8		 xor	 edi, eax
  0010a	23 7e 54	 and	 edi, DWORD PTR [esi+84]
  0010d	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00110	89 7e 48	 mov	 DWORD PTR [esi+72], edi
  00113	66 8b 04 78	 mov	 ax, WORD PTR [eax+edi*2]
  00117	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax

; 369  : #endif
; 370  :             s->head[s->ins_h] = (Pos)str;

  0011b	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  0011e	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00121	66 89 1c 48	 mov	 WORD PTR [eax+ecx*2], bx

; 371  :             str++;

  00125	43		 inc	 ebx

; 372  :         } while (--n);

  00126	ff 4d 0c	 dec	 DWORD PTR _n$1$[ebp]
  00129	75 c5		 jne	 SHORT $LL3@deflateSet

; 373  :         s->strstart = str;
; 374  :         s->lookahead = MIN_MATCH-1;
; 375  :         fill_window(s);

  0012b	8b ce		 mov	 ecx, esi
  0012d	89 5e 6c	 mov	 DWORD PTR [esi+108], ebx
  00130	c7 46 74 02 00
	00 00		 mov	 DWORD PTR [esi+116], 2
  00137	e8 00 00 00 00	 call	 _fill_window
  0013c	83 7e 74 03	 cmp	 DWORD PTR [esi+116], 3
  00140	73 9f		 jae	 SHORT $LL5@deflateSet
  00142	8b 5d 08	 mov	 ebx, DWORD PTR _strm$[ebp]
$LN4@deflateSet:

; 376  :     }
; 377  :     s->strstart += s->lookahead;

  00145	8b 4e 74	 mov	 ecx, DWORD PTR [esi+116]
  00148	01 4e 6c	 add	 DWORD PTR [esi+108], ecx
  0014b	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]

; 378  :     s->block_start = (long)s->strstart;

  0014e	89 46 5c	 mov	 DWORD PTR [esi+92], eax

; 379  :     s->insert = s->lookahead;
; 380  :     s->lookahead = 0;
; 381  :     s->match_length = s->prev_length = MIN_MATCH-1;
; 382  :     s->match_available = 0;
; 383  :     strm->next_in = next;

  00151	8b 45 10	 mov	 eax, DWORD PTR _next$1$[ebp]
  00154	89 8e b4 16 00
	00		 mov	 DWORD PTR [esi+5812], ecx
  0015a	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0
  00161	c7 46 78 02 00
	00 00		 mov	 DWORD PTR [esi+120], 2
  00168	c7 46 60 02 00
	00 00		 mov	 DWORD PTR [esi+96], 2
  0016f	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0
  00176	89 03		 mov	 DWORD PTR [ebx], eax

; 384  :     strm->avail_in = avail;

  00178	8b 45 f8	 mov	 eax, DWORD PTR _avail$1$[ebp]
  0017b	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 385  :     s->wrap = wrap;

  0017e	8b 45 fc	 mov	 eax, DWORD PTR _wrap$1$[ebp]
  00181	5f		 pop	 edi
  00182	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00185	5e		 pop	 esi

; 386  :     return Z_OK;

  00186	33 c0		 xor	 eax, eax
  00188	5b		 pop	 ebx

; 387  : }

  00189	8b e5		 mov	 esp, ebp
  0018b	5d		 pop	 ebp
  0018c	c2 0c 00	 ret	 12			; 0000000cH
$LN12@deflateSet:
  0018f	5e		 pop	 esi

; 333  :         return Z_STREAM_ERROR;

  00190	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00195	5b		 pop	 ebx

; 387  : }

  00196	8b e5		 mov	 esp, ebp
  00198	5d		 pop	 ebp
  00199	c2 0c 00	 ret	 12			; 0000000cH
_deflateSetDictionary@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\trunk2012\contribs\windows\x86\zlib\zlib-1.2.8\deflate.c
;	COMDAT _deflateResetKeep@4
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_deflateResetKeep@4 PROC				; COMDAT

; 392  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 393  :     deflate_state *s;
; 394  : 
; 395  :     if (strm == Z_NULL || strm->state == Z_NULL ||
; 396  :         strm->zalloc == (alloc_func)0 || strm->zfree == (free_func)0) {

  00004	8b 75 08	 mov	 esi, DWORD PTR _strm$[ebp]
  00007	57		 push	 edi
  00008	85 f6		 test	 esi, esi
  0000a	0f 84 95 00 00
	00		 je	 $LN2@deflateRes
  00010	8b 7e 1c	 mov	 edi, DWORD PTR [esi+28]
  00013	85 ff		 test	 edi, edi
  00015	0f 84 8a 00 00
	00		 je	 $LN2@deflateRes
  0001b	83 7e 20 00	 cmp	 DWORD PTR [esi+32], 0
  0001f	0f 84 80 00 00
	00		 je	 $LN2@deflateRes
  00025	83 7e 24 00	 cmp	 DWORD PTR [esi+36], 0
  00029	74 7a		 je	 SHORT $LN2@deflateRes

; 398  :     }
; 399  : 
; 400  :     strm->total_in = strm->total_out = 0;

  0002b	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00032	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 401  :     strm->msg = Z_NULL; /* use zfree if we ever allocate msg dynamically */

  00039	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 402  :     strm->data_type = Z_UNKNOWN;

  00040	c7 46 2c 02 00
	00 00		 mov	 DWORD PTR [esi+44], 2

; 403  : 
; 404  :     s = (deflate_state *)strm->state;
; 405  :     s->pending = 0;
; 406  :     s->pending_out = s->pending_buf;

  00047	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0004a	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 407  : 
; 408  :     if (s->wrap < 0) {

  0004d	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00050	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
  00057	85 c0		 test	 eax, eax
  00059	79 05		 jns	 SHORT $LN1@deflateRes

; 409  :         s->wrap = -s->wrap; /* was made negative by deflate(..., Z_FINISH); */

  0005b	f7 d8		 neg	 eax
  0005d	89 47 18	 mov	 DWORD PTR [edi+24], eax
$LN1@deflateRes:

; 410  :     }
; 411  :     s->status = s->wrap ? INIT_STATE : BUSY_STATE;

  00060	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00063	85 c9		 test	 ecx, ecx

; 412  :     strm->adler =
; 413  : #ifdef GZIP
; 414  :         s->wrap == 2 ? crc32(0L, Z_NULL, 0) :
; 415  : #endif
; 416  :         adler32(0L, Z_NULL, 0);

  00065	6a 00		 push	 0
  00067	b8 71 00 00 00	 mov	 eax, 113		; 00000071H
  0006c	ba 2a 00 00 00	 mov	 edx, 42			; 0000002aH
  00071	0f 45 c2	 cmovne	 eax, edx
  00074	6a 00		 push	 0
  00076	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00079	6a 00		 push	 0
  0007b	83 f9 02	 cmp	 ecx, 2
  0007e	75 07		 jne	 SHORT $LN6@deflateRes
  00080	e8 00 00 00 00	 call	 _crc32@12
  00085	eb 05		 jmp	 SHORT $LN7@deflateRes
$LN6@deflateRes:
  00087	e8 00 00 00 00	 call	 _adler32@12
$LN7@deflateRes:
  0008c	89 46 30	 mov	 DWORD PTR [esi+48], eax

; 417  :     s->last_flush = Z_NO_FLUSH;
; 418  : 
; 419  :     _tr_init(s);

  0008f	8b cf		 mov	 ecx, edi
  00091	c7 47 28 00 00
	00 00		 mov	 DWORD PTR [edi+40], 0
  00098	e8 00 00 00 00	 call	 __tr_init
  0009d	5f		 pop	 edi

; 420  : 
; 421  :     return Z_OK;

  0009e	33 c0		 xor	 eax, eax
  000a0	5e		 pop	 esi

; 422  : }

  000a1	5d		 pop	 ebp
  000a2	c2 04 00	 ret	 4
$LN2@deflateRes:
  000a5	5f		 pop	 edi

; 397  :         return Z_STREAM_ERROR;

  000a6	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  000ab	5e		 pop	 esi

; 422  : }

  000ac	5d		 pop	 ebp
  000ad	c2 04 00	 ret	 4
_deflateResetKeep@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\trunk2012\contribs\windows\x86\zlib\zlib-1.2.8\deflate.c
;	COMDAT _deflateReset@4
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_deflateReset@4 PROC					; COMDAT

; 427  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 428  :     int ret;
; 429  : 
; 430  :     ret = deflateResetKeep(strm);

  00005	8b 7d 08	 mov	 edi, DWORD PTR _strm$[ebp]
  00008	57		 push	 edi
  00009	e8 00 00 00 00	 call	 _deflateResetKeep@4
  0000e	8b f0		 mov	 esi, eax

; 431  :     if (ret == Z_OK)

  00010	85 f6		 test	 esi, esi
  00012	75 0a		 jne	 SHORT $LN1@deflateRes

; 432  :         lm_init(strm->state);

  00014	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]
  00017	e8 00 00 00 00	 call	 _lm_init

; 433  :     return ret;

  0001c	8b c6		 mov	 eax, esi
$LN1@deflateRes:
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 434  : }

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
_deflateReset@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\trunk2012\contribs\windows\x86\zlib\zlib-1.2.8\deflate.c
;	COMDAT _deflateSetHeader@8
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_head$ = 12						; size = 4
_deflateSetHeader@8 PROC				; COMDAT

; 440  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 441  :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 19		 je	 SHORT $LN2@deflateSet
  0000a	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  0000d	85 c9		 test	 ecx, ecx
  0000f	74 12		 je	 SHORT $LN2@deflateSet

; 442  :     if (strm->state->wrap != 2) return Z_STREAM_ERROR;

  00011	83 79 18 02	 cmp	 DWORD PTR [ecx+24], 2
  00015	75 0c		 jne	 SHORT $LN2@deflateSet

; 443  :     strm->state->gzhead = head;

  00017	8b 45 0c	 mov	 eax, DWORD PTR _head$[ebp]
  0001a	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 444  :     return Z_OK;

  0001d	33 c0		 xor	 eax, eax

; 445  : }

  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
$LN2@deflateSet:

; 441  :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

  00023	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 445  : }

  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
_deflateSetHeader@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\trunk2012\contribs\windows\x86\zlib\zlib-1.2.8\deflate.c
;	COMDAT _deflatePending@12
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_pending$ = 12						; size = 4
_bits$ = 16						; size = 4
_deflatePending@12 PROC					; COMDAT

; 452  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 453  :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 2b		 je	 SHORT $LN3@deflatePen
  0000a	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0000d	85 c0		 test	 eax, eax
  0000f	74 24		 je	 SHORT $LN3@deflatePen

; 454  :     if (pending != Z_NULL)

  00011	8b 55 0c	 mov	 edx, DWORD PTR _pending$[ebp]
  00014	85 d2		 test	 edx, edx
  00016	74 05		 je	 SHORT $LN2@deflatePen

; 455  :         *pending = strm->state->pending;

  00018	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0001b	89 02		 mov	 DWORD PTR [edx], eax
$LN2@deflatePen:

; 456  :     if (bits != Z_NULL)

  0001d	8b 55 10	 mov	 edx, DWORD PTR _bits$[ebp]
  00020	85 d2		 test	 edx, edx
  00022	74 0b		 je	 SHORT $LN1@deflatePen

; 457  :         *bits = strm->state->bi_valid;

  00024	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00027	8b 80 bc 16 00
	00		 mov	 eax, DWORD PTR [eax+5820]
  0002d	89 02		 mov	 DWORD PTR [edx], eax
$LN1@deflatePen:

; 458  :     return Z_OK;

  0002f	33 c0		 xor	 eax, eax

; 459  : }

  00031	5d		 pop	 ebp
  00032	c2 0c 00	 ret	 12			; 0000000cH
$LN3@deflatePen:

; 453  :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

  00035	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 459  : }

  0003a	5d		 pop	 ebp
  0003b	c2 0c 00	 ret	 12			; 0000000cH
_deflatePending@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\trunk2012\contribs\windows\x86\zlib\zlib-1.2.8\deflate.c
;	COMDAT _deflatePrime@12
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_bits$ = 12						; size = 4
_value$ = 16						; size = 4
_deflatePrime@12 PROC					; COMDAT

; 466  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 467  :     deflate_state *s;
; 468  :     int put;
; 469  : 
; 470  :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

  00004	8b 75 08	 mov	 esi, DWORD PTR _strm$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 75		 je	 SHORT $LN6@deflatePri
  0000b	8b 76 1c	 mov	 esi, DWORD PTR [esi+28]
  0000e	85 f6		 test	 esi, esi
  00010	74 6e		 je	 SHORT $LN6@deflatePri

; 471  :     s = strm->state;
; 472  :     if ((Bytef *)(s->d_buf) < s->pending_out + ((Buf_size + 7) >> 3))

  00012	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00015	83 c0 02	 add	 eax, 2
  00018	39 86 a4 16 00
	00		 cmp	 DWORD PTR [esi+5796], eax
  0001e	73 0a		 jae	 SHORT $LN11@deflatePri

; 473  :         return Z_BUF_ERROR;

  00020	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH
  00025	5e		 pop	 esi

; 485  : }

  00026	5d		 pop	 ebp
  00027	c2 0c 00	 ret	 12			; 0000000cH
$LN11@deflatePri:
  0002a	53		 push	 ebx

; 473  :         return Z_BUF_ERROR;

  0002b	8b 5d 0c	 mov	 ebx, DWORD PTR _bits$[ebp]
  0002e	57		 push	 edi
  0002f	90		 npad	 1
$LL4@deflatePri:

; 474  :     do {
; 475  :         put = Buf_size - s->bi_valid;

  00030	8b 96 bc 16 00
	00		 mov	 edx, DWORD PTR [esi+5820]
  00036	bf 10 00 00 00	 mov	 edi, 16			; 00000010H
  0003b	2b fa		 sub	 edi, edx

; 476  :         if (put > bits)

  0003d	3b fb		 cmp	 edi, ebx
  0003f	0f 4f fb	 cmovg	 edi, ebx

; 477  :             put = bits;
; 478  :         s->bi_buf |= (ush)((value & ((1 << put) - 1)) << s->bi_valid);

  00042	b8 01 00 00 00	 mov	 eax, 1
  00047	8b cf		 mov	 ecx, edi
  00049	66 d3 e0	 shl	 ax, cl
  0004c	8b ca		 mov	 ecx, edx
  0004e	66 48		 dec	 ax
  00050	66 23 45 10	 and	 ax, WORD PTR _value$[ebp]
  00054	66 d3 e0	 shl	 ax, cl

; 479  :         s->bi_valid += put;
; 480  :         _tr_flush_bits(s);

  00057	8b ce		 mov	 ecx, esi
  00059	66 09 86 b8 16
	00 00		 or	 WORD PTR [esi+5816], ax
  00060	8d 04 3a	 lea	 eax, DWORD PTR [edx+edi]
  00063	89 86 bc 16 00
	00		 mov	 DWORD PTR [esi+5820], eax
  00069	e8 00 00 00 00	 call	 __tr_flush_bits

; 481  :         value >>= put;

  0006e	8b cf		 mov	 ecx, edi
  00070	d3 7d 10	 sar	 DWORD PTR _value$[ebp], cl

; 482  :         bits -= put;

  00073	2b df		 sub	 ebx, edi

; 483  :     } while (bits);

  00075	75 b9		 jne	 SHORT $LL4@deflatePri

; 484  :     return Z_OK;

  00077	5f		 pop	 edi
  00078	5b		 pop	 ebx
  00079	33 c0		 xor	 eax, eax
  0007b	5e		 pop	 esi

; 485  : }

  0007c	5d		 pop	 ebp
  0007d	c2 0c 00	 ret	 12			; 0000000cH
$LN6@deflatePri:

; 467  :     deflate_state *s;
; 468  :     int put;
; 469  : 
; 470  :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

  00080	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00085	5e		 pop	 esi

; 485  : }

  00086	5d		 pop	 ebp
  00087	c2 0c 00	 ret	 12			; 0000000cH
_deflatePrime@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\trunk2012\contribs\windows\x86\zlib\zlib-1.2.8\deflate.c
;	COMDAT _deflateParams@12
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_level$ = 12						; size = 4
_strategy$ = 16						; size = 4
_deflateParams@12 PROC					; COMDAT

; 492  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 493  :     deflate_state *s;
; 494  :     compress_func func;
; 495  :     int err = Z_OK;
; 496  : 
; 497  :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _strm$[ebp]
  00007	33 d2		 xor	 edx, edx
  00009	57		 push	 edi
  0000a	85 db		 test	 ebx, ebx
  0000c	0f 84 da 00 00
	00		 je	 $LN8@deflatePar
  00012	8b 7b 1c	 mov	 edi, DWORD PTR [ebx+28]
  00015	85 ff		 test	 edi, edi
  00017	0f 84 cf 00 00
	00		 je	 $LN8@deflatePar

; 498  :     s = strm->state;
; 499  : 
; 500  : #ifdef FASTEST
; 501  :     if (level != 0) level = 1;
; 502  : #else
; 503  :     if (level == Z_DEFAULT_COMPRESSION) level = 6;

  0001d	56		 push	 esi
  0001e	8b 75 0c	 mov	 esi, DWORD PTR _level$[ebp]
  00021	83 fe ff	 cmp	 esi, -1
  00024	75 05		 jne	 SHORT $LN7@deflatePar
  00026	8d 72 06	 lea	 esi, DWORD PTR [edx+6]

; 504  : #endif
; 505  :     if (level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED) {

  00029	eb 11		 jmp	 SHORT $LN13@deflatePar
$LN7@deflatePar:
  0002b	85 f6		 test	 esi, esi
  0002d	0f 88 ad 00 00
	00		 js	 $LN5@deflatePar
  00033	83 fe 09	 cmp	 esi, 9
  00036	0f 8f a4 00 00
	00		 jg	 $LN5@deflatePar
$LN13@deflatePar:
  0003c	8b 45 10	 mov	 eax, DWORD PTR _strategy$[ebp]
  0003f	83 f8 04	 cmp	 eax, 4
  00042	0f 87 98 00 00
	00		 ja	 $LN5@deflatePar

; 507  :     }
; 508  :     func = configuration_table[s->level].func;
; 509  : 
; 510  :     if ((strategy != s->strategy || func != configuration_table[level].func) &&
; 511  :         strm->total_in != 0) {

  00048	3b 87 88 00 00
	00		 cmp	 eax, DWORD PTR [edi+136]
  0004e	75 1c		 jne	 SHORT $LN3@deflatePar
  00050	8b 87 84 00 00
	00		 mov	 eax, DWORD PTR [edi+132]
  00056	8d 0c 76	 lea	 ecx, DWORD PTR [esi+esi*2]
  00059	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0005c	8b 04 85 08 00
	00 00		 mov	 eax, DWORD PTR _configuration_table[eax*4+8]
  00063	3b 04 8d 08 00
	00 00		 cmp	 eax, DWORD PTR _configuration_table[ecx*4+8]
  0006a	74 1c		 je	 SHORT $LN2@deflatePar
$LN3@deflatePar:
  0006c	39 53 08	 cmp	 DWORD PTR [ebx+8], edx
  0006f	74 17		 je	 SHORT $LN2@deflatePar

; 512  :         /* Flush the last buffer: */
; 513  :         err = deflate(strm, Z_BLOCK);

  00071	6a 05		 push	 5
  00073	53		 push	 ebx
  00074	e8 00 00 00 00	 call	 _deflate@8
  00079	8b d0		 mov	 edx, eax

; 514  :         if (err == Z_BUF_ERROR && s->pending == 0)

  0007b	83 fa fb	 cmp	 edx, -5			; fffffffbH
  0007e	75 08		 jne	 SHORT $LN2@deflatePar
  00080	33 c0		 xor	 eax, eax
  00082	39 47 14	 cmp	 DWORD PTR [edi+20], eax
  00085	0f 44 d0	 cmove	 edx, eax
$LN2@deflatePar:

; 515  :             err = Z_OK;
; 516  :     }
; 517  :     if (s->level != level) {

  00088	39 b7 84 00 00
	00		 cmp	 DWORD PTR [edi+132], esi
  0008e	74 3e		 je	 SHORT $LN1@deflatePar

; 518  :         s->level = level;
; 519  :         s->max_lazy_match   = configuration_table[level].max_lazy;

  00090	8d 0c 76	 lea	 ecx, DWORD PTR [esi+esi*2]
  00093	89 b7 84 00 00
	00		 mov	 DWORD PTR [edi+132], esi
  00099	0f b7 04 8d 02
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4+2]
  000a1	89 87 80 00 00
	00		 mov	 DWORD PTR [edi+128], eax

; 520  :         s->good_match       = configuration_table[level].good_length;

  000a7	0f b7 04 8d 00
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4]
  000af	89 87 8c 00 00
	00		 mov	 DWORD PTR [edi+140], eax

; 521  :         s->nice_match       = configuration_table[level].nice_length;

  000b5	0f b7 04 8d 04
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4+4]
  000bd	89 87 90 00 00
	00		 mov	 DWORD PTR [edi+144], eax

; 522  :         s->max_chain_length = configuration_table[level].max_chain;

  000c3	0f b7 04 8d 06
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4+6]
  000cb	89 47 7c	 mov	 DWORD PTR [edi+124], eax
$LN1@deflatePar:

; 523  :     }
; 524  :     s->strategy = strategy;

  000ce	8b 45 10	 mov	 eax, DWORD PTR _strategy$[ebp]
  000d1	5e		 pop	 esi
  000d2	89 87 88 00 00
	00		 mov	 DWORD PTR [edi+136], eax
  000d8	5f		 pop	 edi

; 525  :     return err;

  000d9	8b c2		 mov	 eax, edx
  000db	5b		 pop	 ebx

; 526  : }

  000dc	5d		 pop	 ebp
  000dd	c2 0c 00	 ret	 12			; 0000000cH
$LN5@deflatePar:
  000e0	5e		 pop	 esi
  000e1	5f		 pop	 edi

; 506  :         return Z_STREAM_ERROR;

  000e2	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  000e7	5b		 pop	 ebx

; 526  : }

  000e8	5d		 pop	 ebp
  000e9	c2 0c 00	 ret	 12			; 0000000cH
$LN8@deflatePar:
  000ec	5f		 pop	 edi

; 493  :     deflate_state *s;
; 494  :     compress_func func;
; 495  :     int err = Z_OK;
; 496  : 
; 497  :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

  000ed	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  000f2	5b		 pop	 ebx

; 526  : }

  000f3	5d		 pop	 ebp
  000f4	c2 0c 00	 ret	 12			; 0000000cH
_deflateParams@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\trunk2012\contribs\windows\x86\zlib\zlib-1.2.8\deflate.c
;	COMDAT _deflateTune@20
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_good_length$ = 12					; size = 4
_max_lazy$ = 16						; size = 4
_nice_length$ = 20					; size = 4
_max_chain$ = 24					; size = 4
_deflateTune@20 PROC					; COMDAT

; 535  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 536  :     deflate_state *s;
; 537  : 
; 538  :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 2e		 je	 SHORT $LN1@deflateTun
  0000a	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  0000d	85 c9		 test	 ecx, ecx
  0000f	74 27		 je	 SHORT $LN1@deflateTun

; 539  :     s = strm->state;
; 540  :     s->good_match = good_length;

  00011	8b 45 0c	 mov	 eax, DWORD PTR _good_length$[ebp]
  00014	89 81 8c 00 00
	00		 mov	 DWORD PTR [ecx+140], eax

; 541  :     s->max_lazy_match = max_lazy;

  0001a	8b 45 10	 mov	 eax, DWORD PTR _max_lazy$[ebp]
  0001d	89 81 80 00 00
	00		 mov	 DWORD PTR [ecx+128], eax

; 542  :     s->nice_match = nice_length;

  00023	8b 45 14	 mov	 eax, DWORD PTR _nice_length$[ebp]
  00026	89 81 90 00 00
	00		 mov	 DWORD PTR [ecx+144], eax

; 543  :     s->max_chain_length = max_chain;

  0002c	8b 45 18	 mov	 eax, DWORD PTR _max_chain$[ebp]
  0002f	89 41 7c	 mov	 DWORD PTR [ecx+124], eax

; 544  :     return Z_OK;

  00032	33 c0		 xor	 eax, eax

; 545  : }

  00034	5d		 pop	 ebp
  00035	c2 14 00	 ret	 20			; 00000014H
$LN1@deflateTun:

; 536  :     deflate_state *s;
; 537  : 
; 538  :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

  00038	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 545  : }

  0003d	5d		 pop	 ebp
  0003e	c2 14 00	 ret	 20			; 00000014H
_deflateTune@20 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\trunk2012\contribs\windows\x86\zlib\zlib-1.2.8\deflate.c
;	COMDAT _deflateBound@8
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_complen$1$ = 12					; size = 4
_sourceLen$ = 12					; size = 4
_deflateBound@8 PROC					; COMDAT

; 567  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 568  :     deflate_state *s;
; 569  :     uLong complen, wraplen;
; 570  :     Bytef *str;
; 571  : 
; 572  :     /* conservative upper bound for compressed data */
; 573  :     complen = sourceLen +
; 574  :               ((sourceLen + 7) >> 3) + ((sourceLen + 63) >> 6) + 5;
; 575  : 
; 576  :     /* if can't get parameters, return conservative bound plus zlib wrapper */
; 577  :     if (strm == Z_NULL || strm->state == Z_NULL)

  00003	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 0c	 mov	 ebx, DWORD PTR _sourceLen$[ebp]
  0000a	8d 4b 3f	 lea	 ecx, DWORD PTR [ebx+63]
  0000d	c1 e9 06	 shr	 ecx, 6
  00010	8d 43 07	 lea	 eax, DWORD PTR [ebx+7]
  00013	c1 e8 03	 shr	 eax, 3
  00016	03 cb		 add	 ecx, ebx
  00018	83 c0 05	 add	 eax, 5
  0001b	03 c8		 add	 ecx, eax
  0001d	89 4d 0c	 mov	 DWORD PTR _complen$1$[ebp], ecx
  00020	85 d2		 test	 edx, edx
  00022	0f 84 b9 00 00
	00		 je	 $LN20@deflateBou
  00028	8b 52 1c	 mov	 edx, DWORD PTR [edx+28]
  0002b	85 d2		 test	 edx, edx
  0002d	0f 84 ae 00 00
	00		 je	 $LN20@deflateBou

; 579  : 
; 580  :     /* compute wrapper length */
; 581  :     s = strm->state;
; 582  :     switch (s->wrap) {

  00033	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00036	56		 push	 esi
  00037	83 e8 00	 sub	 eax, 0
  0003a	0f 84 94 00 00
	00		 je	 $LN17@deflateBou
  00040	48		 dec	 eax
  00041	0f 84 7e 00 00
	00		 je	 $LN16@deflateBou
  00047	48		 dec	 eax
  00048	74 07		 je	 SHORT $LN15@deflateBou

; 608  :     default:                                /* for compiler happiness */
; 609  :         wraplen = 6;

  0004a	be 06 00 00 00	 mov	 esi, 6
  0004f	eb 48		 jmp	 SHORT $LN18@deflateBou
$LN15@deflateBou:
  00051	57		 push	 edi

; 589  :     case 2:                                 /* gzip wrapper */
; 590  :         wraplen = 18;
; 591  :         if (s->gzhead != Z_NULL) {          /* user-supplied gzip header */

  00052	8b 7a 1c	 mov	 edi, DWORD PTR [edx+28]
  00055	be 12 00 00 00	 mov	 esi, 18			; 00000012H
  0005a	85 ff		 test	 edi, edi
  0005c	74 3a		 je	 SHORT $LN30@deflateBou

; 592  :             if (s->gzhead->extra != Z_NULL)

  0005e	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  00062	74 06		 je	 SHORT $LN13@deflateBou

; 593  :                 wraplen += 2 + s->gzhead->extra_len;

  00064	8b 77 14	 mov	 esi, DWORD PTR [edi+20]
  00067	83 c6 14	 add	 esi, 20			; 00000014H
$LN13@deflateBou:

; 594  :             str = s->gzhead->name;

  0006a	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]

; 595  :             if (str != Z_NULL)

  0006d	85 c9		 test	 ecx, ecx
  0006f	74 0a		 je	 SHORT $LN9@deflateBou
$LL11@deflateBou:

; 596  :                 do {
; 597  :                     wraplen++;
; 598  :                 } while (*str++);

  00071	8a 01		 mov	 al, BYTE PTR [ecx]
  00073	46		 inc	 esi
  00074	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00077	84 c0		 test	 al, al
  00079	75 f6		 jne	 SHORT $LL11@deflateBou
$LN9@deflateBou:

; 599  :             str = s->gzhead->comment;

  0007b	8b 4f 24	 mov	 ecx, DWORD PTR [edi+36]

; 600  :             if (str != Z_NULL)

  0007e	85 c9		 test	 ecx, ecx
  00080	74 0a		 je	 SHORT $LN5@deflateBou
$LL7@deflateBou:

; 601  :                 do {
; 602  :                     wraplen++;
; 603  :                 } while (*str++);

  00082	8a 01		 mov	 al, BYTE PTR [ecx]
  00084	46		 inc	 esi
  00085	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00088	84 c0		 test	 al, al
  0008a	75 f6		 jne	 SHORT $LL7@deflateBou
$LN5@deflateBou:

; 604  :             if (s->gzhead->hcrc)

  0008c	83 7f 2c 00	 cmp	 DWORD PTR [edi+44], 0

; 606  :         }
; 607  :         break;

  00090	8b 4d 0c	 mov	 ecx, DWORD PTR _complen$1$[ebp]
  00093	74 03		 je	 SHORT $LN30@deflateBou

; 605  :                 wraplen += 2;

  00095	83 c6 02	 add	 esi, 2
$LN30@deflateBou:
  00098	5f		 pop	 edi
$LN18@deflateBou:

; 610  :     }
; 611  : 
; 612  :     /* if not default parameters, return conservative bound */
; 613  :     if (s->w_bits != 15 || s->hash_bits != 8 + 7)

  00099	83 7a 30 0f	 cmp	 DWORD PTR [edx+48], 15	; 0000000fH
  0009d	75 39		 jne	 SHORT $LN1@deflateBou
  0009f	83 7a 50 0f	 cmp	 DWORD PTR [edx+80], 15	; 0000000fH
  000a3	75 33		 jne	 SHORT $LN1@deflateBou

; 615  : 
; 616  :     /* default settings: return tight bound for that case */
; 617  :     return sourceLen + (sourceLen >> 12) + (sourceLen >> 14) +
; 618  :            (sourceLen >> 25) + 13 - 6 + wraplen;

  000a5	8b cb		 mov	 ecx, ebx
  000a7	c1 e9 0e	 shr	 ecx, 14			; 0000000eH
  000aa	8b d3		 mov	 edx, ebx
  000ac	8b c3		 mov	 eax, ebx
  000ae	03 ce		 add	 ecx, esi
  000b0	c1 e8 0c	 shr	 eax, 12			; 0000000cH
  000b3	c1 ea 19	 shr	 edx, 25			; 00000019H
  000b6	03 ca		 add	 ecx, edx
  000b8	83 c0 07	 add	 eax, 7
  000bb	03 c1		 add	 eax, ecx
  000bd	5e		 pop	 esi
  000be	03 c3		 add	 eax, ebx
  000c0	5b		 pop	 ebx

; 619  : }

  000c1	5d		 pop	 ebp
  000c2	c2 08 00	 ret	 8
$LN16@deflateBou:

; 585  :         break;
; 586  :     case 1:                                 /* zlib wrapper */
; 587  :         wraplen = 6 + (s->strstart ? 4 : 0);

  000c5	8b 72 6c	 mov	 esi, DWORD PTR [edx+108]
  000c8	f7 de		 neg	 esi
  000ca	1b f6		 sbb	 esi, esi
  000cc	83 e6 04	 and	 esi, 4
  000cf	83 c6 06	 add	 esi, 6

; 588  :         break;

  000d2	eb c5		 jmp	 SHORT $LN18@deflateBou
$LN17@deflateBou:

; 583  :     case 0:                                 /* raw deflate */
; 584  :         wraplen = 0;

  000d4	33 f6		 xor	 esi, esi
  000d6	eb c1		 jmp	 SHORT $LN18@deflateBou
$LN1@deflateBou:

; 614  :         return complen + wraplen;

  000d8	8d 04 0e	 lea	 eax, DWORD PTR [esi+ecx]
  000db	5e		 pop	 esi
  000dc	5b		 pop	 ebx

; 619  : }

  000dd	5d		 pop	 ebp
  000de	c2 08 00	 ret	 8
$LN20@deflateBou:

; 578  :         return complen + 6;

  000e1	8d 41 06	 lea	 eax, DWORD PTR [ecx+6]
  000e4	5b		 pop	 ebx

; 619  : }

  000e5	5d		 pop	 ebp
  000e6	c2 08 00	 ret	 8
_deflateBound@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\trunk2012\contribs\windows\x86\zlib\zlib-1.2.8\deflate.c
;	COMDAT _putShortMSB
_TEXT	SEGMENT
_putShortMSB PROC					; COMDAT
; _s$ = ecx
; _b$ = edx

; 629  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 630  :     put_byte(s, (Byte)(b >> 8));

  00004	8b ca		 mov	 ecx, edx
  00006	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00009	8b 77 08	 mov	 esi, DWORD PTR [edi+8]
  0000c	c1 e9 08	 shr	 ecx, 8
  0000f	88 0c 06	 mov	 BYTE PTR [esi+eax], cl
  00012	ff 47 14	 inc	 DWORD PTR [edi+20]
  00015	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]

; 631  :     put_byte(s, (Byte)(b & 0xff));

  00018	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0001b	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0001e	ff 47 14	 inc	 DWORD PTR [edi+20]
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi

; 632  : }

  00023	c3		 ret	 0
_putShortMSB ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\trunk2012\contribs\windows\x86\zlib\zlib-1.2.8\deflate.c
;	COMDAT _flush_pending
_TEXT	SEGMENT
_flush_pending PROC					; COMDAT
; _strm$ = ecx

; 642  : {

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx
  00003	56		 push	 esi

; 643  :     unsigned len;
; 644  :     deflate_state *s = strm->state;

  00004	8b 73 1c	 mov	 esi, DWORD PTR [ebx+28]
  00007	57		 push	 edi

; 645  : 
; 646  :     _tr_flush_bits(s);

  00008	8b ce		 mov	 ecx, esi
  0000a	e8 00 00 00 00	 call	 __tr_flush_bits

; 647  :     len = s->pending;

  0000f	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]

; 648  :     if (len > strm->avail_out) len = strm->avail_out;

  00012	3b 7b 10	 cmp	 edi, DWORD PTR [ebx+16]
  00015	0f 47 7b 10	 cmova	 edi, DWORD PTR [ebx+16]

; 649  :     if (len == 0) return;

  00019	85 ff		 test	 edi, edi
  0001b	74 26		 je	 SHORT $LN1@flush_pend

; 650  : 
; 651  :     zmemcpy(strm->next_out, s->pending_out, len);

  0001d	57		 push	 edi
  0001e	ff 76 10	 push	 DWORD PTR [esi+16]
  00021	ff 73 0c	 push	 DWORD PTR [ebx+12]
  00024	e8 00 00 00 00	 call	 _memcpy

; 652  :     strm->next_out  += len;

  00029	01 7b 0c	 add	 DWORD PTR [ebx+12], edi

; 653  :     s->pending_out  += len;

  0002c	01 7e 10	 add	 DWORD PTR [esi+16], edi

; 654  :     strm->total_out += len;

  0002f	01 7b 14	 add	 DWORD PTR [ebx+20], edi

; 655  :     strm->avail_out  -= len;

  00032	29 7b 10	 sub	 DWORD PTR [ebx+16], edi
  00035	83 c4 0c	 add	 esp, 12			; 0000000cH

; 656  :     s->pending -= len;

  00038	29 7e 14	 sub	 DWORD PTR [esi+20], edi

; 657  :     if (s->pending == 0) {

  0003b	75 06		 jne	 SHORT $LN1@flush_pend

; 658  :         s->pending_out = s->pending_buf;

  0003d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00040	89 46 10	 mov	 DWORD PTR [esi+16], eax
$LN1@flush_pend:

; 659  :     }
; 660  : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	c3		 ret	 0
_flush_pending ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\trunk2012\contribs\windows\x86\zlib\zlib-1.2.8\deflate.c
;	COMDAT _deflateCopy@8
_TEXT	SEGMENT
_dest$ = 8						; size = 4
_overlay$1$ = 12					; size = 4
_ss$1$ = 12						; size = 4
_source$ = 12						; size = 4
_deflateCopy@8 PROC					; COMDAT

; 1015 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 1016 : #ifdef MAXSEG_64K
; 1017 :     return Z_STREAM_ERROR;
; 1018 : #else
; 1019 :     deflate_state *ds;
; 1020 :     deflate_state *ss;
; 1021 :     ushf *overlay;
; 1022 : 
; 1023 : 
; 1024 :     if (source == Z_NULL || dest == Z_NULL || source->state == Z_NULL) {

  00005	8b 75 0c	 mov	 esi, DWORD PTR _source$[ebp]
  00008	85 f6		 test	 esi, esi
  0000a	0f 84 73 01 00
	00		 je	 $LN4@deflateCop
  00010	8b 5d 08	 mov	 ebx, DWORD PTR _dest$[ebp]
  00013	85 db		 test	 ebx, ebx
  00015	0f 84 68 01 00
	00		 je	 $LN4@deflateCop
  0001b	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0001e	89 45 0c	 mov	 DWORD PTR _ss$1$[ebp], eax
  00021	85 c0		 test	 eax, eax
  00023	0f 84 5a 01 00
	00		 je	 $LN4@deflateCop

; 1026 :     }
; 1027 : 
; 1028 :     ss = source->state;
; 1029 : 
; 1030 :     zmemcpy((voidpf)dest, (voidpf)source, sizeof(z_stream));
; 1031 : 
; 1032 :     ds = (deflate_state *) ZALLOC(dest, 1, sizeof(deflate_state));

  00029	57		 push	 edi
  0002a	68 c4 16 00 00	 push	 5828			; 000016c4H
  0002f	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  00034	8b fb		 mov	 edi, ebx
  00036	f3 a5		 rep movsd
  00038	8b 43 20	 mov	 eax, DWORD PTR [ebx+32]
  0003b	6a 01		 push	 1
  0003d	ff 73 28	 push	 DWORD PTR [ebx+40]
  00040	ff d0		 call	 eax
  00042	8b f0		 mov	 esi, eax
  00044	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1033 :     if (ds == Z_NULL) return Z_MEM_ERROR;

  00047	85 f6		 test	 esi, esi
  00049	0f 84 28 01 00
	00		 je	 $LN9@deflateCop

; 1034 :     dest->state = (struct internal_state FAR *) ds;
; 1035 :     zmemcpy((voidpf)ds, (voidpf)ss, sizeof(deflate_state));

  0004f	8b 7d 0c	 mov	 edi, DWORD PTR _ss$1$[ebp]
  00052	68 c4 16 00 00	 push	 5828			; 000016c4H
  00057	57		 push	 edi
  00058	56		 push	 esi
  00059	89 73 1c	 mov	 DWORD PTR [ebx+28], esi
  0005c	e8 00 00 00 00	 call	 _memcpy

; 1036 :     ds->strm = dest;
; 1037 : 
; 1038 :     ds->window = (Bytef *) ZALLOC(dest, ds->w_size, 2*sizeof(Byte));

  00061	6a 02		 push	 2
  00063	ff 76 2c	 push	 DWORD PTR [esi+44]
  00066	89 1e		 mov	 DWORD PTR [esi], ebx
  00068	ff 73 28	 push	 DWORD PTR [ebx+40]
  0006b	8b 43 20	 mov	 eax, DWORD PTR [ebx+32]
  0006e	ff d0		 call	 eax

; 1039 :     ds->prev   = (Posf *)  ZALLOC(dest, ds->w_size, sizeof(Pos));

  00070	6a 02		 push	 2
  00072	ff 76 2c	 push	 DWORD PTR [esi+44]
  00075	89 46 38	 mov	 DWORD PTR [esi+56], eax
  00078	ff 73 28	 push	 DWORD PTR [ebx+40]
  0007b	8b 43 20	 mov	 eax, DWORD PTR [ebx+32]
  0007e	ff d0		 call	 eax

; 1040 :     ds->head   = (Posf *)  ZALLOC(dest, ds->hash_size, sizeof(Pos));

  00080	6a 02		 push	 2
  00082	ff 76 4c	 push	 DWORD PTR [esi+76]
  00085	89 46 40	 mov	 DWORD PTR [esi+64], eax
  00088	ff 73 28	 push	 DWORD PTR [ebx+40]
  0008b	8b 43 20	 mov	 eax, DWORD PTR [ebx+32]
  0008e	ff d0		 call	 eax

; 1041 :     overlay = (ushf *) ZALLOC(dest, ds->lit_bufsize, sizeof(ush)+2);

  00090	6a 04		 push	 4
  00092	ff b6 9c 16 00
	00		 push	 DWORD PTR [esi+5788]
  00098	89 46 44	 mov	 DWORD PTR [esi+68], eax
  0009b	ff 73 28	 push	 DWORD PTR [ebx+40]
  0009e	8b 43 20	 mov	 eax, DWORD PTR [ebx+32]
  000a1	ff d0		 call	 eax

; 1042 :     ds->pending_buf = (uchf *) overlay;
; 1043 : 
; 1044 :     if (ds->window == Z_NULL || ds->prev == Z_NULL || ds->head == Z_NULL ||
; 1045 :         ds->pending_buf == Z_NULL) {

  000a3	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  000a6	83 c4 3c	 add	 esp, 60			; 0000003cH
  000a9	89 45 0c	 mov	 DWORD PTR _overlay$1$[ebp], eax
  000ac	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000af	85 c9		 test	 ecx, ecx
  000b1	0f 84 ba 00 00
	00		 je	 $LN1@deflateCop
  000b7	83 7e 40 00	 cmp	 DWORD PTR [esi+64], 0
  000bb	0f 84 b0 00 00
	00		 je	 $LN1@deflateCop
  000c1	83 7e 44 00	 cmp	 DWORD PTR [esi+68], 0
  000c5	0f 84 a6 00 00
	00		 je	 $LN1@deflateCop
  000cb	85 c0		 test	 eax, eax
  000cd	0f 84 9e 00 00
	00		 je	 $LN1@deflateCop

; 1048 :     }
; 1049 :     /* following zmemcpy do not work for 16-bit MSDOS */
; 1050 :     zmemcpy(ds->window, ss->window, ds->w_size * 2 * sizeof(Byte));

  000d3	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  000d6	03 c0		 add	 eax, eax
  000d8	50		 push	 eax
  000d9	ff 77 38	 push	 DWORD PTR [edi+56]
  000dc	51		 push	 ecx
  000dd	e8 00 00 00 00	 call	 _memcpy

; 1051 :     zmemcpy((voidpf)ds->prev, (voidpf)ss->prev, ds->w_size * sizeof(Pos));

  000e2	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  000e5	03 c0		 add	 eax, eax
  000e7	50		 push	 eax
  000e8	ff 77 40	 push	 DWORD PTR [edi+64]
  000eb	ff 76 40	 push	 DWORD PTR [esi+64]
  000ee	e8 00 00 00 00	 call	 _memcpy

; 1052 :     zmemcpy((voidpf)ds->head, (voidpf)ss->head, ds->hash_size * sizeof(Pos));

  000f3	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  000f6	03 c0		 add	 eax, eax
  000f8	50		 push	 eax
  000f9	ff 77 44	 push	 DWORD PTR [edi+68]
  000fc	ff 76 44	 push	 DWORD PTR [esi+68]
  000ff	e8 00 00 00 00	 call	 _memcpy

; 1053 :     zmemcpy(ds->pending_buf, ss->pending_buf, (uInt)ds->pending_buf_size);

  00104	ff 76 0c	 push	 DWORD PTR [esi+12]
  00107	ff 77 08	 push	 DWORD PTR [edi+8]
  0010a	ff 76 08	 push	 DWORD PTR [esi+8]
  0010d	e8 00 00 00 00	 call	 _memcpy

; 1054 : 
; 1055 :     ds->pending_out = ds->pending_buf + (ss->pending_out - ss->pending_buf);

  00112	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00115	2b 47 08	 sub	 eax, DWORD PTR [edi+8]
  00118	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 1056 :     ds->d_buf = overlay + ds->lit_bufsize/sizeof(ush);

  0011b	8b 8e 9c 16 00
	00		 mov	 ecx, DWORD PTR [esi+5788]
  00121	8b 7d 0c	 mov	 edi, DWORD PTR _overlay$1$[ebp]
  00124	03 c2		 add	 eax, edx
  00126	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00129	8b c1		 mov	 eax, ecx
  0012b	d1 e8		 shr	 eax, 1
  0012d	83 c4 30	 add	 esp, 48			; 00000030H
  00130	8d 04 47	 lea	 eax, DWORD PTR [edi+eax*2]
  00133	89 86 a4 16 00
	00		 mov	 DWORD PTR [esi+5796], eax

; 1057 :     ds->l_buf = ds->pending_buf + (1+sizeof(ush))*ds->lit_bufsize;

  00139	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  0013c	03 c1		 add	 eax, ecx
  0013e	89 86 98 16 00
	00		 mov	 DWORD PTR [esi+5784], eax

; 1058 : 
; 1059 :     ds->l_desc.dyn_tree = ds->dyn_ltree;

  00144	8d 86 94 00 00
	00		 lea	 eax, DWORD PTR [esi+148]
  0014a	89 86 18 0b 00
	00		 mov	 DWORD PTR [esi+2840], eax

; 1060 :     ds->d_desc.dyn_tree = ds->dyn_dtree;

  00150	8d 86 88 09 00
	00		 lea	 eax, DWORD PTR [esi+2440]
  00156	89 86 24 0b 00
	00		 mov	 DWORD PTR [esi+2852], eax

; 1061 :     ds->bl_desc.dyn_tree = ds->bl_tree;

  0015c	8d 86 7c 0a 00
	00		 lea	 eax, DWORD PTR [esi+2684]
  00162	5f		 pop	 edi
  00163	89 86 30 0b 00
	00		 mov	 DWORD PTR [esi+2864], eax
  00169	5e		 pop	 esi

; 1062 : 
; 1063 :     return Z_OK;

  0016a	33 c0		 xor	 eax, eax
  0016c	5b		 pop	 ebx

; 1064 : #endif /* MAXSEG_64K */
; 1065 : }

  0016d	5d		 pop	 ebp
  0016e	c2 08 00	 ret	 8
$LN1@deflateCop:

; 1046 :         deflateEnd (dest);

  00171	53		 push	 ebx
  00172	e8 00 00 00 00	 call	 _deflateEnd@4
$LN9@deflateCop:

; 1047 :         return Z_MEM_ERROR;

  00177	5f		 pop	 edi
  00178	5e		 pop	 esi
  00179	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  0017e	5b		 pop	 ebx

; 1064 : #endif /* MAXSEG_64K */
; 1065 : }

  0017f	5d		 pop	 ebp
  00180	c2 08 00	 ret	 8
$LN4@deflateCop:
  00183	5e		 pop	 esi

; 1025 :         return Z_STREAM_ERROR;

  00184	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00189	5b		 pop	 ebx

; 1064 : #endif /* MAXSEG_64K */
; 1065 : }

  0018a	5d		 pop	 ebp
  0018b	c2 08 00	 ret	 8
_deflateCopy@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\trunk2012\contribs\windows\x86\zlib\zlib-1.2.8\deflate.c
;	COMDAT _read_buf
_TEXT	SEGMENT
_size$ = 8						; size = 4
_read_buf PROC						; COMDAT
; _strm$ = ecx
; _buf$ = edx

; 1078 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	57		 push	 edi

; 1079 :     unsigned len = strm->avail_in;

  00008	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]

; 1080 : 
; 1081 :     if (len > size) len = size;

  0000b	3b 4d 08	 cmp	 ecx, DWORD PTR _size$[ebp]
  0000e	8b f9		 mov	 edi, ecx
  00010	0f 47 7d 08	 cmova	 edi, DWORD PTR _size$[ebp]
  00014	8b da		 mov	 ebx, edx

; 1082 :     if (len == 0) return 0;

  00016	85 ff		 test	 edi, edi
  00018	75 07		 jne	 SHORT $LN4@read_buf
  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	33 c0		 xor	 eax, eax
  0001e	5b		 pop	 ebx

; 1099 : }

  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
$LN4@read_buf:

; 1083 : 
; 1084 :     strm->avail_in  -= len;
; 1085 : 
; 1086 :     zmemcpy(buf, strm->next_in, len);

  00021	57		 push	 edi
  00022	ff 36		 push	 DWORD PTR [esi]
  00024	2b cf		 sub	 ecx, edi
  00026	53		 push	 ebx
  00027	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  0002a	e8 00 00 00 00	 call	 _memcpy

; 1087 :     if (strm->state->wrap == 1) {

  0002f	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
  00035	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00038	83 f8 01	 cmp	 eax, 1
  0003b	75 19		 jne	 SHORT $LN3@read_buf

; 1088 :         strm->adler = adler32(strm->adler, buf, len);

  0003d	57		 push	 edi
  0003e	53		 push	 ebx
  0003f	ff 76 30	 push	 DWORD PTR [esi+48]
  00042	e8 00 00 00 00	 call	 _adler32@12

; 1093 :     }
; 1094 : #endif
; 1095 :     strm->next_in  += len;

  00047	01 3e		 add	 DWORD PTR [esi], edi

; 1096 :     strm->total_in += len;

  00049	01 7e 08	 add	 DWORD PTR [esi+8], edi
  0004c	89 46 30	 mov	 DWORD PTR [esi+48], eax

; 1097 : 
; 1098 :     return (int)len;

  0004f	8b c7		 mov	 eax, edi
  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx

; 1099 : }

  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
$LN3@read_buf:

; 1089 :     }
; 1090 : #ifdef GZIP
; 1091 :     else if (strm->state->wrap == 2) {

  00056	83 f8 02	 cmp	 eax, 2
  00059	75 0d		 jne	 SHORT $LN1@read_buf

; 1092 :         strm->adler = crc32(strm->adler, buf, len);

  0005b	57		 push	 edi
  0005c	53		 push	 ebx
  0005d	ff 76 30	 push	 DWORD PTR [esi+48]
  00060	e8 00 00 00 00	 call	 _crc32@12
  00065	89 46 30	 mov	 DWORD PTR [esi+48], eax
$LN1@read_buf:

; 1093 :     }
; 1094 : #endif
; 1095 :     strm->next_in  += len;

  00068	01 3e		 add	 DWORD PTR [esi], edi

; 1096 :     strm->total_in += len;

  0006a	01 7e 08	 add	 DWORD PTR [esi+8], edi

; 1097 : 
; 1098 :     return (int)len;

  0006d	8b c7		 mov	 eax, edi
  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx

; 1099 : }

  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
_read_buf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\trunk2012\contribs\windows\x86\zlib\zlib-1.2.8\deflate.c
;	COMDAT _lm_init
_TEXT	SEGMENT
_lm_init PROC						; COMDAT
; _s$ = ecx

; 1106 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1107 :     s->window_size = (ulg)2L*s->w_size;
; 1108 : 
; 1109 :     CLEAR_HASH(s);

  00003	33 c9		 xor	 ecx, ecx
  00005	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00008	8b 56 4c	 mov	 edx, DWORD PTR [esi+76]
  0000b	03 c0		 add	 eax, eax
  0000d	89 46 3c	 mov	 DWORD PTR [esi+60], eax
  00010	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00013	66 89 4c 50 fe	 mov	 WORD PTR [eax+edx*2-2], cx
  00018	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  0001b	8d 04 45 fe ff
	ff ff		 lea	 eax, DWORD PTR [eax*2-2]
  00022	50		 push	 eax
  00023	51		 push	 ecx
  00024	ff 76 44	 push	 DWORD PTR [esi+68]
  00027	e8 00 00 00 00	 call	 _memset

; 1110 : 
; 1111 :     /* Set the default configuration parameters:
; 1112 :      */
; 1113 :     s->max_lazy_match   = configuration_table[s->level].max_lazy;

  0002c	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
  00035	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00038	0f b7 04 8d 02
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4+2]
  00040	89 86 80 00 00
	00		 mov	 DWORD PTR [esi+128], eax

; 1114 :     s->good_match       = configuration_table[s->level].good_length;

  00046	0f b7 04 8d 00
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4]
  0004e	89 86 8c 00 00
	00		 mov	 DWORD PTR [esi+140], eax

; 1115 :     s->nice_match       = configuration_table[s->level].nice_length;

  00054	0f b7 04 8d 04
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4+4]
  0005c	89 86 90 00 00
	00		 mov	 DWORD PTR [esi+144], eax

; 1116 :     s->max_chain_length = configuration_table[s->level].max_chain;

  00062	0f b7 04 8d 06
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4+6]
  0006a	89 46 7c	 mov	 DWORD PTR [esi+124], eax

; 1117 : 
; 1118 :     s->strstart = 0;

  0006d	c7 46 6c 00 00
	00 00		 mov	 DWORD PTR [esi+108], 0

; 1119 :     s->block_start = 0L;

  00074	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0

; 1120 :     s->lookahead = 0;

  0007b	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0

; 1121 :     s->insert = 0;

  00082	c7 86 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5812], 0

; 1122 :     s->match_length = s->prev_length = MIN_MATCH-1;

  0008c	c7 46 78 02 00
	00 00		 mov	 DWORD PTR [esi+120], 2
  00093	c7 46 60 02 00
	00 00		 mov	 DWORD PTR [esi+96], 2

; 1123 :     s->match_available = 0;

  0009a	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0

; 1124 :     s->ins_h = 0;

  000a1	c7 46 48 00 00
	00 00		 mov	 DWORD PTR [esi+72], 0
  000a8	5e		 pop	 esi

; 1125 : #ifndef FASTEST
; 1126 : #ifdef ASMV
; 1127 :     match_init(); /* initialize the asm code */

  000a9	e9 00 00 00 00	 jmp	 _match_init
_lm_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\trunk2012\contribs\windows\x86\zlib\zlib-1.2.8\deflate.c
;	COMDAT _fill_window
_TEXT	SEGMENT
_wsize$1$ = -8						; size = 4
_str$1$ = -4						; size = 4
_fill_window PROC					; COMDAT
; _s$ = ecx

; 1390 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi

; 1391 :     register unsigned n, m;
; 1392 :     register Posf *p;
; 1393 :     unsigned more;    /* Amount of free space at the end of the window. */
; 1394 :     uInt wsize = s->w_size;

  0000b	8b 5e 2c	 mov	 ebx, DWORD PTR [esi+44]
  0000e	89 5d f8	 mov	 DWORD PTR _wsize$1$[ebp], ebx
$LL26@fill_windo:

; 1395 : 
; 1396 :     Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");
; 1397 : 
; 1398 :     do {
; 1399 :         more = (unsigned)(s->window_size -(ulg)s->lookahead -(ulg)s->strstart);

  00011	8b 7e 3c	 mov	 edi, DWORD PTR [esi+60]

; 1400 : 
; 1401 :         /* Deal with !@#$% 64K limit: */
; 1402 :         if (sizeof(int) <= 2) {
; 1403 :             if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
; 1404 :                 more = wsize;
; 1405 : 
; 1406 :             } else if (more == (unsigned)(-1)) {
; 1407 :                 /* Very unlikely, but possible on 16 bit machine if
; 1408 :                  * strstart == 0 && lookahead == 1 (input done a byte at time)
; 1409 :                  */
; 1410 :                 more--;
; 1411 :             }
; 1412 :         }
; 1413 : 
; 1414 :         /* If the window is almost full and there is insufficient lookahead,
; 1415 :          * move the upper half to the lower one to make room in the upper half.
; 1416 :          */
; 1417 :         if (s->strstart >= wsize+MAX_DIST(s)) {

  00014	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00017	2b 7e 74	 sub	 edi, DWORD PTR [esi+116]
  0001a	05 fa fe ff ff	 add	 eax, -262		; fffffefaH
  0001f	2b 7e 6c	 sub	 edi, DWORD PTR [esi+108]
  00022	03 c3		 add	 eax, ebx
  00024	39 46 6c	 cmp	 DWORD PTR [esi+108], eax
  00027	72 60		 jb	 SHORT $LN19@fill_windo

; 1418 : 
; 1419 :             zmemcpy(s->window, s->window+wsize, (unsigned)wsize);

  00029	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  0002c	53		 push	 ebx
  0002d	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  00030	50		 push	 eax
  00031	51		 push	 ecx
  00032	e8 00 00 00 00	 call	 _memcpy

; 1420 :             s->match_start -= wsize;
; 1421 :             s->strstart    -= wsize; /* we now have strstart >= MAX_DIST */
; 1422 :             s->block_start -= (long) wsize;
; 1423 : 
; 1424 :             /* Slide the hash table (could be avoided with 32 bit values
; 1425 :                at the expense of memory usage). We slide even when level == 0
; 1426 :                to keep the hash table consistent if we switch back to level > 0
; 1427 :                later. (Using level 0 permanently is not an optimal usage of
; 1428 :                zlib, so we don't care about this pathological case.)
; 1429 :              */
; 1430 :             n = s->hash_size;

  00037	8b 56 4c	 mov	 edx, DWORD PTR [esi+76]

; 1431 :             p = &s->head[n];

  0003a	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  0003d	29 5e 70	 sub	 DWORD PTR [esi+112], ebx
  00040	29 5e 6c	 sub	 DWORD PTR [esi+108], ebx
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH
  00046	29 5e 5c	 sub	 DWORD PTR [esi+92], ebx
  00049	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  0004c	8d 64 24 00	 npad	 4
$LL18@fill_windo:

; 1432 :             do {
; 1433 :                 m = *--p;

  00050	0f b7 41 fe	 movzx	 eax, WORD PTR [ecx-2]
  00054	8d 49 fe	 lea	 ecx, DWORD PTR [ecx-2]

; 1434 :                 *p = (Pos)(m >= wsize ? m-wsize : NIL);

  00057	3b c3		 cmp	 eax, ebx
  00059	72 04		 jb	 SHORT $LN29@fill_windo
  0005b	2b c3		 sub	 eax, ebx
  0005d	eb 02		 jmp	 SHORT $LN30@fill_windo
$LN29@fill_windo:
  0005f	33 c0		 xor	 eax, eax
$LN30@fill_windo:
  00061	66 89 01	 mov	 WORD PTR [ecx], ax

; 1435 :             } while (--n);

  00064	4a		 dec	 edx
  00065	75 e9		 jne	 SHORT $LL18@fill_windo

; 1436 : 
; 1437 :             n = wsize;
; 1438 : #ifndef FASTEST
; 1439 :             p = &s->prev[n];

  00067	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  0006a	8b d3		 mov	 edx, ebx
  0006c	8d 0c 58	 lea	 ecx, DWORD PTR [eax+ebx*2]
  0006f	90		 npad	 1
$LL15@fill_windo:

; 1440 :             do {
; 1441 :                 m = *--p;

  00070	0f b7 41 fe	 movzx	 eax, WORD PTR [ecx-2]
  00074	8d 49 fe	 lea	 ecx, DWORD PTR [ecx-2]

; 1442 :                 *p = (Pos)(m >= wsize ? m-wsize : NIL);

  00077	3b c3		 cmp	 eax, ebx
  00079	72 04		 jb	 SHORT $LN31@fill_windo
  0007b	2b c3		 sub	 eax, ebx
  0007d	eb 02		 jmp	 SHORT $LN32@fill_windo
$LN31@fill_windo:
  0007f	33 c0		 xor	 eax, eax
$LN32@fill_windo:
  00081	66 89 01	 mov	 WORD PTR [ecx], ax

; 1443 :                 /* If n is not on any hash chain, prev[n] is garbage but
; 1444 :                  * its value will never be used.
; 1445 :                  */
; 1446 :             } while (--n);

  00084	4a		 dec	 edx
  00085	75 e9		 jne	 SHORT $LL15@fill_windo

; 1447 : #endif
; 1448 :             more += wsize;

  00087	03 fb		 add	 edi, ebx
$LN19@fill_windo:

; 1449 :         }
; 1450 :         if (s->strm->avail_in == 0) break;

  00089	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008b	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  0008f	0f 84 c3 00 00
	00		 je	 $LN24@fill_windo

; 1451 : 
; 1452 :         /* If there was no sliding:
; 1453 :          *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
; 1454 :          *    more == window_size - lookahead - strstart
; 1455 :          * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
; 1456 :          * => more >= window_size - 2*WSIZE + 2
; 1457 :          * In the BIG_MEM or MMAP case (not yet supported),
; 1458 :          *   window_size == input_size + MIN_LOOKAHEAD  &&
; 1459 :          *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
; 1460 :          * Otherwise, window_size == 2*WSIZE so more >= 2.
; 1461 :          * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
; 1462 :          */
; 1463 :         Assert(more >= 2, "more < 2");
; 1464 : 
; 1465 :         n = read_buf(s->strm, s->window + s->strstart + s->lookahead, more);

  00095	8b 56 74	 mov	 edx, DWORD PTR [esi+116]
  00098	03 56 6c	 add	 edx, DWORD PTR [esi+108]
  0009b	57		 push	 edi
  0009c	03 56 38	 add	 edx, DWORD PTR [esi+56]
  0009f	e8 00 00 00 00	 call	 _read_buf

; 1466 :         s->lookahead += n;

  000a4	01 46 74	 add	 DWORD PTR [esi+116], eax
  000a7	8b 46 74	 mov	 eax, DWORD PTR [esi+116]

; 1467 : 
; 1468 :         /* Initialize the hash value now that we have some input: */
; 1469 :         if (s->lookahead + s->insert >= MIN_MATCH) {

  000aa	8b 8e b4 16 00
	00		 mov	 ecx, DWORD PTR [esi+5812]
  000b0	03 c1		 add	 eax, ecx
  000b2	83 c4 04	 add	 esp, 4
  000b5	83 f8 03	 cmp	 eax, 3
  000b8	0f 82 85 00 00
	00		 jb	 $LN25@fill_windo

; 1470 :             uInt str = s->strstart - s->insert;

  000be	8b 7e 6c	 mov	 edi, DWORD PTR [esi+108]

; 1471 :             s->ins_h = s->window[str];

  000c1	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  000c4	2b f9		 sub	 edi, ecx

; 1472 :             UPDATE_HASH(s, s->ins_h, s->window[str + 1]);

  000c6	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  000c9	0f b6 14 38	 movzx	 edx, BYTE PTR [eax+edi]
  000cd	89 56 48	 mov	 DWORD PTR [esi+72], edx
  000d0	0f b6 44 38 01	 movzx	 eax, BYTE PTR [eax+edi+1]
  000d5	d3 e2		 shl	 edx, cl
  000d7	89 7d fc	 mov	 DWORD PTR _str$1$[ebp], edi
  000da	33 d0		 xor	 edx, eax
  000dc	23 56 54	 and	 edx, DWORD PTR [esi+84]

; 1473 : #if MIN_MATCH != 3
; 1474 :             Call UPDATE_HASH() MIN_MATCH-3 more times
; 1475 : #endif
; 1476 :             while (s->insert) {

  000df	83 be b4 16 00
	00 00		 cmp	 DWORD PTR [esi+5812], 0
  000e6	89 56 48	 mov	 DWORD PTR [esi+72], edx
  000e9	74 58		 je	 SHORT $LN25@fill_windo
  000eb	8b df		 mov	 ebx, edi
  000ed	8d 49 00	 npad	 3
$LL10@fill_windo:

; 1477 :                 UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]);

  000f0	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  000f3	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  000f6	0f b6 7c 18 02	 movzx	 edi, BYTE PTR [eax+ebx+2]
  000fb	8b 46 48	 mov	 eax, DWORD PTR [esi+72]

; 1478 : #ifndef FASTEST
; 1479 :                 s->prev[str & s->w_mask] = s->head[s->ins_h];

  000fe	8b 56 34	 mov	 edx, DWORD PTR [esi+52]
  00101	d3 e0		 shl	 eax, cl
  00103	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  00106	23 d3		 and	 edx, ebx
  00108	33 f8		 xor	 edi, eax
  0010a	23 7e 54	 and	 edi, DWORD PTR [esi+84]
  0010d	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00110	89 7e 48	 mov	 DWORD PTR [esi+72], edi
  00113	66 8b 04 78	 mov	 ax, WORD PTR [eax+edi*2]
  00117	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax

; 1480 : #endif
; 1481 :                 s->head[s->ins_h] = (Pos)str;

  0011b	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  0011e	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00121	66 89 1c 48	 mov	 WORD PTR [eax+ecx*2], bx

; 1482 :                 str++;
; 1483 :                 s->insert--;

  00125	ff 8e b4 16 00
	00		 dec	 DWORD PTR [esi+5812]
  0012b	8b 8e b4 16 00
	00		 mov	 ecx, DWORD PTR [esi+5812]

; 1484 :                 if (s->lookahead + s->insert < MIN_MATCH)

  00131	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  00134	03 c1		 add	 eax, ecx
  00136	43		 inc	 ebx
  00137	83 f8 03	 cmp	 eax, 3
  0013a	72 04		 jb	 SHORT $LN43@fill_windo

; 1473 : #if MIN_MATCH != 3
; 1474 :             Call UPDATE_HASH() MIN_MATCH-3 more times
; 1475 : #endif
; 1476 :             while (s->insert) {

  0013c	85 c9		 test	 ecx, ecx
  0013e	75 b0		 jne	 SHORT $LL10@fill_windo
$LN43@fill_windo:
  00140	8b 5d f8	 mov	 ebx, DWORD PTR _wsize$1$[ebp]
$LN25@fill_windo:

; 1485 :                     break;
; 1486 :             }
; 1487 :         }
; 1488 :         /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
; 1489 :          * but this is not important since only literal bytes will be emitted.
; 1490 :          */
; 1491 : 
; 1492 :     } while (s->lookahead < MIN_LOOKAHEAD && s->strm->avail_in != 0);

  00143	81 7e 74 06 01
	00 00		 cmp	 DWORD PTR [esi+116], 262 ; 00000106H
  0014a	73 0c		 jae	 SHORT $LN24@fill_windo
  0014c	8b 06		 mov	 eax, DWORD PTR [esi]
  0014e	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00152	0f 85 b9 fe ff
	ff		 jne	 $LL26@fill_windo
$LN24@fill_windo:

; 1493 : 
; 1494 :     /* If the WIN_INIT bytes after the end of the current data have never been
; 1495 :      * written, then zero those bytes in order to avoid memory check reports of
; 1496 :      * the use of uninitialized (or uninitialised as Julian writes) bytes by
; 1497 :      * the longest match routines.  Update the high water mark for the next
; 1498 :      * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
; 1499 :      * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
; 1500 :      */
; 1501 :     if (s->high_water < s->window_size) {

  00158	8b 8e c0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5824]
  0015e	8b 5e 3c	 mov	 ebx, DWORD PTR [esi+60]
  00161	3b cb		 cmp	 ecx, ebx
  00163	73 67		 jae	 SHORT $LN2@fill_windo

; 1502 :         ulg curr = s->strstart + (ulg)(s->lookahead);

  00165	8b 7e 74	 mov	 edi, DWORD PTR [esi+116]
  00168	03 7e 6c	 add	 edi, DWORD PTR [esi+108]

; 1503 :         ulg init;
; 1504 : 
; 1505 :         if (s->high_water < curr) {

  0016b	3b cf		 cmp	 ecx, edi
  0016d	73 2d		 jae	 SHORT $LN5@fill_windo

; 1506 :             /* Previous high water mark below current data -- zero WIN_INIT
; 1507 :              * bytes or up to end of window, whichever is less.
; 1508 :              */
; 1509 :             init = s->window_size - curr;
; 1510 :             if (init > WIN_INIT)

  0016f	b8 02 01 00 00	 mov	 eax, 258		; 00000102H
  00174	2b df		 sub	 ebx, edi
  00176	3b d8		 cmp	 ebx, eax
  00178	0f 47 d8	 cmova	 ebx, eax

; 1511 :                 init = WIN_INIT;
; 1512 :             zmemzero(s->window + curr, (unsigned)init);

  0017b	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  0017e	53		 push	 ebx
  0017f	03 c7		 add	 eax, edi
  00181	6a 00		 push	 0
  00183	50		 push	 eax
  00184	e8 00 00 00 00	 call	 _memset
  00189	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1513 :             s->high_water = curr + init;

  0018c	8d 04 3b	 lea	 eax, DWORD PTR [ebx+edi]
  0018f	5f		 pop	 edi
  00190	89 86 c0 16 00
	00		 mov	 DWORD PTR [esi+5824], eax
  00196	5e		 pop	 esi
  00197	5b		 pop	 ebx

; 1525 :         }
; 1526 :     }
; 1527 : 
; 1528 :     Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
; 1529 :            "not enough room for search");
; 1530 : }

  00198	8b e5		 mov	 esp, ebp
  0019a	5d		 pop	 ebp
  0019b	c3		 ret	 0
$LN5@fill_windo:

; 1514 :         }
; 1515 :         else if (s->high_water < (ulg)curr + WIN_INIT) {

  0019c	8d 87 02 01 00
	00		 lea	 eax, DWORD PTR [edi+258]
  001a2	3b c8		 cmp	 ecx, eax
  001a4	73 26		 jae	 SHORT $LN2@fill_windo

; 1516 :             /* High water mark at or above current data, but below current data
; 1517 :              * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
; 1518 :              * to end of window, whichever is less.
; 1519 :              */
; 1520 :             init = (ulg)curr + WIN_INIT - s->high_water;
; 1521 :             if (init > s->window_size - s->high_water)
; 1522 :                 init = s->window_size - s->high_water;
; 1523 :             zmemzero(s->window + s->high_water, (unsigned)init);

  001a6	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  001a9	2b f9		 sub	 edi, ecx
  001ab	2b d9		 sub	 ebx, ecx
  001ad	81 c7 02 01 00
	00		 add	 edi, 258		; 00000102H
  001b3	3b fb		 cmp	 edi, ebx
  001b5	0f 47 fb	 cmova	 edi, ebx
  001b8	57		 push	 edi
  001b9	03 c1		 add	 eax, ecx
  001bb	6a 00		 push	 0
  001bd	50		 push	 eax
  001be	e8 00 00 00 00	 call	 _memset
  001c3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1524 :             s->high_water += init;

  001c6	01 be c0 16 00
	00		 add	 DWORD PTR [esi+5824], edi
$LN2@fill_windo:
  001cc	5f		 pop	 edi
  001cd	5e		 pop	 esi
  001ce	5b		 pop	 ebx

; 1525 :         }
; 1526 :     }
; 1527 : 
; 1528 :     Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
; 1529 :            "not enough room for search");
; 1530 : }

  001cf	8b e5		 mov	 esp, ebp
  001d1	5d		 pop	 ebp
  001d2	c3		 ret	 0
_fill_window ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\trunk2012\contribs\windows\x86\zlib\zlib-1.2.8\deflate.c
;	COMDAT _deflate_stored
_TEXT	SEGMENT
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_stored PROC					; COMDAT

; 1565 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 1566 :     /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
; 1567 :      * to pending_buf_size, and each stored block has a 5 byte header:
; 1568 :      */
; 1569 :     ulg max_block_size = 0xffff;
; 1570 :     ulg max_start;
; 1571 : 
; 1572 :     if (max_block_size > s->pending_buf_size - 5) {

  00005	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  00008	bb ff ff 00 00	 mov	 ebx, 65535		; 0000ffffH
  0000d	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00010	83 c0 fb	 add	 eax, -5			; fffffffbH
  00013	3b c3		 cmp	 eax, ebx
  00015	57		 push	 edi
  00016	0f 42 d8	 cmovb	 ebx, eax
  00019	8d a4 24 00 00
	00 00		 npad	 7
$LL14@deflate_st:

; 1573 :         max_block_size = s->pending_buf_size - 5;
; 1574 :     }
; 1575 : 
; 1576 :     /* Copy as much as possible from input to output: */
; 1577 :     for (;;) {
; 1578 :         /* Fill the window as much as possible: */
; 1579 :         if (s->lookahead <= 1) {

  00020	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  00023	83 f8 01	 cmp	 eax, 1
  00026	77 12		 ja	 SHORT $LN10@deflate_st

; 1580 : 
; 1581 :             Assert(s->strstart < s->w_size+MAX_DIST(s) ||
; 1582 :                    s->block_start >= (long)s->w_size, "slide too late");
; 1583 : 
; 1584 :             fill_window(s);

  00028	8b ce		 mov	 ecx, esi
  0002a	e8 00 00 00 00	 call	 _fill_window

; 1585 :             if (s->lookahead == 0 && flush == Z_NO_FLUSH) return need_more;

  0002f	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  00032	85 c0		 test	 eax, eax
  00034	0f 84 a0 00 00
	00		 je	 $LN34@deflate_st
$LN10@deflate_st:

; 1586 : 
; 1587 :             if (s->lookahead == 0) break; /* flush the current block */
; 1588 :         }
; 1589 :         Assert(s->block_start >= 0L, "block gone");
; 1590 : 
; 1591 :         s->strstart += s->lookahead;
; 1592 :         s->lookahead = 0;
; 1593 : 
; 1594 :         /* Emit a stored block if pending_buf will be full: */
; 1595 :         max_start = s->block_start + max_block_size;

  0003a	8b 7e 5c	 mov	 edi, DWORD PTR [esi+92]
  0003d	01 46 6c	 add	 DWORD PTR [esi+108], eax

; 1596 :         if (s->strstart == 0 || (ulg)s->strstart >= max_start) {

  00040	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00043	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0
  0004a	8d 04 1f	 lea	 eax, DWORD PTR [edi+ebx]
  0004d	74 04		 je	 SHORT $LN8@deflate_st
  0004f	3b c8		 cmp	 ecx, eax
  00051	72 39		 jb	 SHORT $LN7@deflate_st
$LN8@deflate_st:

; 1597 :             /* strstart == 0 is possible when wraparound on 16-bit machine */
; 1598 :             s->lookahead = (uInt)(s->strstart - max_start);

  00053	2b c8		 sub	 ecx, eax
  00055	89 4e 74	 mov	 DWORD PTR [esi+116], ecx

; 1599 :             s->strstart = (uInt)max_start;

  00058	89 46 6c	 mov	 DWORD PTR [esi+108], eax

; 1600 :             FLUSH_BLOCK(s, 0);

  0005b	85 ff		 test	 edi, edi
  0005d	78 07		 js	 SHORT $LN18@deflate_st
  0005f	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  00062	03 d7		 add	 edx, edi
  00064	eb 02		 jmp	 SHORT $LN19@deflate_st
$LN18@deflate_st:
  00066	33 d2		 xor	 edx, edx
$LN19@deflate_st:
  00068	2b c7		 sub	 eax, edi
  0006a	6a 00		 push	 0
  0006c	50		 push	 eax
  0006d	8b ce		 mov	 ecx, esi
  0006f	e8 00 00 00 00	 call	 __tr_flush_block
  00074	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00077	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00079	83 c4 08	 add	 esp, 8
  0007c	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  0007f	e8 00 00 00 00	 call	 _flush_pending
  00084	8b 06		 mov	 eax, DWORD PTR [esi]
  00086	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0008a	74 47		 je	 SHORT $LN30@deflate_st
$LN7@deflate_st:

; 1601 :         }
; 1602 :         /* Flush if we may have to slide, otherwise block_start may become
; 1603 :          * negative and the data will be gone:
; 1604 :          */
; 1605 :         if (s->strstart - (uInt)s->block_start >= MAX_DIST(s)) {

  0008c	8b 7e 5c	 mov	 edi, DWORD PTR [esi+92]
  0008f	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00092	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00095	2b cf		 sub	 ecx, edi
  00097	2d 06 01 00 00	 sub	 eax, 262		; 00000106H
  0009c	3b c8		 cmp	 ecx, eax
  0009e	72 80		 jb	 SHORT $LL14@deflate_st

; 1606 :             FLUSH_BLOCK(s, 0);

  000a0	85 ff		 test	 edi, edi
  000a2	78 07		 js	 SHORT $LN20@deflate_st
  000a4	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  000a7	03 d7		 add	 edx, edi
  000a9	eb 02		 jmp	 SHORT $LN21@deflate_st
$LN20@deflate_st:
  000ab	33 d2		 xor	 edx, edx
$LN21@deflate_st:
  000ad	6a 00		 push	 0
  000af	51		 push	 ecx
  000b0	8b ce		 mov	 ecx, esi
  000b2	e8 00 00 00 00	 call	 __tr_flush_block
  000b7	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  000ba	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000bc	83 c4 08	 add	 esp, 8
  000bf	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  000c2	e8 00 00 00 00	 call	 _flush_pending
  000c7	8b 06		 mov	 eax, DWORD PTR [esi]
  000c9	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  000cd	0f 85 4d ff ff
	ff		 jne	 $LL14@deflate_st
$LN30@deflate_st:
  000d3	5f		 pop	 edi
  000d4	5e		 pop	 esi

; 1600 :             FLUSH_BLOCK(s, 0);

  000d5	33 c0		 xor	 eax, eax
  000d7	5b		 pop	 ebx

; 1617 : }

  000d8	5d		 pop	 ebp
  000d9	c3		 ret	 0
$LN34@deflate_st:

; 1585 :             if (s->lookahead == 0 && flush == Z_NO_FLUSH) return need_more;

  000da	8b 45 0c	 mov	 eax, DWORD PTR _flush$[ebp]
  000dd	85 c0		 test	 eax, eax
  000df	74 f2		 je	 SHORT $LN30@deflate_st

; 1607 :         }
; 1608 :     }
; 1609 :     s->insert = 0;

  000e1	c7 86 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5812], 0

; 1610 :     if (flush == Z_FINISH) {

  000eb	83 f8 04	 cmp	 eax, 4
  000ee	75 41		 jne	 SHORT $LN4@deflate_st

; 1611 :         FLUSH_BLOCK(s, 1);

  000f0	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  000f3	85 c9		 test	 ecx, ecx
  000f5	78 07		 js	 SHORT $LN22@deflate_st
  000f7	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  000fa	03 d1		 add	 edx, ecx
  000fc	eb 02		 jmp	 SHORT $LN23@deflate_st
$LN22@deflate_st:
  000fe	33 d2		 xor	 edx, edx
$LN23@deflate_st:
  00100	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00103	2b c1		 sub	 eax, ecx
  00105	6a 01		 push	 1
  00107	50		 push	 eax
  00108	8b ce		 mov	 ecx, esi
  0010a	e8 00 00 00 00	 call	 __tr_flush_block
  0010f	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00112	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00114	83 c4 08	 add	 esp, 8
  00117	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  0011a	e8 00 00 00 00	 call	 _flush_pending
  0011f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00121	33 c0		 xor	 eax, eax
  00123	39 41 10	 cmp	 DWORD PTR [ecx+16], eax
  00126	5f		 pop	 edi
  00127	0f 95 c0	 setne	 al
  0012a	5e		 pop	 esi
  0012b	5b		 pop	 ebx
  0012c	83 c0 02	 add	 eax, 2

; 1617 : }

  0012f	5d		 pop	 ebp
  00130	c3		 ret	 0
$LN4@deflate_st:

; 1612 :         return finish_done;
; 1613 :     }
; 1614 :     if ((long)s->strstart > s->block_start)

  00131	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00134	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00137	3b c8		 cmp	 ecx, eax
  00139	7e 35		 jle	 SHORT $LN1@deflate_st

; 1615 :         FLUSH_BLOCK(s, 0);

  0013b	85 c0		 test	 eax, eax
  0013d	78 07		 js	 SHORT $LN24@deflate_st
  0013f	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  00142	03 d0		 add	 edx, eax
  00144	eb 02		 jmp	 SHORT $LN25@deflate_st
$LN24@deflate_st:
  00146	33 d2		 xor	 edx, edx
$LN25@deflate_st:
  00148	2b c8		 sub	 ecx, eax
  0014a	6a 00		 push	 0
  0014c	51		 push	 ecx
  0014d	8b ce		 mov	 ecx, esi
  0014f	e8 00 00 00 00	 call	 __tr_flush_block
  00154	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00157	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00159	83 c4 08	 add	 esp, 8
  0015c	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  0015f	e8 00 00 00 00	 call	 _flush_pending
  00164	8b 06		 mov	 eax, DWORD PTR [esi]
  00166	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0016a	0f 84 63 ff ff
	ff		 je	 $LN30@deflate_st
$LN1@deflate_st:
  00170	5f		 pop	 edi
  00171	5e		 pop	 esi

; 1616 :     return block_done;

  00172	b8 01 00 00 00	 mov	 eax, 1
  00177	5b		 pop	 ebx

; 1617 : }

  00178	5d		 pop	 ebp
  00179	c3		 ret	 0
_deflate_stored ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\trunk2012\contribs\windows\x86\zlib\zlib-1.2.8\deflate.c
;	COMDAT _deflate_fast
_TEXT	SEGMENT
_bflush$1$ = 8						; size = 4
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_fast PROC					; COMDAT

; 1629 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b 5d 0c	 mov	 ebx, DWORD PTR _flush$[ebp]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000b	57		 push	 edi
  0000c	8d 64 24 00	 npad	 4
$LL20@deflate_fa:

; 1630 :     IPos hash_head;       /* head of the hash chain */
; 1631 :     int bflush;           /* set if current block must be flushed */
; 1632 : 
; 1633 :     for (;;) {
; 1634 :         /* Make sure that we always have enough lookahead, except
; 1635 :          * at the end of the input file. We need MAX_MATCH bytes
; 1636 :          * for the next match, plus MIN_MATCH bytes to insert the
; 1637 :          * string following the next match.
; 1638 :          */
; 1639 :         if (s->lookahead < MIN_LOOKAHEAD) {

  00010	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  00013	3d 06 01 00 00	 cmp	 eax, 262		; 00000106H
  00018	73 21		 jae	 SHORT $LN16@deflate_fa

; 1640 :             fill_window(s);

  0001a	8b ce		 mov	 ecx, esi
  0001c	e8 00 00 00 00	 call	 _fill_window

; 1641 :             if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {

  00021	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  00024	3d 06 01 00 00	 cmp	 eax, 262		; 00000106H
  00029	73 08		 jae	 SHORT $LN17@deflate_fa
  0002b	85 db		 test	 ebx, ebx
  0002d	0f 84 38 02 00
	00		 je	 $LN38@deflate_fa
$LN17@deflate_fa:

; 1642 :                 return need_more;
; 1643 :             }
; 1644 :             if (s->lookahead == 0) break; /* flush the current block */

  00033	85 c0		 test	 eax, eax
  00035	0f 84 37 02 00
	00		 je	 $LN37@deflate_fa
$LN16@deflate_fa:

; 1645 :         }
; 1646 : 
; 1647 :         /* Insert the string window[strstart .. strstart+2] in the
; 1648 :          * dictionary, and set hash_head to the head of the hash chain:
; 1649 :          */
; 1650 :         hash_head = NIL;
; 1651 :         if (s->lookahead >= MIN_MATCH) {

  0003b	83 f8 03	 cmp	 eax, 3
  0003e	72 6b		 jb	 SHORT $LN14@deflate_fa

; 1652 :             INSERT_STRING(s, s->strstart, hash_head);

  00040	8b 7e 6c	 mov	 edi, DWORD PTR [esi+108]
  00043	8b 5e 48	 mov	 ebx, DWORD PTR [esi+72]
  00046	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  00049	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  0004c	8b 56 34	 mov	 edx, DWORD PTR [esi+52]
  0004f	0f b6 44 38 02	 movzx	 eax, BYTE PTR [eax+edi+2]
  00054	d3 e3		 shl	 ebx, cl
  00056	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  00059	23 d7		 and	 edx, edi
  0005b	33 d8		 xor	 ebx, eax
  0005d	23 5e 54	 and	 ebx, DWORD PTR [esi+84]
  00060	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00063	89 5e 48	 mov	 DWORD PTR [esi+72], ebx
  00066	0f b7 04 58	 movzx	 eax, WORD PTR [eax+ebx*2]
  0006a	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax
  0006e	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00071	23 4e 34	 and	 ecx, DWORD PTR [esi+52]
  00074	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  00077	8b 56 48	 mov	 edx, DWORD PTR [esi+72]
  0007a	0f b7 3c 48	 movzx	 edi, WORD PTR [eax+ecx*2]
  0007e	0f b7 46 6c	 movzx	 eax, WORD PTR [esi+108]
  00082	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  00085	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax

; 1653 :         }
; 1654 : 
; 1655 :         /* Find the longest match, discarding those <= prev_length.
; 1656 :          * At this point we have always match_length < MIN_MATCH
; 1657 :          */
; 1658 :         if (hash_head != NIL && s->strstart - hash_head <= MAX_DIST(s)) {

  00089	85 ff		 test	 edi, edi
  0008b	74 1e		 je	 SHORT $LN14@deflate_fa
  0008d	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00090	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00093	2b cf		 sub	 ecx, edi
  00095	2d 06 01 00 00	 sub	 eax, 262		; 00000106H
  0009a	3b c8		 cmp	 ecx, eax
  0009c	77 0d		 ja	 SHORT $LN14@deflate_fa

; 1659 :             /* To simplify the code, we prevent matches with the string
; 1660 :              * of window index 0 (in particular we have to avoid a match
; 1661 :              * of the string with itself at the start of the input file).
; 1662 :              */
; 1663 :             s->match_length = longest_match (s, hash_head);

  0009e	57		 push	 edi
  0009f	56		 push	 esi
  000a0	e8 00 00 00 00	 call	 _longest_match
  000a5	83 c4 08	 add	 esp, 8
  000a8	89 46 60	 mov	 DWORD PTR [esi+96], eax
$LN14@deflate_fa:

; 1664 :             /* longest_match() sets match_start */
; 1665 :         }
; 1666 :         if (s->match_length >= MIN_MATCH) {

  000ab	83 7e 60 03	 cmp	 DWORD PTR [esi+96], 3
  000af	0f 82 1d 01 00
	00		 jb	 $LN13@deflate_fa

; 1667 :             check_match(s, s->strstart, s->match_start, s->match_length);
; 1668 : 
; 1669 :             _tr_tally_dist(s, s->strstart - s->match_start,
; 1670 :                            s->match_length - MIN_MATCH, bflush);

  000b5	66 8b 46 6c	 mov	 ax, WORD PTR [esi+108]
  000b9	66 2b 46 70	 sub	 ax, WORD PTR [esi+112]
  000bd	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  000c3	8a 56 60	 mov	 dl, BYTE PTR [esi+96]
  000c6	0f b7 f8	 movzx	 edi, ax
  000c9	8b 86 a4 16 00
	00		 mov	 eax, DWORD PTR [esi+5796]
  000cf	80 ea 03	 sub	 dl, 3
  000d2	66 89 3c 48	 mov	 WORD PTR [eax+ecx*2], di
  000d6	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  000dc	8b 8e 98 16 00
	00		 mov	 ecx, DWORD PTR [esi+5784]
  000e2	81 c7 ff ff 00
	00		 add	 edi, 65535		; 0000ffffH
  000e8	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  000eb	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  000f1	0f b6 c2	 movzx	 eax, dl
  000f4	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR __length_code[eax]
  000fb	66 ff 84 86 98
	04 00 00	 inc	 WORD PTR [esi+eax*4+1176]
  00103	b8 00 01 00 00	 mov	 eax, 256		; 00000100H
  00108	66 3b f8	 cmp	 di, ax
  0010b	0f b7 c7	 movzx	 eax, di
  0010e	73 09		 jae	 SHORT $LN23@deflate_fa
  00110	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR __dist_code[eax]
  00117	eb 0a		 jmp	 SHORT $LN24@deflate_fa
$LN23@deflate_fa:
  00119	c1 e8 07	 shr	 eax, 7
  0011c	0f b6 80 00 01
	00 00		 movzx	 eax, BYTE PTR __dist_code[eax+256]
$LN24@deflate_fa:
  00123	66 ff 84 86 88
	09 00 00	 inc	 WORD PTR [esi+eax*4+2440]
  0012b	8b 86 9c 16 00
	00		 mov	 eax, DWORD PTR [esi+5788]
  00131	48		 dec	 eax
  00132	33 db		 xor	 ebx, ebx
  00134	39 86 a0 16 00
	00		 cmp	 DWORD PTR [esi+5792], eax

; 1671 : 
; 1672 :             s->lookahead -= s->match_length;

  0013a	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  0013d	0f 94 c3	 sete	 bl
  00140	29 46 74	 sub	 DWORD PTR [esi+116], eax
  00143	89 5d 08	 mov	 DWORD PTR _bflush$1$[ebp], ebx

; 1673 : 
; 1674 :             /* Insert new strings in the hash table only if the match length
; 1675 :              * is not too large. This saves time but degrades compression.
; 1676 :              */
; 1677 : #ifndef FASTEST
; 1678 :             if (s->match_length <= s->max_insert_length &&
; 1679 :                 s->lookahead >= MIN_MATCH) {

  00146	3b 86 80 00 00
	00		 cmp	 eax, DWORD PTR [esi+128]
  0014c	77 5b		 ja	 SHORT $LN12@deflate_fa
  0014e	83 7e 74 03	 cmp	 DWORD PTR [esi+116], 3
  00152	72 55		 jb	 SHORT $LN12@deflate_fa

; 1680 :                 s->match_length--; /* string at strstart already in table */

  00154	48		 dec	 eax
  00155	89 46 60	 mov	 DWORD PTR [esi+96], eax
  00158	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL11@deflate_fa:

; 1681 :                 do {
; 1682 :                     s->strstart++;

  00160	ff 46 6c	 inc	 DWORD PTR [esi+108]
  00163	8b 7e 6c	 mov	 edi, DWORD PTR [esi+108]

; 1683 :                     INSERT_STRING(s, s->strstart, hash_head);

  00166	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00169	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  0016c	0f b6 5c 07 02	 movzx	 ebx, BYTE PTR [edi+eax+2]
  00171	8b 46 48	 mov	 eax, DWORD PTR [esi+72]
  00174	8b 56 34	 mov	 edx, DWORD PTR [esi+52]
  00177	d3 e0		 shl	 eax, cl
  00179	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  0017c	23 d7		 and	 edx, edi
  0017e	33 d8		 xor	 ebx, eax
  00180	23 5e 54	 and	 ebx, DWORD PTR [esi+84]
  00183	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00186	89 5e 48	 mov	 DWORD PTR [esi+72], ebx
  00189	0f b7 04 58	 movzx	 eax, WORD PTR [eax+ebx*2]
  0018d	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax
  00191	0f b7 46 6c	 movzx	 eax, WORD PTR [esi+108]
  00195	8b 56 48	 mov	 edx, DWORD PTR [esi+72]
  00198	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  0019b	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax

; 1684 :                     /* strstart never exceeds WSIZE-MAX_MATCH, so there are
; 1685 :                      * always MIN_MATCH bytes ahead.
; 1686 :                      */
; 1687 :                 } while (--s->match_length != 0);

  0019f	ff 4e 60	 dec	 DWORD PTR [esi+96]
  001a2	75 bc		 jne	 SHORT $LL11@deflate_fa

; 1688 :                 s->strstart++;
; 1689 :             } else

  001a4	8b 5d 08	 mov	 ebx, DWORD PTR _bflush$1$[ebp]
  001a7	eb 79		 jmp	 SHORT $LN41@deflate_fa
$LN12@deflate_fa:

; 1690 : #endif
; 1691 :             {
; 1692 :                 s->strstart += s->match_length;

  001a9	01 46 6c	 add	 DWORD PTR [esi+108], eax

; 1693 :                 s->match_length = 0;
; 1694 :                 s->ins_h = s->window[s->strstart];

  001ac	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  001af	03 46 6c	 add	 eax, DWORD PTR [esi+108]

; 1695 :                 UPDATE_HASH(s, s->ins_h, s->window[s->strstart+1]);

  001b2	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  001b5	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
  001bc	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  001bf	89 56 48	 mov	 DWORD PTR [esi+72], edx
  001c2	0f b6 40 01	 movzx	 eax, BYTE PTR [eax+1]
  001c6	d3 e2		 shl	 edx, cl
  001c8	33 d0		 xor	 edx, eax
  001ca	23 56 54	 and	 edx, DWORD PTR [esi+84]
  001cd	89 56 48	 mov	 DWORD PTR [esi+72], edx

; 1696 : #if MIN_MATCH != 3
; 1697 :                 Call UPDATE_HASH() MIN_MATCH-3 more times
; 1698 : #endif
; 1699 :                 /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
; 1700 :                  * matter since it will be recomputed at next deflate call.
; 1701 :                  */
; 1702 :             }
; 1703 :         } else {

  001d0	eb 53		 jmp	 SHORT $LN7@deflate_fa
$LN13@deflate_fa:

; 1704 :             /* No match, output a literal byte */
; 1705 :             Tracevv((stderr,"%c", s->window[s->strstart]));
; 1706 :             _tr_tally_lit (s, s->window[s->strstart], bflush);

  001d2	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  001d5	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  001d8	33 ff		 xor	 edi, edi
  001da	8a 14 01	 mov	 dl, BYTE PTR [ecx+eax]
  001dd	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  001e3	8b 86 a4 16 00
	00		 mov	 eax, DWORD PTR [esi+5796]
  001e9	33 db		 xor	 ebx, ebx
  001eb	66 89 3c 48	 mov	 WORD PTR [eax+ecx*2], di
  001ef	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  001f5	8b 8e 98 16 00
	00		 mov	 ecx, DWORD PTR [esi+5784]
  001fb	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  001fe	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  00204	0f b6 c2	 movzx	 eax, dl
  00207	66 ff 84 86 94
	00 00 00	 inc	 WORD PTR [esi+eax*4+148]
  0020f	8b 86 9c 16 00
	00		 mov	 eax, DWORD PTR [esi+5788]
  00215	48		 dec	 eax
  00216	39 86 a0 16 00
	00		 cmp	 DWORD PTR [esi+5792], eax
  0021c	0f 94 c3	 sete	 bl

; 1707 :             s->lookahead--;

  0021f	ff 4e 74	 dec	 DWORD PTR [esi+116]
$LN41@deflate_fa:

; 1708 :             s->strstart++;

  00222	ff 46 6c	 inc	 DWORD PTR [esi+108]
$LN7@deflate_fa:

; 1709 :         }
; 1710 :         if (bflush) FLUSH_BLOCK(s, 0);

  00225	85 db		 test	 ebx, ebx
  00227	8b 5d 0c	 mov	 ebx, DWORD PTR _flush$[ebp]
  0022a	0f 84 e0 fd ff
	ff		 je	 $LL20@deflate_fa
  00230	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  00233	85 c9		 test	 ecx, ecx
  00235	78 07		 js	 SHORT $LN25@deflate_fa
  00237	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  0023a	03 d1		 add	 edx, ecx
  0023c	eb 02		 jmp	 SHORT $LN26@deflate_fa
$LN25@deflate_fa:
  0023e	33 d2		 xor	 edx, edx
$LN26@deflate_fa:
  00240	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00243	2b c1		 sub	 eax, ecx
  00245	6a 00		 push	 0
  00247	50		 push	 eax
  00248	8b ce		 mov	 ecx, esi
  0024a	e8 00 00 00 00	 call	 __tr_flush_block
  0024f	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00252	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00254	83 c4 08	 add	 esp, 8
  00257	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  0025a	e8 00 00 00 00	 call	 _flush_pending
  0025f	8b 06		 mov	 eax, DWORD PTR [esi]
  00261	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00265	0f 85 a5 fd ff
	ff		 jne	 $LL20@deflate_fa
$LN38@deflate_fa:
  0026b	5f		 pop	 edi
  0026c	5e		 pop	 esi
  0026d	33 c0		 xor	 eax, eax
  0026f	5b		 pop	 ebx

; 1720 : }

  00270	5d		 pop	 ebp
  00271	c3		 ret	 0
$LN37@deflate_fa:

; 1711 :     }
; 1712 :     s->insert = s->strstart < MIN_MATCH-1 ? s->strstart : MIN_MATCH-1;

  00272	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00275	b8 02 00 00 00	 mov	 eax, 2
  0027a	3b c8		 cmp	 ecx, eax
  0027c	0f 42 c1	 cmovb	 eax, ecx
  0027f	89 86 b4 16 00
	00		 mov	 DWORD PTR [esi+5812], eax

; 1713 :     if (flush == Z_FINISH) {

  00285	83 fb 04	 cmp	 ebx, 4
  00288	75 3e		 jne	 SHORT $LN4@deflate_fa

; 1714 :         FLUSH_BLOCK(s, 1);

  0028a	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  0028d	85 c0		 test	 eax, eax
  0028f	78 07		 js	 SHORT $LN29@deflate_fa
  00291	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  00294	03 d0		 add	 edx, eax
  00296	eb 02		 jmp	 SHORT $LN30@deflate_fa
$LN29@deflate_fa:
  00298	33 d2		 xor	 edx, edx
$LN30@deflate_fa:
  0029a	2b c8		 sub	 ecx, eax
  0029c	6a 01		 push	 1
  0029e	51		 push	 ecx
  0029f	8b ce		 mov	 ecx, esi
  002a1	e8 00 00 00 00	 call	 __tr_flush_block
  002a6	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  002a9	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002ab	83 c4 08	 add	 esp, 8
  002ae	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  002b1	e8 00 00 00 00	 call	 _flush_pending
  002b6	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002b8	33 c0		 xor	 eax, eax
  002ba	39 41 10	 cmp	 DWORD PTR [ecx+16], eax
  002bd	5f		 pop	 edi
  002be	0f 95 c0	 setne	 al
  002c1	5e		 pop	 esi
  002c2	5b		 pop	 ebx
  002c3	83 c0 02	 add	 eax, 2

; 1720 : }

  002c6	5d		 pop	 ebp
  002c7	c3		 ret	 0
$LN4@deflate_fa:

; 1715 :         return finish_done;
; 1716 :     }
; 1717 :     if (s->last_lit)

  002c8	83 be a0 16 00
	00 00		 cmp	 DWORD PTR [esi+5792], 0
  002cf	74 38		 je	 SHORT $LN1@deflate_fa

; 1718 :         FLUSH_BLOCK(s, 0);

  002d1	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  002d4	85 c0		 test	 eax, eax
  002d6	78 07		 js	 SHORT $LN31@deflate_fa
  002d8	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  002db	03 d0		 add	 edx, eax
  002dd	eb 02		 jmp	 SHORT $LN32@deflate_fa
$LN31@deflate_fa:
  002df	33 d2		 xor	 edx, edx
$LN32@deflate_fa:
  002e1	2b c8		 sub	 ecx, eax
  002e3	6a 00		 push	 0
  002e5	51		 push	 ecx
  002e6	8b ce		 mov	 ecx, esi
  002e8	e8 00 00 00 00	 call	 __tr_flush_block
  002ed	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  002f0	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002f2	83 c4 08	 add	 esp, 8
  002f5	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  002f8	e8 00 00 00 00	 call	 _flush_pending
  002fd	8b 06		 mov	 eax, DWORD PTR [esi]
  002ff	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00303	0f 84 62 ff ff
	ff		 je	 $LN38@deflate_fa
$LN1@deflate_fa:
  00309	5f		 pop	 edi
  0030a	5e		 pop	 esi

; 1719 :     return block_done;

  0030b	b8 01 00 00 00	 mov	 eax, 1
  00310	5b		 pop	 ebx

; 1720 : }

  00311	5d		 pop	 ebp
  00312	c3		 ret	 0
_deflate_fast ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\trunk2012\contribs\windows\x86\zlib\zlib-1.2.8\deflate.c
;	COMDAT _deflate_slow
_TEXT	SEGMENT
_bflush$1$ = -4						; size = 4
_max_insert$1$ = 8					; size = 4
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_slow PROC					; COMDAT

; 1731 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b 5d 0c	 mov	 ebx, DWORD PTR _flush$[ebp]
  00008	56		 push	 esi
  00009	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000c	57		 push	 edi
  0000d	8d 49 00	 npad	 3
$LL26@deflate_sl:

; 1732 :     IPos hash_head;          /* head of hash chain */
; 1733 :     int bflush;              /* set if current block must be flushed */
; 1734 : 
; 1735 :     /* Process the input block. */
; 1736 :     for (;;) {
; 1737 :         /* Make sure that we always have enough lookahead, except
; 1738 :          * at the end of the input file. We need MAX_MATCH bytes
; 1739 :          * for the next match, plus MIN_MATCH bytes to insert the
; 1740 :          * string following the next match.
; 1741 :          */
; 1742 :         if (s->lookahead < MIN_LOOKAHEAD) {

  00010	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  00013	3d 06 01 00 00	 cmp	 eax, 262		; 00000106H
  00018	73 21		 jae	 SHORT $LN22@deflate_sl

; 1743 :             fill_window(s);

  0001a	8b ce		 mov	 ecx, esi
  0001c	e8 00 00 00 00	 call	 _fill_window

; 1744 :             if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {

  00021	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  00024	3d 06 01 00 00	 cmp	 eax, 262		; 00000106H
  00029	73 08		 jae	 SHORT $LN23@deflate_sl
  0002b	85 db		 test	 ebx, ebx
  0002d	0f 84 23 02 00
	00		 je	 $LN47@deflate_sl
$LN23@deflate_sl:

; 1745 :                 return need_more;
; 1746 :             }
; 1747 :             if (s->lookahead == 0) break; /* flush the current block */

  00033	85 c0		 test	 eax, eax
  00035	0f 84 d4 02 00
	00		 je	 $LN45@deflate_sl
$LN22@deflate_sl:

; 1748 :         }
; 1749 : 
; 1750 :         /* Insert the string window[strstart .. strstart+2] in the
; 1751 :          * dictionary, and set hash_head to the head of the hash chain:
; 1752 :          */
; 1753 :         hash_head = NIL;

  0003b	33 ff		 xor	 edi, edi

; 1754 :         if (s->lookahead >= MIN_MATCH) {

  0003d	83 f8 03	 cmp	 eax, 3
  00040	72 47		 jb	 SHORT $LN21@deflate_sl

; 1755 :             INSERT_STRING(s, s->strstart, hash_head);

  00042	8b 7e 6c	 mov	 edi, DWORD PTR [esi+108]
  00045	8b 56 48	 mov	 edx, DWORD PTR [esi+72]
  00048	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  0004b	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  0004e	d3 e2		 shl	 edx, cl
  00050	0f b6 44 38 02	 movzx	 eax, BYTE PTR [eax+edi+2]
  00055	23 7e 34	 and	 edi, DWORD PTR [esi+52]
  00058	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  0005b	33 d0		 xor	 edx, eax
  0005d	23 56 54	 and	 edx, DWORD PTR [esi+84]
  00060	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00063	89 56 48	 mov	 DWORD PTR [esi+72], edx
  00066	0f b7 04 50	 movzx	 eax, WORD PTR [eax+edx*2]
  0006a	66 89 04 79	 mov	 WORD PTR [ecx+edi*2], ax
  0006e	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00071	23 4e 34	 and	 ecx, DWORD PTR [esi+52]
  00074	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  00077	8b 56 48	 mov	 edx, DWORD PTR [esi+72]
  0007a	0f b7 3c 48	 movzx	 edi, WORD PTR [eax+ecx*2]
  0007e	0f b7 46 6c	 movzx	 eax, WORD PTR [esi+108]
  00082	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  00085	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax
$LN21@deflate_sl:

; 1756 :         }
; 1757 : 
; 1758 :         /* Find the longest match, discarding those <= prev_length.
; 1759 :          */
; 1760 :         s->prev_length = s->match_length, s->prev_match = s->match_start;

  00089	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  0008c	89 46 78	 mov	 DWORD PTR [esi+120], eax
  0008f	8b 46 70	 mov	 eax, DWORD PTR [esi+112]
  00092	89 46 64	 mov	 DWORD PTR [esi+100], eax

; 1761 :         s->match_length = MIN_MATCH-1;

  00095	c7 46 60 02 00
	00 00		 mov	 DWORD PTR [esi+96], 2

; 1762 : 
; 1763 :         if (hash_head != NIL && s->prev_length < s->max_lazy_match &&
; 1764 :             s->strstart - hash_head <= MAX_DIST(s)) {

  0009c	85 ff		 test	 edi, edi
  0009e	74 50		 je	 SHORT $LN19@deflate_sl
  000a0	8b 46 78	 mov	 eax, DWORD PTR [esi+120]
  000a3	3b 86 80 00 00
	00		 cmp	 eax, DWORD PTR [esi+128]
  000a9	73 45		 jae	 SHORT $LN19@deflate_sl
  000ab	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  000ae	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  000b1	2b cf		 sub	 ecx, edi
  000b3	2d 06 01 00 00	 sub	 eax, 262		; 00000106H
  000b8	3b c8		 cmp	 ecx, eax
  000ba	77 34		 ja	 SHORT $LN19@deflate_sl

; 1765 :             /* To simplify the code, we prevent matches with the string
; 1766 :              * of window index 0 (in particular we have to avoid a match
; 1767 :              * of the string with itself at the start of the input file).
; 1768 :              */
; 1769 :             s->match_length = longest_match (s, hash_head);

  000bc	57		 push	 edi
  000bd	56		 push	 esi
  000be	e8 00 00 00 00	 call	 _longest_match
  000c3	83 c4 08	 add	 esp, 8
  000c6	89 46 60	 mov	 DWORD PTR [esi+96], eax

; 1770 :             /* longest_match() sets match_start */
; 1771 : 
; 1772 :             if (s->match_length <= 5 && (s->strategy == Z_FILTERED
; 1773 : #if TOO_FAR <= 32767
; 1774 :                 || (s->match_length == MIN_MATCH &&
; 1775 :                     s->strstart - s->match_start > TOO_FAR)
; 1776 : #endif
; 1777 :                 )) {

  000c9	83 f8 05	 cmp	 eax, 5
  000cc	77 22		 ja	 SHORT $LN19@deflate_sl
  000ce	83 be 88 00 00
	00 01		 cmp	 DWORD PTR [esi+136], 1
  000d5	74 12		 je	 SHORT $LN18@deflate_sl
  000d7	83 f8 03	 cmp	 eax, 3
  000da	75 14		 jne	 SHORT $LN19@deflate_sl
  000dc	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  000df	2b 46 70	 sub	 eax, DWORD PTR [esi+112]
  000e2	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000e7	76 07		 jbe	 SHORT $LN19@deflate_sl
$LN18@deflate_sl:

; 1778 : 
; 1779 :                 /* If prev_match is also MIN_MATCH, match_start is garbage
; 1780 :                  * but we will ignore the current match anyway.
; 1781 :                  */
; 1782 :                 s->match_length = MIN_MATCH-1;

  000e9	c7 46 60 02 00
	00 00		 mov	 DWORD PTR [esi+96], 2
$LN19@deflate_sl:

; 1783 :             }
; 1784 :         }
; 1785 :         /* If there was a match at the previous step and the current
; 1786 :          * match is not better, output the previous match:
; 1787 :          */
; 1788 :         if (s->prev_length >= MIN_MATCH && s->match_length <= s->prev_length) {

  000f0	8b 46 78	 mov	 eax, DWORD PTR [esi+120]
  000f3	83 f8 03	 cmp	 eax, 3
  000f6	0f 82 63 01 00
	00		 jb	 $LN17@deflate_sl
  000fc	39 46 60	 cmp	 DWORD PTR [esi+96], eax
  000ff	0f 87 5a 01 00
	00		 ja	 $LN17@deflate_sl

; 1789 :             uInt max_insert = s->strstart + s->lookahead - MIN_MATCH;

  00105	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00108	8b 7e 74	 mov	 edi, DWORD PTR [esi+116]

; 1790 :             /* Do not insert strings in hash table beyond this. */
; 1791 : 
; 1792 :             check_match(s, s->strstart-1, s->prev_match, s->prev_length);
; 1793 : 
; 1794 :             _tr_tally_dist(s, s->strstart -1 - s->prev_match,
; 1795 :                            s->prev_length - MIN_MATCH, bflush);

  0010b	8a d0		 mov	 dl, al
  0010d	66 8b 46 6c	 mov	 ax, WORD PTR [esi+108]
  00111	66 2b 46 64	 sub	 ax, WORD PTR [esi+100]
  00115	83 c1 fd	 add	 ecx, -3			; fffffffdH
  00118	66 48		 dec	 ax
  0011a	0f b7 d8	 movzx	 ebx, ax
  0011d	8b 86 a4 16 00
	00		 mov	 eax, DWORD PTR [esi+5796]
  00123	03 f9		 add	 edi, ecx
  00125	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  0012b	80 ea 03	 sub	 dl, 3
  0012e	66 89 1c 48	 mov	 WORD PTR [eax+ecx*2], bx
  00132	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  00138	8b 8e 98 16 00
	00		 mov	 ecx, DWORD PTR [esi+5784]
  0013e	81 c3 ff ff 00
	00		 add	 ebx, 65535		; 0000ffffH
  00144	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00147	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  0014d	0f b6 c2	 movzx	 eax, dl
  00150	89 7d 08	 mov	 DWORD PTR _max_insert$1$[ebp], edi
  00153	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR __length_code[eax]
  0015a	66 ff 84 86 98
	04 00 00	 inc	 WORD PTR [esi+eax*4+1176]
  00162	b8 00 01 00 00	 mov	 eax, 256		; 00000100H
  00167	66 3b d8	 cmp	 bx, ax
  0016a	0f b7 c3	 movzx	 eax, bx
  0016d	73 09		 jae	 SHORT $LN29@deflate_sl
  0016f	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR __dist_code[eax]
  00176	eb 0a		 jmp	 SHORT $LN30@deflate_sl
$LN29@deflate_sl:
  00178	c1 e8 07	 shr	 eax, 7
  0017b	0f b6 80 00 01
	00 00		 movzx	 eax, BYTE PTR __dist_code[eax+256]
$LN30@deflate_sl:
  00182	66 ff 84 86 88
	09 00 00	 inc	 WORD PTR [esi+eax*4+2440]
  0018a	8b 86 9c 16 00
	00		 mov	 eax, DWORD PTR [esi+5788]
  00190	48		 dec	 eax
  00191	33 c9		 xor	 ecx, ecx
  00193	39 86 a0 16 00
	00		 cmp	 DWORD PTR [esi+5792], eax

; 1796 : 
; 1797 :             /* Insert in hash table all strings up to the end of the match.
; 1798 :              * strstart-1 and strstart are already inserted. If there is not
; 1799 :              * enough lookahead, the last two strings are not inserted in
; 1800 :              * the hash table.
; 1801 :              */
; 1802 :             s->lookahead -= s->prev_length-1;

  00199	b8 01 00 00 00	 mov	 eax, 1
  0019e	0f 94 c1	 sete	 cl
  001a1	89 4d fc	 mov	 DWORD PTR _bflush$1$[ebp], ecx
  001a4	8b 4e 78	 mov	 ecx, DWORD PTR [esi+120]
  001a7	2b c1		 sub	 eax, ecx
  001a9	01 46 74	 add	 DWORD PTR [esi+116], eax

; 1803 :             s->prev_length -= 2;

  001ac	8d 41 fe	 lea	 eax, DWORD PTR [ecx-2]
  001af	89 46 78	 mov	 DWORD PTR [esi+120], eax
$LL16@deflate_sl:

; 1804 :             do {
; 1805 :                 if (++s->strstart <= max_insert) {

  001b2	ff 46 6c	 inc	 DWORD PTR [esi+108]
  001b5	8b 5e 6c	 mov	 ebx, DWORD PTR [esi+108]
  001b8	3b df		 cmp	 ebx, edi
  001ba	77 3c		 ja	 SHORT $LN15@deflate_sl

; 1806 :                     INSERT_STRING(s, s->strstart, hash_head);

  001bc	8b 7e 48	 mov	 edi, DWORD PTR [esi+72]
  001bf	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  001c2	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  001c5	8b 56 34	 mov	 edx, DWORD PTR [esi+52]
  001c8	0f b6 44 18 02	 movzx	 eax, BYTE PTR [eax+ebx+2]
  001cd	d3 e7		 shl	 edi, cl
  001cf	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  001d2	33 f8		 xor	 edi, eax
  001d4	23 7e 54	 and	 edi, DWORD PTR [esi+84]
  001d7	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  001da	89 7e 48	 mov	 DWORD PTR [esi+72], edi
  001dd	0f b7 04 78	 movzx	 eax, WORD PTR [eax+edi*2]
  001e1	8b 7d 08	 mov	 edi, DWORD PTR _max_insert$1$[ebp]
  001e4	23 d3		 and	 edx, ebx
  001e6	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax
  001ea	0f b7 46 6c	 movzx	 eax, WORD PTR [esi+108]
  001ee	8b 56 48	 mov	 edx, DWORD PTR [esi+72]
  001f1	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  001f4	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax
$LN15@deflate_sl:

; 1807 :                 }
; 1808 :             } while (--s->prev_length != 0);

  001f8	ff 4e 78	 dec	 DWORD PTR [esi+120]
  001fb	75 b5		 jne	 SHORT $LL16@deflate_sl

; 1809 :             s->match_available = 0;
; 1810 :             s->match_length = MIN_MATCH-1;
; 1811 :             s->strstart++;

  001fd	ff 46 6c	 inc	 DWORD PTR [esi+108]

; 1812 : 
; 1813 :             if (bflush) FLUSH_BLOCK(s, 0);

  00200	83 7d fc 00	 cmp	 DWORD PTR _bflush$1$[ebp], 0
  00204	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00207	8b 5d 0c	 mov	 ebx, DWORD PTR _flush$[ebp]
  0020a	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0
  00211	c7 46 60 02 00
	00 00		 mov	 DWORD PTR [esi+96], 2
  00218	0f 84 f2 fd ff
	ff		 je	 $LL26@deflate_sl
  0021e	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00221	85 c0		 test	 eax, eax
  00223	78 07		 js	 SHORT $LN31@deflate_sl
  00225	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  00228	03 d0		 add	 edx, eax
  0022a	eb 02		 jmp	 SHORT $LN32@deflate_sl
$LN31@deflate_sl:
  0022c	33 d2		 xor	 edx, edx
$LN32@deflate_sl:
  0022e	2b c8		 sub	 ecx, eax
  00230	6a 00		 push	 0
  00232	51		 push	 ecx
  00233	8b ce		 mov	 ecx, esi
  00235	e8 00 00 00 00	 call	 __tr_flush_block
  0023a	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  0023d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0023f	83 c4 08	 add	 esp, 8
  00242	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  00245	e8 00 00 00 00	 call	 _flush_pending
  0024a	8b 06		 mov	 eax, DWORD PTR [esi]
  0024c	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00250	0f 85 ba fd ff
	ff		 jne	 $LL26@deflate_sl
$LN47@deflate_sl:
  00256	5f		 pop	 edi
  00257	5e		 pop	 esi

; 1824 :             }
; 1825 :             s->strstart++;
; 1826 :             s->lookahead--;
; 1827 :             if (s->strm->avail_out == 0) return need_more;

  00258	33 c0		 xor	 eax, eax
  0025a	5b		 pop	 ebx

; 1851 : }

  0025b	8b e5		 mov	 esp, ebp
  0025d	5d		 pop	 ebp
  0025e	c3		 ret	 0
$LN17@deflate_sl:

; 1814 : 
; 1815 :         } else if (s->match_available) {

  0025f	83 7e 68 00	 cmp	 DWORD PTR [esi+104], 0
  00263	0f 84 94 00 00
	00		 je	 $LN9@deflate_sl

; 1816 :             /* If there was no match at the previous position, output a
; 1817 :              * single literal. If there was a match but the current match
; 1818 :              * is longer, truncate the previous match to a single literal.
; 1819 :              */
; 1820 :             Tracevv((stderr,"%c", s->window[s->strstart-1]));
; 1821 :             _tr_tally_lit(s, s->window[s->strstart-1], bflush);

  00269	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  0026c	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  0026f	33 ff		 xor	 edi, edi
  00271	8a 54 01 ff	 mov	 dl, BYTE PTR [ecx+eax-1]
  00275	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  0027b	8b 86 a4 16 00
	00		 mov	 eax, DWORD PTR [esi+5796]
  00281	66 89 3c 48	 mov	 WORD PTR [eax+ecx*2], di
  00285	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  0028b	8b 8e 98 16 00
	00		 mov	 ecx, DWORD PTR [esi+5784]
  00291	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00294	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  0029a	0f b6 c2	 movzx	 eax, dl
  0029d	66 ff 84 86 94
	00 00 00	 inc	 WORD PTR [esi+eax*4+148]
  002a5	8b 86 9c 16 00
	00		 mov	 eax, DWORD PTR [esi+5788]
  002ab	48		 dec	 eax
  002ac	39 86 a0 16 00
	00		 cmp	 DWORD PTR [esi+5792], eax

; 1822 :             if (bflush) {

  002b2	75 2f		 jne	 SHORT $LN8@deflate_sl

; 1823 :                 FLUSH_BLOCK_ONLY(s, 0);

  002b4	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  002b7	85 c9		 test	 ecx, ecx
  002b9	78 07		 js	 SHORT $LN33@deflate_sl
  002bb	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  002be	03 d1		 add	 edx, ecx
  002c0	eb 02		 jmp	 SHORT $LN34@deflate_sl
$LN33@deflate_sl:
  002c2	33 d2		 xor	 edx, edx
$LN34@deflate_sl:
  002c4	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  002c7	2b c1		 sub	 eax, ecx
  002c9	6a 00		 push	 0
  002cb	50		 push	 eax
  002cc	8b ce		 mov	 ecx, esi
  002ce	e8 00 00 00 00	 call	 __tr_flush_block
  002d3	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  002d6	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002d8	83 c4 08	 add	 esp, 8
  002db	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  002de	e8 00 00 00 00	 call	 _flush_pending
$LN8@deflate_sl:

; 1824 :             }
; 1825 :             s->strstart++;
; 1826 :             s->lookahead--;
; 1827 :             if (s->strm->avail_out == 0) return need_more;

  002e3	8b 06		 mov	 eax, DWORD PTR [esi]
  002e5	ff 46 6c	 inc	 DWORD PTR [esi+108]
  002e8	ff 4e 74	 dec	 DWORD PTR [esi+116]
  002eb	39 78 10	 cmp	 DWORD PTR [eax+16], edi
  002ee	0f 85 1c fd ff
	ff		 jne	 $LL26@deflate_sl
  002f4	5f		 pop	 edi
  002f5	5e		 pop	 esi
  002f6	33 c0		 xor	 eax, eax
  002f8	5b		 pop	 ebx

; 1851 : }

  002f9	8b e5		 mov	 esp, ebp
  002fb	5d		 pop	 ebp
  002fc	c3		 ret	 0
$LN9@deflate_sl:

; 1828 :         } else {
; 1829 :             /* There is no previous match to compare with, wait for
; 1830 :              * the next step to decide.
; 1831 :              */
; 1832 :             s->match_available = 1;
; 1833 :             s->strstart++;

  002fd	ff 46 6c	 inc	 DWORD PTR [esi+108]

; 1834 :             s->lookahead--;

  00300	ff 4e 74	 dec	 DWORD PTR [esi+116]
  00303	c7 46 68 01 00
	00 00		 mov	 DWORD PTR [esi+104], 1

; 1835 :         }
; 1836 :     }

  0030a	e9 01 fd ff ff	 jmp	 $LL26@deflate_sl
$LN45@deflate_sl:

; 1837 :     Assert (flush != Z_NO_FLUSH, "no flush?");
; 1838 :     if (s->match_available) {

  0030f	83 7e 68 00	 cmp	 DWORD PTR [esi+104], 0
  00313	74 3f		 je	 SHORT $LN5@deflate_sl

; 1839 :         Tracevv((stderr,"%c", s->window[s->strstart-1]));
; 1840 :         _tr_tally_lit(s, s->window[s->strstart-1], bflush);

  00315	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00318	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  0031b	33 ff		 xor	 edi, edi
  0031d	8a 54 01 ff	 mov	 dl, BYTE PTR [ecx+eax-1]
  00321	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  00327	8b 86 a4 16 00
	00		 mov	 eax, DWORD PTR [esi+5796]
  0032d	66 89 3c 48	 mov	 WORD PTR [eax+ecx*2], di
  00331	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  00337	8b 8e 98 16 00
	00		 mov	 ecx, DWORD PTR [esi+5784]
  0033d	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00340	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  00346	0f b6 c2	 movzx	 eax, dl
  00349	66 ff 84 86 94
	00 00 00	 inc	 WORD PTR [esi+eax*4+148]

; 1841 :         s->match_available = 0;

  00351	89 7e 68	 mov	 DWORD PTR [esi+104], edi
$LN5@deflate_sl:

; 1842 :     }
; 1843 :     s->insert = s->strstart < MIN_MATCH-1 ? s->strstart : MIN_MATCH-1;

  00354	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00357	b8 02 00 00 00	 mov	 eax, 2
  0035c	3b c8		 cmp	 ecx, eax
  0035e	0f 42 c1	 cmovb	 eax, ecx
  00361	89 86 b4 16 00
	00		 mov	 DWORD PTR [esi+5812], eax

; 1844 :     if (flush == Z_FINISH) {

  00367	83 fb 04	 cmp	 ebx, 4
  0036a	75 40		 jne	 SHORT $LN4@deflate_sl

; 1845 :         FLUSH_BLOCK(s, 1);

  0036c	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  0036f	85 c0		 test	 eax, eax
  00371	78 07		 js	 SHORT $LN37@deflate_sl
  00373	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  00376	03 d0		 add	 edx, eax
  00378	eb 02		 jmp	 SHORT $LN38@deflate_sl
$LN37@deflate_sl:
  0037a	33 d2		 xor	 edx, edx
$LN38@deflate_sl:
  0037c	2b c8		 sub	 ecx, eax
  0037e	6a 01		 push	 1
  00380	51		 push	 ecx
  00381	8b ce		 mov	 ecx, esi
  00383	e8 00 00 00 00	 call	 __tr_flush_block
  00388	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  0038b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0038d	83 c4 08	 add	 esp, 8
  00390	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  00393	e8 00 00 00 00	 call	 _flush_pending
  00398	8b 06		 mov	 eax, DWORD PTR [esi]
  0039a	33 c9		 xor	 ecx, ecx
  0039c	39 48 10	 cmp	 DWORD PTR [eax+16], ecx
  0039f	5f		 pop	 edi
  003a0	0f 95 c1	 setne	 cl
  003a3	5e		 pop	 esi
  003a4	5b		 pop	 ebx
  003a5	8d 41 02	 lea	 eax, DWORD PTR [ecx+2]

; 1851 : }

  003a8	8b e5		 mov	 esp, ebp
  003aa	5d		 pop	 ebp
  003ab	c3		 ret	 0
$LN4@deflate_sl:

; 1846 :         return finish_done;
; 1847 :     }
; 1848 :     if (s->last_lit)

  003ac	83 be a0 16 00
	00 00		 cmp	 DWORD PTR [esi+5792], 0
  003b3	74 38		 je	 SHORT $LN1@deflate_sl

; 1849 :         FLUSH_BLOCK(s, 0);

  003b5	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  003b8	85 c0		 test	 eax, eax
  003ba	78 07		 js	 SHORT $LN39@deflate_sl
  003bc	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  003bf	03 d0		 add	 edx, eax
  003c1	eb 02		 jmp	 SHORT $LN40@deflate_sl
$LN39@deflate_sl:
  003c3	33 d2		 xor	 edx, edx
$LN40@deflate_sl:
  003c5	2b c8		 sub	 ecx, eax
  003c7	6a 00		 push	 0
  003c9	51		 push	 ecx
  003ca	8b ce		 mov	 ecx, esi
  003cc	e8 00 00 00 00	 call	 __tr_flush_block
  003d1	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  003d4	8b 0e		 mov	 ecx, DWORD PTR [esi]
  003d6	83 c4 08	 add	 esp, 8
  003d9	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  003dc	e8 00 00 00 00	 call	 _flush_pending
  003e1	8b 06		 mov	 eax, DWORD PTR [esi]
  003e3	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  003e7	0f 84 69 fe ff
	ff		 je	 $LN47@deflate_sl
$LN1@deflate_sl:
  003ed	5f		 pop	 edi
  003ee	5e		 pop	 esi

; 1850 :     return block_done;

  003ef	b8 01 00 00 00	 mov	 eax, 1
  003f4	5b		 pop	 ebx

; 1851 : }

  003f5	8b e5		 mov	 esp, ebp
  003f7	5d		 pop	 ebp
  003f8	c3		 ret	 0
_deflate_slow ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\trunk2012\contribs\windows\x86\zlib\zlib-1.2.8\deflate.c
;	COMDAT _deflate_rle
_TEXT	SEGMENT
_flush$1$ = -4						; size = 4
_deflate_rle PROC					; COMDAT
; _s$ = ecx
; _flush$ = edx

; 1862 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b da		 mov	 ebx, edx
  00008	57		 push	 edi
  00009	89 5d fc	 mov	 DWORD PTR _flush$1$[ebp], ebx
  0000c	8b f1		 mov	 esi, ecx
  0000e	8b ff		 npad	 2
$LL20@deflate_rl:

; 1863 :     int bflush;             /* set if current block must be flushed */
; 1864 :     uInt prev;              /* byte at distance one to match */
; 1865 :     Bytef *scan, *strend;   /* scan goes up to strend for length of run */
; 1866 : 
; 1867 :     for (;;) {
; 1868 :         /* Make sure that we always have enough lookahead, except
; 1869 :          * at the end of the input file. We need MAX_MATCH bytes
; 1870 :          * for the longest run, plus one for the unrolled loop.
; 1871 :          */
; 1872 :         if (s->lookahead <= MAX_MATCH) {

  00010	8b 7e 74	 mov	 edi, DWORD PTR [esi+116]
  00013	81 ff 02 01 00
	00		 cmp	 edi, 258		; 00000102H
  00019	77 22		 ja	 SHORT $LN16@deflate_rl

; 1873 :             fill_window(s);

  0001b	8b ce		 mov	 ecx, esi
  0001d	e8 00 00 00 00	 call	 _fill_window

; 1874 :             if (s->lookahead <= MAX_MATCH && flush == Z_NO_FLUSH) {

  00022	8b 7e 74	 mov	 edi, DWORD PTR [esi+116]
  00025	81 ff 02 01 00
	00		 cmp	 edi, 258		; 00000102H
  0002b	77 08		 ja	 SHORT $LN17@deflate_rl
  0002d	85 db		 test	 ebx, ebx
  0002f	0f 84 bd 01 00
	00		 je	 $LN36@deflate_rl
$LN17@deflate_rl:

; 1875 :                 return need_more;
; 1876 :             }
; 1877 :             if (s->lookahead == 0) break; /* flush the current block */

  00035	85 ff		 test	 edi, edi
  00037	0f 84 be 01 00
	00		 je	 $LN35@deflate_rl
$LN16@deflate_rl:

; 1878 :         }
; 1879 : 
; 1880 :         /* See how many times the previous byte repeats */
; 1881 :         s->match_length = 0;

  0003d	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0

; 1882 :         if (s->lookahead >= MIN_MATCH && s->strstart > 0) {

  00044	83 ff 03	 cmp	 edi, 3
  00047	0f 82 9c 00 00
	00		 jb	 $LN9@deflate_rl
  0004d	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00050	85 c9		 test	 ecx, ecx
  00052	0f 84 91 00 00
	00		 je	 $LN9@deflate_rl

; 1883 :             scan = s->window + s->strstart - 1;

  00058	8b 5e 38	 mov	 ebx, DWORD PTR [esi+56]
  0005b	03 d9		 add	 ebx, ecx

; 1884 :             prev = *scan;
; 1885 :             if (prev == *++scan && prev == *++scan && prev == *++scan) {

  0005d	0f b6 0b	 movzx	 ecx, BYTE PTR [ebx]
  00060	0f b6 53 ff	 movzx	 edx, BYTE PTR [ebx-1]
  00064	8d 43 ff	 lea	 eax, DWORD PTR [ebx-1]
  00067	3b d1		 cmp	 edx, ecx
  00069	75 7b		 jne	 SHORT $LN41@deflate_rl
  0006b	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  0006f	3b d1		 cmp	 edx, ecx
  00071	75 73		 jne	 SHORT $LN41@deflate_rl
  00073	0f b6 48 03	 movzx	 ecx, BYTE PTR [eax+3]
  00077	83 c0 03	 add	 eax, 3
  0007a	3b d1		 cmp	 edx, ecx
  0007c	75 68		 jne	 SHORT $LN41@deflate_rl

; 1886 :                 strend = s->window + s->strstart + MAX_MATCH;

  0007e	81 c3 02 01 00
	00		 add	 ebx, 258		; 00000102H
$LL13@deflate_rl:

; 1887 :                 do {
; 1888 :                 } while (prev == *++scan && prev == *++scan &&
; 1889 :                          prev == *++scan && prev == *++scan &&
; 1890 :                          prev == *++scan && prev == *++scan &&
; 1891 :                          prev == *++scan && prev == *++scan &&
; 1892 :                          scan < strend);

  00084	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  00088	40		 inc	 eax
  00089	3b d1		 cmp	 edx, ecx
  0008b	75 43		 jne	 SHORT $LN10@deflate_rl
  0008d	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  00091	40		 inc	 eax
  00092	3b d1		 cmp	 edx, ecx
  00094	75 3a		 jne	 SHORT $LN10@deflate_rl
  00096	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  0009a	40		 inc	 eax
  0009b	3b d1		 cmp	 edx, ecx
  0009d	75 31		 jne	 SHORT $LN10@deflate_rl
  0009f	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  000a3	40		 inc	 eax
  000a4	3b d1		 cmp	 edx, ecx
  000a6	75 28		 jne	 SHORT $LN10@deflate_rl
  000a8	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  000ac	40		 inc	 eax
  000ad	3b d1		 cmp	 edx, ecx
  000af	75 1f		 jne	 SHORT $LN10@deflate_rl
  000b1	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  000b5	40		 inc	 eax
  000b6	3b d1		 cmp	 edx, ecx
  000b8	75 16		 jne	 SHORT $LN10@deflate_rl
  000ba	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  000be	40		 inc	 eax
  000bf	3b d1		 cmp	 edx, ecx
  000c1	75 0d		 jne	 SHORT $LN10@deflate_rl
  000c3	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  000c7	40		 inc	 eax
  000c8	3b d1		 cmp	 edx, ecx
  000ca	75 04		 jne	 SHORT $LN10@deflate_rl
  000cc	3b c3		 cmp	 eax, ebx
  000ce	72 b4		 jb	 SHORT $LL13@deflate_rl
$LN10@deflate_rl:

; 1893 :                 s->match_length = MAX_MATCH - (int)(strend - scan);

  000d0	2b c3		 sub	 eax, ebx
  000d2	8b 5d fc	 mov	 ebx, DWORD PTR _flush$1$[ebp]
  000d5	05 02 01 00 00	 add	 eax, 258		; 00000102H
  000da	89 46 60	 mov	 DWORD PTR [esi+96], eax

; 1894 :                 if (s->match_length > s->lookahead)

  000dd	3b c7		 cmp	 eax, edi
  000df	76 08		 jbe	 SHORT $LN9@deflate_rl

; 1895 :                     s->match_length = s->lookahead;

  000e1	89 7e 60	 mov	 DWORD PTR [esi+96], edi
  000e4	eb 03		 jmp	 SHORT $LN9@deflate_rl
$LN41@deflate_rl:
  000e6	8b 5d fc	 mov	 ebx, DWORD PTR _flush$1$[ebp]
$LN9@deflate_rl:

; 1896 :             }
; 1897 :             Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
; 1898 :         }
; 1899 : 
; 1900 :         /* Emit match if have run of MIN_MATCH or longer, else emit literal */
; 1901 :         if (s->match_length >= MIN_MATCH) {

  000e9	83 7e 60 03	 cmp	 DWORD PTR [esi+96], 3
  000ed	72 6d		 jb	 SHORT $LN8@deflate_rl

; 1902 :             check_match(s, s->strstart, s->strstart - 1, s->match_length);
; 1903 : 
; 1904 :             _tr_tally_dist(s, 1, s->match_length - MIN_MATCH, bflush);

  000ef	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  000f5	8b 86 a4 16 00
	00		 mov	 eax, DWORD PTR [esi+5796]
  000fb	8a 56 60	 mov	 dl, BYTE PTR [esi+96]
  000fe	bf 01 00 00 00	 mov	 edi, 1
  00103	66 89 3c 48	 mov	 WORD PTR [eax+ecx*2], di
  00107	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  0010d	8b 8e 98 16 00
	00		 mov	 ecx, DWORD PTR [esi+5784]
  00113	80 ea 03	 sub	 dl, 3
  00116	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00119	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  0011f	0f b6 c2	 movzx	 eax, dl
  00122	33 c9		 xor	 ecx, ecx
  00124	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR __length_code[eax]
  0012b	66 ff 84 86 98
	04 00 00	 inc	 WORD PTR [esi+eax*4+1176]
  00133	66 ff 86 88 09
	00 00		 inc	 WORD PTR [esi+2440]
  0013a	8b 86 9c 16 00
	00		 mov	 eax, DWORD PTR [esi+5788]
  00140	48		 dec	 eax
  00141	39 86 a0 16 00
	00		 cmp	 DWORD PTR [esi+5792], eax

; 1905 : 
; 1906 :             s->lookahead -= s->match_length;

  00147	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  0014a	0f 94 c1	 sete	 cl
  0014d	29 46 74	 sub	 DWORD PTR [esi+116], eax

; 1907 :             s->strstart += s->match_length;

  00150	01 46 6c	 add	 DWORD PTR [esi+108], eax

; 1908 :             s->match_length = 0;

  00153	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0

; 1909 :         } else {

  0015a	eb 53		 jmp	 SHORT $LN7@deflate_rl
$LN8@deflate_rl:

; 1910 :             /* No match, output a literal byte */
; 1911 :             Tracevv((stderr,"%c", s->window[s->strstart]));
; 1912 :             _tr_tally_lit (s, s->window[s->strstart], bflush);

  0015c	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  0015f	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00162	33 ff		 xor	 edi, edi
  00164	8a 14 01	 mov	 dl, BYTE PTR [ecx+eax]
  00167	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  0016d	8b 86 a4 16 00
	00		 mov	 eax, DWORD PTR [esi+5796]
  00173	66 89 3c 48	 mov	 WORD PTR [eax+ecx*2], di
  00177	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  0017d	8b 8e 98 16 00
	00		 mov	 ecx, DWORD PTR [esi+5784]
  00183	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00186	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  0018c	0f b6 c2	 movzx	 eax, dl
  0018f	33 c9		 xor	 ecx, ecx
  00191	66 ff 84 86 94
	00 00 00	 inc	 WORD PTR [esi+eax*4+148]
  00199	8b 86 9c 16 00
	00		 mov	 eax, DWORD PTR [esi+5788]
  0019f	48		 dec	 eax
  001a0	39 86 a0 16 00
	00		 cmp	 DWORD PTR [esi+5792], eax
  001a6	0f 94 c1	 sete	 cl

; 1913 :             s->lookahead--;

  001a9	ff 4e 74	 dec	 DWORD PTR [esi+116]

; 1914 :             s->strstart++;

  001ac	ff 46 6c	 inc	 DWORD PTR [esi+108]
$LN7@deflate_rl:

; 1915 :         }
; 1916 :         if (bflush) FLUSH_BLOCK(s, 0);

  001af	85 c9		 test	 ecx, ecx
  001b1	0f 84 59 fe ff
	ff		 je	 $LL20@deflate_rl
  001b7	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  001ba	85 c9		 test	 ecx, ecx
  001bc	78 07		 js	 SHORT $LN25@deflate_rl
  001be	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  001c1	03 d1		 add	 edx, ecx
  001c3	eb 02		 jmp	 SHORT $LN26@deflate_rl
$LN25@deflate_rl:
  001c5	33 d2		 xor	 edx, edx
$LN26@deflate_rl:
  001c7	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  001ca	2b c1		 sub	 eax, ecx
  001cc	6a 00		 push	 0
  001ce	50		 push	 eax
  001cf	8b ce		 mov	 ecx, esi
  001d1	e8 00 00 00 00	 call	 __tr_flush_block
  001d6	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  001d9	8b 0e		 mov	 ecx, DWORD PTR [esi]
  001db	83 c4 08	 add	 esp, 8
  001de	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  001e1	e8 00 00 00 00	 call	 _flush_pending
  001e6	8b 06		 mov	 eax, DWORD PTR [esi]
  001e8	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  001ec	0f 85 1e fe ff
	ff		 jne	 $LL20@deflate_rl
$LN36@deflate_rl:
  001f2	5f		 pop	 edi
  001f3	5e		 pop	 esi
  001f4	33 c0		 xor	 eax, eax
  001f6	5b		 pop	 ebx

; 1926 : }

  001f7	8b e5		 mov	 esp, ebp
  001f9	5d		 pop	 ebp
  001fa	c3		 ret	 0
$LN35@deflate_rl:

; 1917 :     }
; 1918 :     s->insert = 0;

  001fb	c7 86 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5812], 0

; 1919 :     if (flush == Z_FINISH) {

  00205	83 fb 04	 cmp	 ebx, 4
  00208	75 43		 jne	 SHORT $LN4@deflate_rl

; 1920 :         FLUSH_BLOCK(s, 1);

  0020a	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  0020d	85 c9		 test	 ecx, ecx
  0020f	78 07		 js	 SHORT $LN27@deflate_rl
  00211	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  00214	03 d1		 add	 edx, ecx
  00216	eb 02		 jmp	 SHORT $LN28@deflate_rl
$LN27@deflate_rl:
  00218	33 d2		 xor	 edx, edx
$LN28@deflate_rl:
  0021a	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  0021d	2b c1		 sub	 eax, ecx
  0021f	6a 01		 push	 1
  00221	50		 push	 eax
  00222	8b ce		 mov	 ecx, esi
  00224	e8 00 00 00 00	 call	 __tr_flush_block
  00229	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  0022c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0022e	83 c4 08	 add	 esp, 8
  00231	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  00234	e8 00 00 00 00	 call	 _flush_pending
  00239	8b 06		 mov	 eax, DWORD PTR [esi]
  0023b	33 c9		 xor	 ecx, ecx
  0023d	39 48 10	 cmp	 DWORD PTR [eax+16], ecx
  00240	5f		 pop	 edi
  00241	0f 95 c1	 setne	 cl
  00244	5e		 pop	 esi
  00245	5b		 pop	 ebx
  00246	8d 41 02	 lea	 eax, DWORD PTR [ecx+2]

; 1926 : }

  00249	8b e5		 mov	 esp, ebp
  0024b	5d		 pop	 ebp
  0024c	c3		 ret	 0
$LN4@deflate_rl:

; 1921 :         return finish_done;
; 1922 :     }
; 1923 :     if (s->last_lit)

  0024d	83 be a0 16 00
	00 00		 cmp	 DWORD PTR [esi+5792], 0
  00254	74 3b		 je	 SHORT $LN1@deflate_rl

; 1924 :         FLUSH_BLOCK(s, 0);

  00256	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  00259	85 c9		 test	 ecx, ecx
  0025b	78 07		 js	 SHORT $LN29@deflate_rl
  0025d	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  00260	03 d1		 add	 edx, ecx
  00262	eb 02		 jmp	 SHORT $LN30@deflate_rl
$LN29@deflate_rl:
  00264	33 d2		 xor	 edx, edx
$LN30@deflate_rl:
  00266	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00269	2b c1		 sub	 eax, ecx
  0026b	6a 00		 push	 0
  0026d	50		 push	 eax
  0026e	8b ce		 mov	 ecx, esi
  00270	e8 00 00 00 00	 call	 __tr_flush_block
  00275	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00278	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0027a	83 c4 08	 add	 esp, 8
  0027d	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  00280	e8 00 00 00 00	 call	 _flush_pending
  00285	8b 06		 mov	 eax, DWORD PTR [esi]
  00287	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0028b	0f 84 61 ff ff
	ff		 je	 $LN36@deflate_rl
$LN1@deflate_rl:
  00291	5f		 pop	 edi
  00292	5e		 pop	 esi

; 1925 :     return block_done;

  00293	b8 01 00 00 00	 mov	 eax, 1
  00298	5b		 pop	 ebx

; 1926 : }

  00299	8b e5		 mov	 esp, ebp
  0029b	5d		 pop	 ebp
  0029c	c3		 ret	 0
_deflate_rle ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\trunk2012\contribs\windows\x86\zlib\zlib-1.2.8\deflate.c
;	COMDAT _deflate_huff
_TEXT	SEGMENT
_deflate_huff PROC					; COMDAT
; _s$ = ecx
; _flush$ = edx

; 1935 : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b fa		 mov	 edi, edx
  00005	8b f1		 mov	 esi, ecx
$LL11@deflate_hu:

; 1936 :     int bflush;             /* set if current block must be flushed */
; 1937 : 
; 1938 :     for (;;) {
; 1939 :         /* Make sure that we have a literal to write. */
; 1940 :         if (s->lookahead == 0) {

  00007	83 7e 74 00	 cmp	 DWORD PTR [esi+116], 0
  0000b	75 11		 jne	 SHORT $LN8@deflate_hu

; 1941 :             fill_window(s);

  0000d	8b ce		 mov	 ecx, esi
  0000f	e8 00 00 00 00	 call	 _fill_window

; 1942 :             if (s->lookahead == 0) {

  00014	83 7e 74 00	 cmp	 DWORD PTR [esi+116], 0
  00018	0f 84 97 00 00
	00		 je	 $LN22@deflate_hu
$LN8@deflate_hu:

; 1944 :                     return need_more;
; 1945 :                 break;      /* flush the current block */
; 1946 :             }
; 1947 :         }
; 1948 : 
; 1949 :         /* Output a literal byte */
; 1950 :         s->match_length = 0;
; 1951 :         Tracevv((stderr,"%c", s->window[s->strstart]));
; 1952 :         _tr_tally_lit (s, s->window[s->strstart], bflush);

  0001e	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00021	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00024	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
  0002b	8a 14 01	 mov	 dl, BYTE PTR [ecx+eax]
  0002e	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  00034	8b 86 a4 16 00
	00		 mov	 eax, DWORD PTR [esi+5796]
  0003a	33 db		 xor	 ebx, ebx
  0003c	66 89 1c 48	 mov	 WORD PTR [eax+ecx*2], bx
  00040	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  00046	8b 8e 98 16 00
	00		 mov	 ecx, DWORD PTR [esi+5784]
  0004c	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0004f	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  00055	0f b6 c2	 movzx	 eax, dl
  00058	66 ff 84 86 94
	00 00 00	 inc	 WORD PTR [esi+eax*4+148]
  00060	8b 86 9c 16 00
	00		 mov	 eax, DWORD PTR [esi+5788]

; 1953 :         s->lookahead--;
; 1954 :         s->strstart++;

  00066	ff 46 6c	 inc	 DWORD PTR [esi+108]
  00069	ff 4e 74	 dec	 DWORD PTR [esi+116]
  0006c	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  0006f	48		 dec	 eax
  00070	39 86 a0 16 00
	00		 cmp	 DWORD PTR [esi+5792], eax

; 1955 :         if (bflush) FLUSH_BLOCK(s, 0);

  00076	75 8f		 jne	 SHORT $LL11@deflate_hu
  00078	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  0007b	85 c0		 test	 eax, eax
  0007d	78 07		 js	 SHORT $LN14@deflate_hu
  0007f	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  00082	03 d0		 add	 edx, eax
  00084	eb 02		 jmp	 SHORT $LN15@deflate_hu
$LN14@deflate_hu:
  00086	33 d2		 xor	 edx, edx
$LN15@deflate_hu:
  00088	2b c8		 sub	 ecx, eax
  0008a	6a 00		 push	 0
  0008c	51		 push	 ecx
  0008d	8b ce		 mov	 ecx, esi
  0008f	e8 00 00 00 00	 call	 __tr_flush_block
  00094	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00097	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00099	83 c4 08	 add	 esp, 8
  0009c	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  0009f	e8 00 00 00 00	 call	 _flush_pending
  000a4	8b 06		 mov	 eax, DWORD PTR [esi]
  000a6	39 58 10	 cmp	 DWORD PTR [eax+16], ebx
  000a9	0f 85 58 ff ff
	ff		 jne	 $LL11@deflate_hu
$LN23@deflate_hu:
  000af	5f		 pop	 edi
  000b0	5e		 pop	 esi
  000b1	33 c0		 xor	 eax, eax
  000b3	5b		 pop	 ebx

; 1965 : }

  000b4	c3		 ret	 0
$LN22@deflate_hu:

; 1943 :                 if (flush == Z_NO_FLUSH)

  000b5	85 ff		 test	 edi, edi
  000b7	74 f6		 je	 SHORT $LN23@deflate_hu

; 1956 :     }
; 1957 :     s->insert = 0;

  000b9	c7 86 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5812], 0

; 1958 :     if (flush == Z_FINISH) {

  000c3	83 ff 04	 cmp	 edi, 4
  000c6	75 40		 jne	 SHORT $LN4@deflate_hu

; 1959 :         FLUSH_BLOCK(s, 1);

  000c8	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  000cb	85 c9		 test	 ecx, ecx
  000cd	78 07		 js	 SHORT $LN16@deflate_hu
  000cf	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  000d2	03 d1		 add	 edx, ecx
  000d4	eb 02		 jmp	 SHORT $LN17@deflate_hu
$LN16@deflate_hu:
  000d6	33 d2		 xor	 edx, edx
$LN17@deflate_hu:
  000d8	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  000db	2b c1		 sub	 eax, ecx
  000dd	6a 01		 push	 1
  000df	50		 push	 eax
  000e0	8b ce		 mov	 ecx, esi
  000e2	e8 00 00 00 00	 call	 __tr_flush_block
  000e7	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  000ea	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000ec	83 c4 08	 add	 esp, 8
  000ef	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  000f2	e8 00 00 00 00	 call	 _flush_pending
  000f7	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000f9	33 c0		 xor	 eax, eax
  000fb	39 41 10	 cmp	 DWORD PTR [ecx+16], eax
  000fe	5f		 pop	 edi
  000ff	0f 95 c0	 setne	 al
  00102	5e		 pop	 esi
  00103	5b		 pop	 ebx
  00104	83 c0 02	 add	 eax, 2

; 1965 : }

  00107	c3		 ret	 0
$LN4@deflate_hu:

; 1960 :         return finish_done;
; 1961 :     }
; 1962 :     if (s->last_lit)

  00108	83 be a0 16 00
	00 00		 cmp	 DWORD PTR [esi+5792], 0
  0010f	74 3b		 je	 SHORT $LN1@deflate_hu

; 1963 :         FLUSH_BLOCK(s, 0);

  00111	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  00114	85 c9		 test	 ecx, ecx
  00116	78 07		 js	 SHORT $LN18@deflate_hu
  00118	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  0011b	03 d1		 add	 edx, ecx
  0011d	eb 02		 jmp	 SHORT $LN19@deflate_hu
$LN18@deflate_hu:
  0011f	33 d2		 xor	 edx, edx
$LN19@deflate_hu:
  00121	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00124	2b c1		 sub	 eax, ecx
  00126	6a 00		 push	 0
  00128	50		 push	 eax
  00129	8b ce		 mov	 ecx, esi
  0012b	e8 00 00 00 00	 call	 __tr_flush_block
  00130	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00133	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00135	83 c4 08	 add	 esp, 8
  00138	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  0013b	e8 00 00 00 00	 call	 _flush_pending
  00140	8b 06		 mov	 eax, DWORD PTR [esi]
  00142	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00146	0f 84 63 ff ff
	ff		 je	 $LN23@deflate_hu
$LN1@deflate_hu:
  0014c	5f		 pop	 edi
  0014d	5e		 pop	 esi

; 1964 :     return block_done;

  0014e	b8 01 00 00 00	 mov	 eax, 1
  00153	5b		 pop	 ebx

; 1965 : }

  00154	c3		 ret	 0
_deflate_huff ENDP
_TEXT	ENDS
END
