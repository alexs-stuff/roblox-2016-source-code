// THIS IS THE MODIFIED build.gradle FILE FOR YOUR 'hybridlib' MODULE

plugins {
    id 'com.android.library'
    // If you plan to use Kotlin in this library in the future, uncomment the next line:
    // id 'org.jetbrains.kotlin.android'
}

android {
    // ----------------------------------------------------------------------------------
    // !! IMPORTANT !! : YOU MUST PROVIDE A UNIQUE NAMESPACE FOR YOUR LIBRARY.
    //                   Replace "com.example.yourcompany.hybridlib" with something
    //                   appropriate for your project. For example: "com.roblox.hybridlib"
    //                   This is mandatory for modern Android Gradle Plugin versions.
    // ----------------------------------------------------------------------------------
    namespace "com.roblox.hybridlib"

    // Use a modern SDK version. 34 is Android 14 (as of early 2024).
    // Ensure you have this SDK installed via Android Studio's SDK Manager.
    compileSdk 34

    defaultConfig {
        // Maintain support down to Android 4.0.3/4.1 range as requested
        minSdkVersion 15 // Android 4.0.3 Ice Cream Sandwich MR1

        // targetSdkVersion is NOT set in the defaultConfig of a LIBRARY module.
        // It's determined by the APPLICATION module that uses this library.

        versionCode 1
        versionName "1.0"

        // This is needed if you add Android Instrumented Tests
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            // minifyEnabled false means your code will not be shrunk or obfuscated by R8/ProGuard.
            // For a library, this is often fine, or you might enable it if you want to reduce its size.
            minifyEnabled false
            // Use the modern ProGuard/R8 rules file.
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            // You can also define specific settings for debug builds if needed
        }
    }

    // Lint configuration (AGP 8 uses 'lint' block instead of deprecated 'lintOptions')
    lint {
        abortOnError = false
    }

    // If your library's Java code uses features from Java 8 or newer (like lambdas),
    // you need to specify compatibility.
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // If you add Kotlin to this library, you would configure its options here:
    // kotlinOptions {
    //     jvmTarget = '1.8'
    // }

    // 'buildToolsVersion' is generally not required with modern Android Gradle Plugin versions.
    // The plugin will use an appropriate version. You can usually remove it.

    // Repositories like mavenCentral() should typically be defined in your
    // project-level settings.gradle(.kts) or build.gradle(.kts) file,
    // not within each module's android block.
    // Removing it from here to promote modern practices.
}

dependencies {
    // For local .jar files in a 'libs' directory
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // ----------------------------------------------------------------------------------
    // ANDROIDX replacement compatible with minSdk 16.
    // Avoid core-ktx and newer androidx.core versions which raise minSdk.
    implementation 'androidx.core:core:1.3.2'
    // AndroidX LocalBroadcastManager replacement for old support-v4 LocalBroadcastManager
    implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.1.0'

    // If your library was using UI components from support-v4 (like Fragments, ViewPager old versions),
    // you might need other AndroidX libraries. For example:
    // implementation 'androidx.appcompat:appcompat:1.6.1' // For AppCompatActivity, themes, etc.
    // implementation 'androidx.fragment:fragment-ktx:1.6.2' // For Fragments
    //
    // It's best to identify exactly what your library needs from the old support-v4
    // and find the corresponding AndroidX artifact.
    // For now, core-ktx is a good starting point for basic utilities.
    // If you get "class not found" errors related to UI components later,
    // you'll need to add more specific AndroidX dependencies here.
    // ----------------------------------------------------------------------------------

    // Test dependencies
    testImplementation 'junit:junit:4.12' // Your original test dependency

    // Recommended for AndroidX instrumented tests (if you add any)
    // androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    // androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}
